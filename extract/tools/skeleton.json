{
"doc"
:
"Civilization IV Player Class"
, 
"type"
:
"module"
, 
"name"
:
"CvPythonExtensions"
, 
"members"
:
[
{
"type"
:
"type"
, 
"name"
:
"ActionSubTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"ACTIONSUBTYPE_AUTOMATE"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"ACTIONSUBTYPE_BUILD"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"ACTIONSUBTYPE_BUILDING"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"ACTIONSUBTYPE_COMMAND"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"ACTIONSUBTYPE_CONTROL"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"ACTIONSUBTYPE_INTERFACEMODE"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"ACTIONSUBTYPE_MISSION"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"ACTIONSUBTYPE_PROMOTION"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"ACTIONSUBTYPE_RELIGION"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"ACTIONSUBTYPE_SPECIALIST"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"ACTIONSUBTYPE_UNIT"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"NO_ACTIONSUBTYPE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"NUM_ACTIONSUBTYPES"
, 
"value"
:
12
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.ActionSubTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ActivationTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ActivationTypes"
, 
"name"
:
"ACTIVATE_CHILDFOCUS"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.ActivationTypes"
, 
"name"
:
"ACTIVATE_MIMICPARENT"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.ActivationTypes"
, 
"name"
:
"ACTIVATE_MIMICPARENTFOCUS"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.ActivationTypes"
, 
"name"
:
"ACTIVATE_NORMAL"
, 
"value"
:
0
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.ActivationTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.ActivationTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.ActivationTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.ActivationTypes"
, 
"name"
:
"values[3]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ActivityTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"ACTIVITY_AWAKE"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"ACTIVITY_HEAL"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"ACTIVITY_HOLD"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"ACTIVITY_INTERCEPT"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"ACTIVITY_MISSION"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"ACTIVITY_PATROL"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"ACTIVITY_PLUNDER"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"ACTIVITY_SENTRY"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"ACTIVITY_SLEEP"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"NO_ACTIVITY"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"NUM_ACTIVITY_TYPES"
, 
"value"
:
9
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.ActivityTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"AdvancedStartActionTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"ADVANCEDSTARTACTION_AUTOMATE"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"ADVANCEDSTARTACTION_BUILDING"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"ADVANCEDSTARTACTION_CITY"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"ADVANCEDSTARTACTION_CULTURE"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"ADVANCEDSTARTACTION_EXIT"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"ADVANCEDSTARTACTION_IMPROVEMENT"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"ADVANCEDSTARTACTION_POP"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"ADVANCEDSTARTACTION_ROUTE"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"ADVANCEDSTARTACTION_TECH"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"ADVANCEDSTARTACTION_UNIT"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"ADVANCEDSTARTACTION_VISIBILITY"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"NO_ADVANCEDSTARTACTION"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.AdvancedStartActionTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"AdvisorTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.AdvisorTypes"
, 
"name"
:
"NO_ADVISOR"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.AdvisorTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"AnimationCategoryTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.AnimationCategoryTypes"
, 
"name"
:
"ANIMCAT_NONE"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.AnimationCategoryTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"AnimationPathTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_AIRBOMB"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_AIRFADEIN"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_AIRFADEOUT"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_AIRSTRIKE"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_IDLE"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_LEADER_COMMAND"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_MELEE_DIE"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_MELEE_DIE_FADE"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_MELEE_FORTIFIED"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_MELEE_HURT"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_MELEE_STRIKE"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_MOVE"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_NONE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_NUKE_STRIKE"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_RANDOMIZE_ANIMATION_SET"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_RANGED_DIE"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_RANGED_DIE_FADE"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_RANGED_FORTIFIED"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_RANGED_RUNDIE"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_RANGED_RUNHIT"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"ANIMATIONPATH_RANGED_STRIKE"
, 
"value"
:
11
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[21]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.AnimationPathTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"AnimationTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"BONUSANIMATION_NOT_WORKED"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"BONUSANIMATION_UNIMPROVED"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"BONUSANIMATION_WORKED"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"IMPROVEMENTANIMATION_OFF"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"IMPROVEMENTANIMATION_OFF_EXTRA"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"IMPROVEMENTANIMATION_ON"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"IMPROVEMENTANIMATION_ON_EXTRA_1"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"IMPROVEMENTANIMATION_ON_EXTRA_2"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"IMPROVEMENTANIMATION_ON_EXTRA_3"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"IMPROVEMENTANIMATION_ON_EXTRA_4"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"NONE_ANIMATION"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
1
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.AnimationTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"AreaAITypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.AreaAITypes"
, 
"name"
:
"AREAAI_ASSAULT"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.AreaAITypes"
, 
"name"
:
"AREAAI_DEFENSIVE"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.AreaAITypes"
, 
"name"
:
"AREAAI_MASSING"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.AreaAITypes"
, 
"name"
:
"AREAAI_NEUTRAL"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.AreaAITypes"
, 
"name"
:
"AREAAI_OFFENSIVE"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.AreaAITypes"
, 
"name"
:
"NO_AREAAI"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.AreaAITypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.AreaAITypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.AreaAITypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.AreaAITypes"
, 
"name"
:
"values[3]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.AreaAITypes"
, 
"name"
:
"values[6]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.AreaAITypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"AreaBorderLayers"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"AREA_BORDER_LAYER_BLOCKADED"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"AREA_BORDER_LAYER_BLOCKADING"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"AREA_BORDER_LAYER_CITY_RADIUS"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"AREA_BORDER_LAYER_FOUNDING_BORDER"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"AREA_BORDER_LAYER_HIGHLIGHT_PLOT"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"AREA_BORDER_LAYER_RANGED"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"AREA_BORDER_LAYER_REVEALED_PLOTS"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"AREA_BORDER_LAYER_WORLD_BUILDER"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"NUM_AREA_BORDER_LAYERS"
, 
"value"
:
8
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.AreaBorderLayers"
, 
"name"
:
"values[8]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ArtStyleTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ArtStyleTypes"
, 
"name"
:
"NO_ARTSTYLE"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.ArtStyleTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"AttitudeTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.AttitudeTypes"
, 
"name"
:
"ATTITUDE_ANNOYED"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.AttitudeTypes"
, 
"name"
:
"ATTITUDE_CAUTIOUS"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.AttitudeTypes"
, 
"name"
:
"ATTITUDE_FRIENDLY"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.AttitudeTypes"
, 
"name"
:
"ATTITUDE_FURIOUS"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.AttitudeTypes"
, 
"name"
:
"ATTITUDE_PLEASED"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.AttitudeTypes"
, 
"name"
:
"NO_ATTITUDE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.AttitudeTypes"
, 
"name"
:
"NUM_ATTITUDE_TYPES"
, 
"value"
:
5
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.AttitudeTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.AttitudeTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.AttitudeTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.AttitudeTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.AttitudeTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.AttitudeTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.AttitudeTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"AudioTag"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"AUDIOTAG_2DSCRIPT"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"AUDIOTAG_3DSCRIPT"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"AUDIOTAG_CONTEXTID"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"AUDIOTAG_COUNT"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"AUDIOTAG_LOADTYPE"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"AUDIOTAG_NONE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"AUDIOTAG_POSITION"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"AUDIOTAG_SCRIPTTYPE"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"AUDIOTAG_SOUNDID"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"AUDIOTAG_SOUNDSCAPE"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"AUDIOTAG_SOUNDTYPE"
, 
"value"
:
2
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"values[9]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.AudioTag"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"AutomateTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.AutomateTypes"
, 
"name"
:
"AUTOMATE_BUILD"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.AutomateTypes"
, 
"name"
:
"AUTOMATE_CITY"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.AutomateTypes"
, 
"name"
:
"AUTOMATE_EXPLORE"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.AutomateTypes"
, 
"name"
:
"AUTOMATE_NETWORK"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.AutomateTypes"
, 
"name"
:
"AUTOMATE_RELIGION"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.AutomateTypes"
, 
"name"
:
"NO_AUTOMATE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.AutomateTypes"
, 
"name"
:
"NUM_AUTOMATE_TYPES"
, 
"value"
:
5
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.AutomateTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.AutomateTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.AutomateTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.AutomateTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.AutomateTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.AutomateTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.AutomateTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"BonusClassTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.BonusClassTypes"
, 
"name"
:
"NO_BONUSCLASS"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.BonusClassTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"BonusTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.BonusTypes"
, 
"name"
:
"NO_BONUS"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.BonusTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"BuildTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.BuildTypes"
, 
"name"
:
"NO_BUILD"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.BuildTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"BuildingClassTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.BuildingClassTypes"
, 
"name"
:
"NO_BUILDINGCLASS"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.BuildingClassTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"BuildingTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.BuildingTypes"
, 
"name"
:
"NO_BUILDING"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.BuildingTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ButtonPopupTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_ADDBUDDY"
, 
"value"
:
26
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_ADMIN"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_ADMIN_PASSWORD"
, 
"value"
:
23
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_ALARM"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_CHANGECIVIC"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_CHANGERELIGION"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_CHOOSEELECTION"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_CHOOSEPRODUCTION"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_CHOOSETECH"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_CONFIRMCOMMAND"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_CONFIRM_MENU"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_DEAL_CANCELED"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_DECLAREWARMOVE"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_DETAILS"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_DIPLOMACY"
, 
"value"
:
25
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_DIPLOVOTE"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_DISBANDCITY"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_DOESPIONAGE"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_DOESPIONAGE_TARGET"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_EVENT"
, 
"value"
:
32
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_EXTENDED_GAME"
, 
"value"
:
24
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_FORCED_DISCONNECT"
, 
"value"
:
27
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_FOUND_RELIGION"
, 
"value"
:
35
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_FREE_COLONY"
, 
"value"
:
33
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_KICKED"
, 
"value"
:
28
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_LAUNCH"
, 
"value"
:
34
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_LEADUNIT"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_LOADUNIT"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_MAIN_MENU"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_PITBOSS_DISCONNECT"
, 
"value"
:
28
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_PYTHON"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_PYTHON_SCREEN"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_RAZECITY"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_TEXT"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_VASSAL_DEMAND_TRIBUTE"
, 
"value"
:
30
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"BUTTONPOPUP_VASSAL_GRANT_TRIBUTE"
, 
"value"
:
31
}
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"NUM_BUTTONPOPUP_TYPES"
, 
"value"
:
36
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[23]"
}
]
, 
[
24
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[24]"
}
]
, 
[
25
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[25]"
}
]
, 
[
26
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[26]"
}
]
, 
[
27
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[27]"
}
]
, 
[
28
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[28]"
}
]
, 
[
30
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[30]"
}
]
, 
[
31
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[31]"
}
]
, 
[
32
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[32]"
}
]
, 
[
33
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[33]"
}
]
, 
[
34
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[34]"
}
]
, 
[
35
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[35]"
}
]
, 
[
36
, 
{
"type"
:
"CvPythonExtensions.ButtonPopupTypes"
, 
"name"
:
"values[36]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ButtonStyles"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_ARROW_LEFT"
, 
"value"
:
24
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_ARROW_RIGHT"
, 
"value"
:
25
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_CIRCLE"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_CITY_B01"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_CITY_B02BL"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_CITY_B02BR"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_CITY_B02TL"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_CITY_B02TR"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_CITY_B03BC"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_CITY_B03BL"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_CITY_B03BR"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_CITY_B03TC"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_CITY_B03TL"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_CITY_B03TR"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_CITY_FLAT"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_CITY_MINUS"
, 
"value"
:
23
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_CITY_PLUS"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_DEFAULT"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_ETCHED"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_FLAT"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_IMAGE"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_LABEL"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_LINK"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_SQUARE"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_STANDARD"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"BUTTON_STYLE_TOOL"
, 
"value"
:
7
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[23]"
}
]
, 
[
24
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[24]"
}
]
, 
[
25
, 
{
"type"
:
"CvPythonExtensions.ButtonStyles"
, 
"name"
:
"values[25]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CalendarTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CalendarTypes"
, 
"name"
:
"CALENDAR_BI_YEARLY"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.CalendarTypes"
, 
"name"
:
"CALENDAR_DEFAULT"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.CalendarTypes"
, 
"name"
:
"CALENDAR_MONTHS"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.CalendarTypes"
, 
"name"
:
"CALENDAR_SEASONS"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.CalendarTypes"
, 
"name"
:
"CALENDAR_TURNS"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.CalendarTypes"
, 
"name"
:
"CALENDAR_WEEKS"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.CalendarTypes"
, 
"name"
:
"CALENDAR_YEARS"
, 
"value"
:
2
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.CalendarTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.CalendarTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.CalendarTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.CalendarTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.CalendarTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.CalendarTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.CalendarTypes"
, 
"name"
:
"values[6]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"CameraFlyingCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"CameraLookAtTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CameraLookAtTypes"
, 
"name"
:
"CAMERALOOKAT_BATTLE"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.CameraLookAtTypes"
, 
"name"
:
"CAMERALOOKAT_BATTLE_ZOOM_IN"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.CameraLookAtTypes"
, 
"name"
:
"CAMERALOOKAT_CITY_ZOOM_IN"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.CameraLookAtTypes"
, 
"name"
:
"CAMERALOOKAT_IMMEDIATE"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.CameraLookAtTypes"
, 
"name"
:
"CAMERALOOKAT_NORMAL"
, 
"value"
:
0
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.CameraLookAtTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.CameraLookAtTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.CameraLookAtTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.CameraLookAtTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.CameraLookAtTypes"
, 
"name"
:
"values[5]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CameraMovementSpeeds"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CameraMovementSpeeds"
, 
"name"
:
"CAMERAMOVEMENTSPEED_FAST"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.CameraMovementSpeeds"
, 
"name"
:
"CAMERAMOVEMENTSPEED_NORMAL"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.CameraMovementSpeeds"
, 
"name"
:
"CAMERAMOVEMENTSPEED_SLOW"
, 
"value"
:
1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.CameraMovementSpeeds"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.CameraMovementSpeeds"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.CameraMovementSpeeds"
, 
"name"
:
"values[2]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CardinalDirectionTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CardinalDirectionTypes"
, 
"name"
:
"CARDINALDIRECTION_EAST"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.CardinalDirectionTypes"
, 
"name"
:
"CARDINALDIRECTION_NORTH"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.CardinalDirectionTypes"
, 
"name"
:
"CARDINALDIRECTION_SOUTH"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.CardinalDirectionTypes"
, 
"name"
:
"CARDINALDIRECTION_WEST"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.CardinalDirectionTypes"
, 
"name"
:
"NO_CARDINALDIRECTION"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.CardinalDirectionTypes"
, 
"name"
:
"NUM_CARDINALDIRECTION_TYPES"
, 
"value"
:
4
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.CardinalDirectionTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.CardinalDirectionTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.CardinalDirectionTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.CardinalDirectionTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.CardinalDirectionTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.CardinalDirectionTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ChatTargetTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ChatTargetTypes"
, 
"name"
:
"CHATTARGET_ALL"
, 
"value"
:
-2
}
, 
{
"type"
:
"CvPythonExtensions.ChatTargetTypes"
, 
"name"
:
"CHATTARGET_TEAM"
, 
"value"
:
-3
}
, 
{
"type"
:
"CvPythonExtensions.ChatTargetTypes"
, 
"name"
:
"NO_CHATTARGET"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-2
, 
{
"type"
:
"CvPythonExtensions.ChatTargetTypes"
, 
"name"
:
"values[-2]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.ChatTargetTypes"
, 
"name"
:
"values[-1]"
}
]
, 
[
-3
, 
{
"type"
:
"CvPythonExtensions.ChatTargetTypes"
, 
"name"
:
"values[-3]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CheckBoxStates"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CheckBoxStates"
, 
"name"
:
"OFF"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.CheckBoxStates"
, 
"name"
:
"ON"
, 
"value"
:
1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.CheckBoxStates"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.CheckBoxStates"
, 
"name"
:
"values[1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CitySizeTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CitySizeTypes"
, 
"name"
:
"CITYSIZE_LARGE"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.CitySizeTypes"
, 
"name"
:
"CITYSIZE_MEDIUM"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.CitySizeTypes"
, 
"name"
:
"CITYSIZE_SMALL"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.CitySizeTypes"
, 
"name"
:
"NO_CITYSIZE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.CitySizeTypes"
, 
"name"
:
"NUM_CITYSIZE_TYPES"
, 
"value"
:
3
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.CitySizeTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.CitySizeTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.CitySizeTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.CitySizeTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.CitySizeTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CityTabTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CityTabTypes"
, 
"name"
:
"CITYTAB_BUILDINGS"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.CityTabTypes"
, 
"name"
:
"CITYTAB_UNITS"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.CityTabTypes"
, 
"name"
:
"CITYTAB_WONDERS"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.CityTabTypes"
, 
"name"
:
"NUM_CITYTAB_TYPES"
, 
"value"
:
3
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.CityTabTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.CityTabTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.CityTabTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.CityTabTypes"
, 
"name"
:
"values[3]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CivicOptionTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CivicOptionTypes"
, 
"name"
:
"NO_CIVICOPTION"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.CivicOptionTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CivicTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CivicTypes"
, 
"name"
:
"NO_CIVIC"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.CivicTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CivilizationTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CivilizationTypes"
, 
"name"
:
"NO_CIVILIZATION"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.CivilizationTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CivilopediaPageTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_BONUS"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_BUILDING"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_CIV"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_CIVIC"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_CONCEPT"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_CONCEPT_NEW"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_CORPORATION"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_FEATURE"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_HINTS"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_IMPROVEMENT"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_LEADER"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_PROJECT"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_PROMOTION"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_RELIGION"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_SPECIALIST"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_TECH"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_TERRAIN"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_UNIT"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_UNIT_GROUP"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"CIVILOPEDIA_PAGE_WONDER"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"NO_CIVILOPEDIA_PAGE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"NUM_CIVILOPEDIA_PAGE_TYPES"
, 
"value"
:
20
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[20]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.CivilopediaPageTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ClimateTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ClimateTypes"
, 
"name"
:
"NO_CLIMATE"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.ClimateTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ColorTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ColorTypes"
, 
"name"
:
"NO_COLOR"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.ColorTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CombatDetails"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"eOwner"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"eVisualOwner"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iAIAnimalCombatModifierAA"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iAIAnimalCombatModifierTA"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iAIBarbarianCombatModifierAB"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iAIBarbarianCombatModifierTB"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iAmphibAttackModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iAnimalCombatModifierA"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iAnimalCombatModifierAA"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iAnimalCombatModifierT"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iAnimalCombatModifierTA"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iBarbarianCombatModifierAB"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iBarbarianCombatModifierTB"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iBaseCombatStr"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iCityAttackModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iCityBarbarianDefenseModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iCityDefenseModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iClassAttackModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iClassDefenseModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iCombat"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iCombatModifierA"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iCombatModifierT"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iCurrCombatStr"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iCurrHitPoints"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iDomainDefenseModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iDomainModifierA"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iDomainModifierT"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iExtraCombatPercent"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iFeatureAttackModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iFeatureDefenseModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iFortifyModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iHillsAttackModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iHillsDefenseModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iKamikazeModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iMaxCombatStr"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iMaxHitPoints"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iModifierTotal"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iPlotDefenseModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iRiverAttackModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iTerrainAttackModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iTerrainDefenseModifier"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"sUnitName"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CommandTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"COMMAND_AUTOMATE"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"COMMAND_CANCEL"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"COMMAND_CANCEL_ALL"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"COMMAND_DELETE"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"COMMAND_GIFT"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"COMMAND_HOTKEY"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"COMMAND_LOAD"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"COMMAND_LOAD_UNIT"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"COMMAND_PROMOTION"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"COMMAND_STOP_AUTOMATION"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"COMMAND_UNLOAD"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"COMMAND_UNLOAD_ALL"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"COMMAND_UPGRADE"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"COMMAND_WAKE"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"NO_COMMAND"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"NUM_COMMAND_TYPES"
, 
"value"
:
14
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.CommandTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CommerceTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CommerceTypes"
, 
"name"
:
"COMMERCE_CULTURE"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.CommerceTypes"
, 
"name"
:
"COMMERCE_ESPIONAGE"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.CommerceTypes"
, 
"name"
:
"COMMERCE_GOLD"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.CommerceTypes"
, 
"name"
:
"COMMERCE_RESEARCH"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.CommerceTypes"
, 
"name"
:
"NUM_COMMERCE_TYPES"
, 
"value"
:
4
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.CommerceTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.CommerceTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.CommerceTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.CommerceTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.CommerceTypes"
, 
"name"
:
"values[4]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ConceptTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ConceptTypes"
, 
"name"
:
"NO_CONCEPT"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.ConceptTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ContactTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"CONTACT_ASK_FOR_HELP"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"CONTACT_CIVIC_PRESSURE"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"CONTACT_DEFENSIVE_PACT"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"CONTACT_DEMAND_TRIBUTE"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"CONTACT_GIVE_HELP"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"CONTACT_JOIN_WAR"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"CONTACT_OPEN_BORDERS"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"CONTACT_PEACE_TREATY"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"CONTACT_PERMANENT_ALLIANCE"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"CONTACT_RELIGION_PRESSURE"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"CONTACT_STOP_TRADING"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"CONTACT_TRADE_BONUS"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"CONTACT_TRADE_MAP"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"CONTACT_TRADE_TECH"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"NUM_CONTACT_TYPES"
, 
"value"
:
14
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.ContactTypes"
, 
"name"
:
"values[14]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ControlTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_ADMIN_DETAILS"
, 
"value"
:
56
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_AUTOMOVES"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_BARE_MAP"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_CENTERONSELECTION"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_CHAT_ALL"
, 
"value"
:
49
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_CHAT_TEAM"
, 
"value"
:
50
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_CIVICS_SCREEN"
, 
"value"
:
43
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_CIVILOPEDIA"
, 
"value"
:
40
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_CORPORATION_SCREEN"
, 
"value"
:
42
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_CYCLEUNIT"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_CYCLEUNIT_ALT"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_CYCLEWORKER"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_CYCLE_CAMERA_FLYING_MODES"
, 
"value"
:
34
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_DETAILS"
, 
"value"
:
55
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_DIPLOMACY"
, 
"value"
:
59
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_DOMESTIC_SCREEN"
, 
"value"
:
51
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_ENDTURN"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_ENDTURN_ALT"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_ESPIONAGE_SCREEN"
, 
"value"
:
61
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_FINANCIAL_SCREEN"
, 
"value"
:
45
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_FLYING_CAMERA"
, 
"value"
:
37
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_FORCEENDTURN"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_FOREIGN_SCREEN"
, 
"value"
:
44
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_FREE_COLONY"
, 
"value"
:
62
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_GLOBELAYER"
, 
"value"
:
24
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_GLOBE_VIEW"
, 
"value"
:
54
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_GRID"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_HALL_OF_FAME"
, 
"value"
:
57
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_INFO"
, 
"value"
:
53
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_ISOMETRIC_CAMERA_LEFT"
, 
"value"
:
35
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_ISOMETRIC_CAMERA_RIGHT"
, 
"value"
:
36
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_LASTUNIT"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_LOAD_GAME"
, 
"value"
:
26
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_MILITARY_SCREEN"
, 
"value"
:
46
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_MOUSE_FLYING_CAMERA"
, 
"value"
:
38
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_NEXTCITY"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_NEXTUNIT"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_OPTIONS_SCREEN"
, 
"value"
:
27
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_ORTHO_CAMERA"
, 
"value"
:
33
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_PING"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_PREVCITY"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_PREVUNIT"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_QUICK_LOAD"
, 
"value"
:
32
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_QUICK_SAVE"
, 
"value"
:
31
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_RELIGION_SCREEN"
, 
"value"
:
41
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_RESOURCE_ALL"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_RETIRE"
, 
"value"
:
28
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_SAVE_GROUP"
, 
"value"
:
29
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_SAVE_NORMAL"
, 
"value"
:
30
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_SCORES"
, 
"value"
:
25
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_SELECTCAPITAL"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_SELECTCITY"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_SELECTYUNITALL"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_SELECTYUNITTYPE"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_SELECT_HEALTHY"
, 
"value"
:
60
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_SIGN"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_TECH_CHOOSER"
, 
"value"
:
47
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_TOP_DOWN_CAMERA"
, 
"value"
:
39
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_TURN_LOG"
, 
"value"
:
48
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_UNIT_ICONS"
, 
"value"
:
23
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_VICTORY_SCREEN"
, 
"value"
:
52
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_WORLD_BUILDER"
, 
"value"
:
58
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"CONTROL_YIELDS"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"NO_CONTROL"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"NUM_CONTROL_TYPES"
, 
"value"
:
63
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[23]"
}
]
, 
[
24
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[24]"
}
]
, 
[
25
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[25]"
}
]
, 
[
26
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[26]"
}
]
, 
[
27
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[27]"
}
]
, 
[
28
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[28]"
}
]
, 
[
29
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[29]"
}
]
, 
[
30
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[30]"
}
]
, 
[
31
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[31]"
}
]
, 
[
32
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[32]"
}
]
, 
[
33
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[33]"
}
]
, 
[
34
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[34]"
}
]
, 
[
35
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[35]"
}
]
, 
[
36
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[36]"
}
]
, 
[
37
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[37]"
}
]
, 
[
38
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[38]"
}
]
, 
[
39
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[39]"
}
]
, 
[
40
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[40]"
}
]
, 
[
41
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[41]"
}
]
, 
[
42
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[42]"
}
]
, 
[
43
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[43]"
}
]
, 
[
44
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[44]"
}
]
, 
[
45
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[45]"
}
]
, 
[
46
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[46]"
}
]
, 
[
47
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[47]"
}
]
, 
[
48
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[48]"
}
]
, 
[
49
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[49]"
}
]
, 
[
50
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[50]"
}
]
, 
[
51
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[51]"
}
]
, 
[
52
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[52]"
}
]
, 
[
53
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[53]"
}
]
, 
[
54
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[54]"
}
]
, 
[
55
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[55]"
}
]
, 
[
56
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[56]"
}
]
, 
[
57
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[57]"
}
]
, 
[
58
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[58]"
}
]
, 
[
59
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[59]"
}
]
, 
[
60
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[60]"
}
]
, 
[
61
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[61]"
}
]
, 
[
62
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[62]"
}
]
, 
[
63
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[63]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.ControlTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CorporationTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CorporationTypes"
, 
"name"
:
"NO_CORPORATION"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.CorporationTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CultureLevelTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CultureLevelTypes"
, 
"name"
:
"NO_CULTURELEVEL"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.CultureLevelTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CursorTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CursorTypes"
, 
"name"
:
"NO_CURSOR"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.CursorTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"CustomMapOptionTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.CustomMapOptionTypes"
, 
"name"
:
"NO_CUSTOM_MAPOPTION"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.CustomMapOptionTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"CutTreesCB"
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvActionInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAutomateType"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommandData"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommandType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getControlType"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHotKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInterfaceModeType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMissionData"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMissionType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isConfirmCommand"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVisible"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvArtInfoAsset"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getKFM"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNIF"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPath"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTag"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setKFM"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNIF"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPath"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTag"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvArtInfoBonus"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getKFM"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNIF"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPath"
}
, 
{
"doc"
:
"float  ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScale"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTag"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setKFM"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNIF"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPath"
}
, 
{
"doc"
:
"void (float fScale)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScale"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTag"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvArtInfoBuilding"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getKFM"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNIF"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPath"
}
, 
{
"doc"
:
"float  ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScale"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTag"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAnimated"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setKFM"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNIF"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPath"
}
, 
{
"doc"
:
"void (float fScale)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScale"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTag"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvArtInfoCivilization"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getKFM"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNIF"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPath"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTag"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWhiteFlag"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setKFM"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNIF"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPath"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTag"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvArtInfoFeature"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"string (int variety, string tagName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureDummyNodeName"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getKFM"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNIF"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPath"
}
, 
{
"doc"
:
"float  ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScale"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTag"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAnimated"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRiverArt"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setKFM"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNIF"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPath"
}
, 
{
"doc"
:
"void (float fScale)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScale"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTag"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvArtInfoImprovement"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getKFM"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNIF"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPath"
}
, 
{
"doc"
:
"float  ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScale"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTag"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isExtraAnimations"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setKFM"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNIF"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPath"
}
, 
{
"doc"
:
"void (float fScale)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScale"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTag"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvArtInfoInterface"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getKFM"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNIF"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPath"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTag"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setKFM"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNIF"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPath"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTag"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvArtInfoLeaderhead"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getKFM"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNIF"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPath"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTag"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setKFM"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNIF"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPath"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTag"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvArtInfoMisc"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getKFM"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNIF"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPath"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTag"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setKFM"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNIF"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPath"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTag"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvArtInfoMovie"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getKFM"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNIF"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPath"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTag"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setKFM"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNIF"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPath"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTag"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvArtInfoScalableAsset"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getKFM"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNIF"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPath"
}
, 
{
"doc"
:
"float  ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScale"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTag"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setKFM"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNIF"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPath"
}
, 
{
"doc"
:
"void (float fScale)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScale"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTag"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvArtInfoTerrain"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getKFM"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNIF"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPath"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTag"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setKFM"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNIF"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPath"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTag"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvArtInfoUnit"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInterfaceScale"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getKFM"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNIF"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPath"
}
, 
{
"doc"
:
"float  ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScale"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTag"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setKFM"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNIF"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPath"
}
, 
{
"doc"
:
"void (float fScale)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScale"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTag"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvAssetInfoBase"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPath"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTag"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPath"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTag"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvAutomateInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvBonusClassInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getUniqueRange"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvBonusInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIObjective"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAITradeModifier"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getArtDefineTag"
}
, 
{
"doc"
:
"CvArtInfoBonus ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getArtInfo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusClassType"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getChar"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConstAppearance"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGroupRand"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGroupRange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHealth"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxLatitude"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinAreaSize"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinLandPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinLatitude"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPercentPerPlayer"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlacementOrder"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRandAppearance1"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRandAppearance2"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRandAppearance3"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRandAppearance4"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechCityTrade"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechObsolete"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechReveal"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTilesPer"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUniqueRange"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldChange"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFeature"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFeatureTerrain"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFlatlands"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHills"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoRiverSide"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNormalize"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOneArea"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTerrain"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvBuildInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCost"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEntityEvent"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureProduction"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureTech"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureTime"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovement"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMissionType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRoute"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechPrereq"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTime"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFeatureRemove"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isKill"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvBuildingClassInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefaultBuildingIndex"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraPlayerInstances"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxGlobalInstances"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxPlayerInstances"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxTeamInstances"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVictoryThreshold"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMonument"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoLimit"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvBuildingInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIWeight"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdvisorType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAirModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAirUnitCapacity"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAirlift"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAllCityDefenseModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAnarchyModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAreaFreeSpecialist"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAreaHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAreaHealth"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getArtDefineTag"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getArtInfo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAssetValue"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBombardDefenseModifier"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusHappinessChanges"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusHealthChanges"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusProductionModifier"
}
, 
{
"doc"
:
"int (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusYieldModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingClassType"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingHappinessChanges"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivic"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCoastalTradeRoutes"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceChange"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceChangeDoubleTime"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceHappiness"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConquestProbability"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConstructSound"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefenseModifier"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDomainFreeExperience"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDomainProductionModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDomesticGreatGeneralRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEnemyWarWearinessModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionageDefenseModifier"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFlavorValue"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFoodKept"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getForeignTradeRouteModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFoundsCorporation"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeBonus"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeBuildingClass"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeExperience"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreePromotion"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeSpecialist"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeSpecialistCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeStartEra"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeTechs"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalCommerceModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalCorporationCommerce"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalFreeExperience"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalFreeSpecialist"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalGreatPeopleRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalHealth"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalHurryModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalPopulationChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalReligionCommerce"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalSeaPlotYieldChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalSpaceProductionModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalTradeRoutes"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalWarWearinessModifier"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalYieldModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldenAgeModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatGeneralRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeopleRateChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeopleRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeopleUnitClass"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHappiness"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHappinessTraits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHealRateChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHealth"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHolyCity"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHotKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHotKeyDescription"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHurryAngerModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHurryCostModifier"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementFreeSpecialist"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaintenanceModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxLatitude"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxStartEra"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMilitaryProductionModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinAreaSize"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinLatitude"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMissionType"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMovie"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMovieDefineTag"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNoBonus"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNukeExplosionRand"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNukeModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCitiesPrereq"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumFreeBonuses"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTeamsPrereq"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getObsoleteSafeCommerceChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getObsoleteTech"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPowerBonus"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPowerValue"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPowerYieldModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqAndBonus"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqAndTech"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqAndTechs"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqCorporation"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqNumOfBuildingClass"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqOrBonuses"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqReligion"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionCost"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionTraits"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionType"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRiverPlotYieldChange"
}
, 
{
"doc"
:
"float  ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScale"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSeaPlotYieldChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpaceProductionModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialBuildingType"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialistCount"
}
, 
{
"doc"
:
"int (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialistYieldChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligion"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionCommerce"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionHappiness"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeRouteModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeRoutes"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitCombatFreeExperience"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitLevelPrereq"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVictoryPrereq"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVoteSourceType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWarWearinessModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWorkerSpeedModifier"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldChange"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldModifier"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAllowsNukes"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAreaBorderObstacle"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAreaCleanPower"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBuildingClassNeededInCity"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBuildingOnlyHealthy"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCapital"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCenterInCity"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCommerceChangeOriginalOwner"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCommerceFlexible"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDirtyPower"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isForceTeamVoteEligible"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGoldenAge"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGovernmentCenter"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMapCentering"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNeverCapture"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoUnhappiness"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoUnhealthyPopulation"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNukeImmune"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPower"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPrereqReligion"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRiver"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isStateReligion"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTeamShare"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWater"
}
, 
{
"doc"
:
"void (float fScale)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScale"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvCivicInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIWeight"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAnarchyLength"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBaseFreeMilitaryUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBaseFreeUnits"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingHappinessChanges"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingHealthChanges"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCapitalCommerceModifier"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCapitalYieldModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivicOptionType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivicPercentAnger"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCorporationMaintenanceModifier"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDistanceMaintenanceModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDomesticGreatGeneralRateModifier"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExpInBorderModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraHealth"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureHappinessChanges"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeExperience"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeMilitaryUnitsPopulationPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeSpecialist"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeUnitsPopulationPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldPerMilitaryUnit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldPerUnit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatGeneralRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeopleRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHappyPerMilitaryUnit"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementUpgradeRateModifier"
}
, 
{
"doc"
:
"int (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementYieldChanges"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLargestCityHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxConscript"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMilitaryProductionModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNonStateReligionHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCitiesMaintenanceModifier"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialistExtraCommerce"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionBuildingProductionModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionFreeExperience"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionGreatPeopleRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionUnitProductionModifier"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechPrereq"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeRoutes"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeYieldModifier"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUpkeep"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWarWearinessModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWorkerSpeedModifier"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldModifier"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBuildingOnlyHealthy"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHurry"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMilitaryFoodProduction"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoCorporations"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoForeignCorporations"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoForeignTrade"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoNonStateReligionSpread"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoUnhealthyPopulation"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSpecialBuildingNotRequired"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSpecialistValid"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isStateReligion"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"pyGetWeLoveTheKing"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvCivicOptionInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTraitNoUpkeep"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvCivilizationInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getActionSoundScriptId"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdjective"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getArtDefineTag"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getArtStyleType"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"string (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityNames"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationBuildings"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationFreeUnitsClass"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationInitialCivics"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationUnits"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefaultPlayerColor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDerivativeCiv"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFlagTexture"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCityNames"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumLeaders"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getSelectionSoundScriptId"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getShortDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getShortDescriptionKey"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAIPlayable"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCivilizationDisableTechs"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCivilizationFreeBuildingClass"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCivilizationFreeTechs"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isLeaders"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPlayable"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvClimateInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDesertBottomLatitudeChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDesertPercentChange"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDesertTopLatitudeChange"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGrassLatitudeChange"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHillRange"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getIceLatitude"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getJungleLatitude"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPeakPercent"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRandIceLatitude"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSnowLatitudeChange"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTundraLatitudeChange"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvColorInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getColor"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvCommandInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvCommerceInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIWeightPercent"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getChar"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInitialHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInitialPercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFlexiblePercent"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvControlInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getActionInfoIndex"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvCorporationInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getChar"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceProduced"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeUnitClass"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHeadquarterChar"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHeadquarterCommerce"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaintenance"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMissionType"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMovieFile"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMovieSound"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqBonus"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSound"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpreadCost"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpreadFactor"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechPrereq"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldProduced"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvCultureLevelInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityDefenseModifier"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpeedThreshold"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvDiplomacyInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"bool (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAttitudeTypes"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"bool (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationTypes"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"bool (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDiplomacyPowerTypes"
}
, 
{
"doc"
:
"string (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDiplomacyText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"bool (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLeaderHeadTypes"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumDiplomacyText"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumResponses"
}
, 
{
"doc"
:
"CvDiplomacyResponse (int iNum)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getResponse"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvDiplomacyTextInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"bool (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAttitudeTypes"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"bool (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationTypes"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"bool (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDiplomacyPowerTypes"
}
, 
{
"doc"
:
"string (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDiplomacyText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"bool (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLeaderHeadTypes"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumDiplomacyText"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumResponses"
}
, 
{
"doc"
:
"Response (int iNum)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getResponse"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvEffectInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPath"
}
, 
{
"doc"
:
"float  ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScale"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPath"
}
, 
{
"doc"
:
"void (float fScale)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScale"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvEmphasizeInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceChange"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldChange"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAvoidGrowth"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGreatPeople"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvEraInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAnarchyPercent"
}
, 
{
"doc"
:
"string () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAudioUnitDefeatScript"
}
, 
{
"doc"
:
"string () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAudioUnitVictoryScript"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildPercent"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int (int i) -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCitySoundscapeSciptId"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConstructPercent"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCreatePercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEventChancePerTurn"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreePopulation"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeoplePercent"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGrowthPercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementPercent"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumSoundtracks"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getResearchPercent"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSoundtrackSpace"
}
, 
{
"doc"
:
"int (int i) -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSoundtracks"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStartPercent"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStartingDefenseUnits"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStartingExploreUnits"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStartingGold"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStartingUnitMultiplier"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStartingWorkerUnits"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTrainPercent"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFirstSoundtrackFirst"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoAnimals"
}
, 
{
"doc"
:
"bool () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoBarbCities"
}
, 
{
"doc"
:
"bool () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoBarbUnits"
}
, 
{
"doc"
:
"bool () -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoGoodies"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvEspionageMissionInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuyCityCostFactor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuyTechCostFactor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuyUnitCostFactor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityInsertCultureAmountFactor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityInsertCultureCostFactor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityPoisonWaterCounter"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityRevoltCounter"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityUnhappinessCounter"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCost"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCounterespionageMod"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCounterespionageNumTurns"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDestroyBuildingCostFactor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDestroyUnitCostFactor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDifficultyMod"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerAnarchyCounter"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStealTreasuryTypes"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSwitchCivicCostFactor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSwitchReligionCostFactor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechPrereq"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVisibilityLevel"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDestroyImprovement"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isInvestigateCity"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoActiveMissions"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPassive"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSeeDemographics"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSeeResearch"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSelectPlot"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTargetsCity"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTwoPhases"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvEventInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIValue"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdditionalEventChance"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdditionalEventTime"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAttitudeModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonus"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusGift"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusRevealed"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingClass"
}
, 
{
"doc"
:
"int (int /*BuildingClassTypes*/, int /*CommerceTypes*/)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingCommerceChange"
}
, 
{
"doc"
:
"int (int /*BuildingClassTypes*/)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingHappyChange"
}
, 
{
"doc"
:
"int (int /*BuildingClassTypes*/)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingHealthChange"
}
, 
{
"doc"
:
"int (int /*BuildingClassTypes*/, int /*YieldTypes*/)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingYieldChange"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getClearEventChance"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConvertOtherCities"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConvertOwnCities"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCulture"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionagePoints"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeature"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFood"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFoodPercent"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeSpecialistCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeUnitSupport"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHappy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHappyTurns"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHealth"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHurryAnger"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovement"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInflationModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxNumReligions"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxPillage"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinPillage"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBuildingCommerceChanges"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBuildingHappyChanges"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBuildingHealthChanges"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBuildingYieldChanges"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOurAttitudeModifier"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlotExtraYield"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPopulationChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqTech"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRandomGold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRevoltTurns"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRoute"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRouteChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpaceProductionModifier"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTech"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechCostPercent"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechFlavorValue"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechMinTurnsLeft"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechPercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTheirEnemyAttitudeModifier"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitClass"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitClassPromotion"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitCombatPromotion"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitExperience"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitImmobileTurns"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitPromotion"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCityEffect"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDeclareWar"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDisbandUnit"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGlobal"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGoldToPlayer"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGoldenAge"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOtherPlayerCityEffect"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isQuest"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTeam"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvEventTriggerInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAngry"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusRequired"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingRequired"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityFoodWeight"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivic"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCorporationRequired"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEvent"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureRequired"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementRequired"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxOurLandmass"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxPopulation"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinDifficulty"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinMapLandmass"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinOurLandmass"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinPopulation"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinTreasury"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBonusesRequired"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBuildings"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBuildingsGlobal"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBuildingsRequired"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCorporations"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCorporationsRequired"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumEvents"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumFeaturesRequired"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumImprovementsRequired"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumObsoleteTechs"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumPlotsRequired"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumPrereqAndTechs"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumPrereqEvents"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumPrereqOrTechs"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumReligions"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumReligionsRequired"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumRoutesRequired"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTerrainsRequired"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnitsGlobal"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnitsRequired"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getObsoleteTech"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOtherPlayerHasTech"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOtherPlayerShareBorders"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPercentGamesActive"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlotsType"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqAndTechs"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqEvent"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqOrTechs"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProbability"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionRequired"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRouteRequired"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainRequired"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnhealthy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitDamagedWeight"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitDistanceWeight"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitExperienceWeight"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitRequired"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGlobal"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOtherPlayerAI"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOtherPlayerHasOtherReligion"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOtherPlayerHasReligion"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOwnPlot"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPickCity"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPickOtherPlayerCity"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPickPlayer"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPickReligion"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPrereqEventCity"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProbabilityBuildingMultiply"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProbabilityUnitMultiply"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRecurring"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSinglePlayer"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isStateReligion"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTeam"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isUnitsOnPlot"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvFeatureInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdvancedStartRemoveCost"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAppearanceProbability"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefenseModifier"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDisappearanceProbability"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGrowthProbability"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHealthPercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHillsYieldChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMovementCost"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumVarieties"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRiverYieldChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSeeThroughChange"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTurnDamage"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldChange"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAddsFreshWater"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isImpassable"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoAdjacent"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoCity"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoCoast"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoImprovement"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoRiver"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNukeImmune"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRequiresFlatlands"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRequiresRiver"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTerrain"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVisibleAlways"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvForceControlInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefault"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvGameOptionInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefault"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVisible"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvGameSpeedInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAnarchyPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBarbPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildPercent"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConstructPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCreatePercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureProductionPercent"
}
, 
{
"doc"
:
"GameTurnInfo ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGameTurnInfo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldenAgePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeoplePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGrowthPercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHurryConscriptAngerPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHurryPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInflationOffset"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInflationPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTurnIncrements"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getResearchPercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTrainPercent"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitDiscoverPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitGreatWorkPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitHurryPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitTradePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVictoryDelayPercent"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvGameText"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumLanguages"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"void (wstring)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setText"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvGoodyInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBarbarianUnitClass"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBarbarianUnitProb"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDamagePrereq"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExperience"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldRand1"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldRand2"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHealing"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMapOffset"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMapProb"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMapRange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinBarbarians"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSound"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitClassType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBad"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTech"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvGraphicOptionInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefault"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvHandicapInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIAdvancedStartPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIAnimalCombatModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIBarbarianCombatModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAICivicUpkeepPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIConstructPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAICreatePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIDeclareWarProb"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIGrowthPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIInflationPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIPerEraModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIStartingDefenseUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIStartingExploreUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIStartingUnitMultiplier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIStartingWorkerUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAITrainPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIUnitCostPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIUnitSupplyPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIUnitUpgradePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIWarWearinessPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIWorkRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIWorldConstructPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIWorldCreatePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIWorldTrainPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAnimalAttackProb"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAnimalCombatModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAttitudeChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBarbarianCityCreationProb"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBarbarianCityCreationTurnsElapsed"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBarbarianCombatModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBarbarianCreationTurnsElapsed"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBarbarianInitialDefenders"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivicUpkeepPercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getColonyMaintenancePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCorporationMaintenancePercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDistanceMaintenancePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeWinsVsBarbs"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoodies"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHappyBonus"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHealthBonus"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInflationPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxColonyMaintenance"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxNumCitiesMaintenance"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNoTechTradeModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCitiesMaintenancePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumGoodies"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getResearchPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStartingDefenseUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStartingExploreUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStartingGold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStartingLocationPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStartingWorkerUnits"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechTradeKnownModifier"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitCostPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnownedTilesPerBarbarianCity"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnownedTilesPerBarbarianUnit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnownedTilesPerGameAnimal"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnownedWaterTilesPerBarbarianUnit"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAIFreeTechs"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFreeTechs"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvHurryInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldPerProduction"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionPerPopulation"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAnger"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvImprovementBonusInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDiscoverRand"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldChange"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBonusMakesValid"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBonusTrade"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvImprovementInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAirBombDefense"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getArtDefineTag"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefenseModifier"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureGrowthProbability"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureMakesValid"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoodyUniqueRange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHappiness"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHillsYieldChange"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementBonusDiscoverRand"
}
, 
{
"doc"
:
"int (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementBonusYield"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementPillage"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementUpgrade"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getIrrigatedYieldChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPillageGold"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqNatureYield"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRiverSideYieldChange"
}
, 
{
"doc"
:
"int (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRouteYieldChanges"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int (int i, int j)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechYieldChanges"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainMakesValid"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTilesPerGoody"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUpgradeTime"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldChange"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isActsAsCity"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCarriesIrrigation"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFreshWaterMakesValid"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGoody"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHillsMakesValid"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isImprovementBonusMakesValid"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isImprovementBonusTrade"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoFreshWater"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOutsideBorders"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPermanent"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRequiresFeature"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRequiresFlatlands"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRequiresIrrigation"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRequiresRiverSide"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRiverSideMakesValid"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWater"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvInfoBase"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvInterfaceModeInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCursorIndex"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGotoPlot"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHighlightPlot"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMissionType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSelectAll"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSelectType"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVisible"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAltDown"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAltDownAlt"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCtrlDown"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCtrlDownAlt"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isShiftDown"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isShiftDownAlt"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvLeaderHeadInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdoptCivicRefuseAttitudeThreshold"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getArtDefineTag"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAtPeaceAttitudeChangeLimit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAtPeaceAttitudeDivisor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAtWarAttitudeChangeLimit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAtWarAttitudeDivisor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAttackOddsChangeRand"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBaseAttackOddsChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBaseAttitude"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBasePeaceWeight"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBetterRankDifferenceAttitudeChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusTradeAttitudeChangeLimit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusTradeAttitudeDivisor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildUnitProb"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCloseBordersAttitudeChange"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getContactDelay"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getContactRand"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConvertReligionRefuseAttitudeThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDeclareWarRefuseAttitudeThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDeclareWarThemRefuseAttitudeThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDeclareWarTradeRand"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefensivePactAttitudeChangeLimit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefensivePactAttitudeDivisor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefensivePactRefuseAttitudeThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDemandRebukedSneakProb"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDemandRebukedWarProb"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDemandTributeAttitudeThreshold"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDifferentReligionAttitudeChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDifferentReligionAttitudeChangeLimit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDifferentReligionAttitudeDivisor"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDiploPeaceIntroMusicScriptIds"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDiploPeaceMusicScriptIds"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDiploWarIntroMusicScriptIds"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDiploWarMusicScriptIds"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDogpileWarRand"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionageWeight"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFavoriteCivic"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFavoriteCivicAttitudeChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFavoriteCivicAttitudeChangeLimit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFavoriteCivicAttitudeDivisor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFavoriteReligion"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFlavorValue"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreedomAppreciation"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHappinessBonusRefuseAttitudeThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHealthBonusRefuseAttitudeThreshold"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementWeightModifier"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLeaderHead"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLimitedWarPowerRatio"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLimitedWarRand"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLostWarAttitudeChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMakePeaceRand"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMapRefuseAttitudeThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxGoldPerTurnTradePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxGoldTradePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxWarDistantPowerRatio"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxWarMinAdjacentLandPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxWarNearbyPowerRatio"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxWarRand"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMemoryAttitudePercent"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMemoryDecayRand"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNoGiveHelpAttitudeThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNoTechTradeThreshold"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNoWarAttitudeProb"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOpenBordersAttitudeChangeLimit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOpenBordersAttitudeDivisor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOpenBordersRefuseAttitudeThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPeaceWeightRand"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPermanentAllianceRefuseAttitudeThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRazeCityProb"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRefuseToTalkWarThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSameReligionAttitudeChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSameReligionAttitudeChangeLimit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSameReligionAttitudeDivisor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getShareWarAttitudeChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getShareWarAttitudeChangeLimit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getShareWarAttitudeDivisor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStopTradingRefuseAttitudeThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStopTradingThemRefuseAttitudeThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategicBonusRefuseAttitudeThreshold"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechRefuseAttitudeThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechTradeKnownPercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitAIWeightModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVassalPowerModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVassalRefuseAttitudeThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWarmongerRespect"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWonderConstructRand"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWorseRankDifferenceAttitudeChange"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasTrait"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvMPOptionInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefault"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvMainMenuInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLoading"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLoadingSlideshow"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScene"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSceneNoShader"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSoundtrack"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvMissionInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTime"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVisible"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWaypoint"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBuild"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSound"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTarget"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvPlayerColorInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getColorTypePrimary"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getColorTypeSecondary"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextColorType"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvPlayerOptionInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefault"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvProcessInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionToCommerceModifier"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechPrereq"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvProjectInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAnyoneProjectPrereq"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusProductionModifier"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCreateSound"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEveryoneSpecialBuilding"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEveryoneSpecialUnit"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxGlobalInstances"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxTeamInstances"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMovieArtDef"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNukeInterception"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionCost"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProjectsNeeded"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSuccessRate"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechPrereq"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechShare"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVictoryDelayPercent"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVictoryMinThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVictoryPrereq"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVictoryThreshold"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAllowsNukes"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSpaceship"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvPromotionInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getActionInfoIndex"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdjacentTileHealChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAirRangeChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBombardRateChange"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCargoChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getChanceFirstStrikesChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityAttackPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityDefensePercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCollateralDamageChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCollateralDamageProtection"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCombatPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommandType"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDomainModifierPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEnemyHealChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEvasionChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExperiencePercent"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureAttackPercent"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureDefensePercent"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureDoubleMove"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFirstStrikesChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFriendlyHealChange"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHillsAttackPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHillsDefensePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInterceptChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getKamikazePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMoveDiscountChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMovesChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNeutralHealChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPillageChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqOrPromotion1"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqOrPromotion2"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqPromotion"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRevoltProtection"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSameTileHealChange"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSound"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionPrereq"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechPrereq"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainAttackPercent"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainDefensePercent"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainDoubleMove"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitCombat"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitCombatModifierPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUpgradeDiscount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVisibilityChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWithdrawalChange"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAlwaysHeal"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAmphib"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBlitz"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isEnemyRoute"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHillsDoubleMove"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isImmuneToFirstStrikes"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isLeader"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRiver"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvQuestInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumQuestLinks"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumQuestMessages"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumQuestSounds"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getQuestBodyText"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getQuestLinkName"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getQuestLinkType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getQuestMessages"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getQuestObjective"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getQuestSounds"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"void (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNumQuestMessages"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setQuestBodyText"
}
, 
{
"doc"
:
"void (int iIndex, string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setQuestMessages"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setQuestObjective"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvReligionInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdjectiveKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButtonDisabled"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getChar"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeUnitClass"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGenericTechButton"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobalReligionCommerce"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHolyCityChar"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHolyCityCommerce"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMissionType"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMovieFile"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMovieSound"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumFreeUnits"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSound"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpreadFactor"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionCommerce"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechPrereq"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvRouteInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFlatMovementCost"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMovementCost"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqBonus"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqOrBonus"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechMovementChange"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getValue"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldChange"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvRouteModelInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConnectString"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getModelConnectString"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getModelFile"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getModelFileKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRotateString"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setModelFile"
}
, 
{
"doc"
:
"void (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setModelFileKey"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvScalableInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"float  ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScale"
}
, 
{
"doc"
:
"void (float fScale)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScale"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvSeaLevelInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSeaLevelChange"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvSpecialBuildingInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getObsoleteTech"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionTraits"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechPrereq"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isValid"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvSpecialUnitInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionTraits"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCarrierUnitAIType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCityLoad"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isValid"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvSpecialistInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceChange"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExperience"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFlavorValue"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeopleRateChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeopleUnitClass"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMissionType"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTexture"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldChange"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVisible"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvTechInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAITradeModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIWeight"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdvisorType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAssetValue"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDomainExtraMoves"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEra"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureProductionModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFirstFreeTechs"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFirstFreeUnitClass"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFlavorValue"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGridX"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGridY"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHealth"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPowerValue"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqAndTechs"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqOrTechs"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getQuote"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getResearchCost"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSound"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSoundMP"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeRoutes"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWorkerSpeedModifier"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBridgeBuilding"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCommerceFlexible"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDefensivePactTrading"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDisable"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isExtraWaterSeeFrom"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGoldTrading"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGoodyTech"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isIgnoreIrrigation"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isIrrigation"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMapCentering"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMapTrading"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMapVisible"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOpenBordersTrading"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPermanentAllianceTrading"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRepeat"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRiverTrade"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTechTrading"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTerrainTrade"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTrade"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVassalStateTrading"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWaterWork"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvTerrainInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildModifier"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefenseModifier"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHillsYieldChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMovementCost"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRiverYieldChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSeeFromLevel"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSeeThroughLevel"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYield"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFound"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFoundCoast"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFoundFreshWater"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isImpassable"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWater"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvTraitInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceChange"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceModifier"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDomesticGreatGeneralRateModifier"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraYieldThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatGeneralRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeopleRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHealth"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLevelExperienceModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxAnarchy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxGlobalBuildingProductionModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxPlayerBuildingProductionModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxTeamBuildingProductionModifier"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getShortDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeYieldModifier"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUpkeepModifier"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFreePromotion"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvTurnTimerInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBaseTime"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityBonus"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFirstTurnMultiplier"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitBonus"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvTutorialInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNextTutorialInfoType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTutorialMessages"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"CvTutorialMessage* (int iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTutorialMessage"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvTutorialMessage"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImage"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTutorialScripts"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSound"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTutorialScriptByIndex"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvUnitClassInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefaultUnitIndex"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInstanceCostModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxGlobalInstances"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxPlayerInstances"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxTeamInstances"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvUnitInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIWeight"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdvisorType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAirCombat"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAirCombatLimit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAirRange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAirUnitCap"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAnimalCombatModifier"
}
, 
{
"doc"
:
"CvArtInfoUnit* (int i, bool bLate)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getArtInfo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAssetValue"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBaseDiscover"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBaseHurry"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBaseTrade"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBombRate"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBombardRate"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusProductionModifier"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildings"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuilds"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCargoSpace"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getChanceFirstStrikes"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityAttackModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityDefenseModifier"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCollateralDamage"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCollateralDamageLimit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCollateralDamageMaxUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCombat"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCombatLimit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommandType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConscriptionValue"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCorporationSpreads"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCultureGarrisonValue"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefaultUnitAIType"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefenderUnitClass"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefenderUnitCombat"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDiscoverMultiplier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDomainCargo"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDomainModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDomainType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDropRange"
}
, 
{
"doc"
:
"string (int i, UnitArtStyleTypes eStyle)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEarlyArtDefineTag"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionagePoints"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEvasionProbability"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraCost"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureAttackModifier"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureDefenseModifier"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureImpassable"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureNative"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeaturePassableTech"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFirstStrikes"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFlankingStrikeUnitClass"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFlavorValue"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getForceBuildings"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreePromotions"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeoples"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatWorkCulture"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGroupDefinitions"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGroupSize"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHillsAttackModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHillsDefenseModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHolyCity"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHurryCostModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHurryMultiplier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInterceptionProbability"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInvisibleType"
}
, 
{
"doc"
:
"string (int i, UnitArtStyleTypes eStyle)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLateArtDefineTag"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLeaderExperience"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLeaderPromotion"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMeleeWaveSize"
}
, 
{
"doc"
:
"string (int i, UnitArtStyleTypes eStyle)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMiddleArtDefineTag"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinAreaSize"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMoves"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNotUnitAIType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNukeRange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumSeeInvisibleTypes"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnitNames"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPowerValue"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqAndBonus"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqAndTech"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqAndTechs"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqBuilding"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqCorporation"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqOrBonuses"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPrereqReligion"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionCost"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionTraits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRangedWaveSize"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionSpreads"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionType"
}
, 
{
"doc"
:
"float  ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScale"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSeeInvisibleType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialCargo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialUnitType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligion"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTargetUnitClass"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTargetUnitCombat"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainAttackModifier"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainDefenseModifier"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainImpassable"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainNative"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainPassableTech"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeMultiplier"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitAIType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitCaptureClassType"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitClassAttackModifier"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitClassDefenseModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitClassType"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitCombatModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitCombatType"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitGroupRequired"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitMaxSpeed"
}
, 
{
"doc"
:
"string (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitNames"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitPadTime"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUpgradeUnitClass"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWithdrawalProbability"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWorkRate"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getXPValueAttack"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getXPValueDefense"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAlwaysHostile"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAnimal"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCanMoveAllTerrain"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCanMoveImpassable"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCounterSpy"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDestroy"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFirstStrikeImmune"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFlatMovementCost"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFoodProduction"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFound"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGoldenAge"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHiddenNationality"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isIgnoreBuildingDefense"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isIgnoreTerrainCost"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isInvestigate"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isInvisible"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isLineOfSight"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMechUnit"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMilitaryHappiness"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMilitaryProduction"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMilitarySupport"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoBadGoodies"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoCapture"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoDefensiveBonus"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNukeImmune"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPillage"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPrereqBonuses"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPrereqReligion"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRenderBelowWater"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRivalTerritory"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSabotage"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSpy"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isStealPlans"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSuicide"
}
, 
{
"doc"
:
"void (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCombat"
}
, 
{
"doc"
:
"void (bool bEnable)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setInvisible"
}
, 
{
"doc"
:
"void (float fScale)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScale"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvUpkeepInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityPercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPopulationPercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvVictoryInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityCulture"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLandPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinLandPercent"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMovie"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCultureCities"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPopulationPercentLead"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionPercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTotalCultureRatio"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVictoryDelayTurns"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isConquest"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDiploVote"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isEndScore"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPermanent"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTargetScore"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvVoteInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinVoters"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPopulationThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionVotePercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeRoutes"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAssignCity"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCityVoting"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCivVoting"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDefensivePact"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isForceCivic"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isForceNoTrade"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isForcePeace"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isForceWar"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFreeTrade"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoNukes"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOpenBorders"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSecretaryGeneral"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVictory"
}
, 
{
"doc"
:
"bool (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVoteSourceType"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvVoteSourceInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivic"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeSpecialist"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionCommerce"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionYield"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSecretaryGeneralText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVoteInterval"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvWorldInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingClassPrereqModifier"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getColonyMaintenancePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCorporationMaintenancePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefaultPlayers"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDistanceMaintenancePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureGrainChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGridHeight"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGridWidth"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxConscriptModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCitiesAnarchyPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCitiesMaintenancePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumFreeBuildingBonuses"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getResearchPercent"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTargetNumCities"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainGrainChange"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeProfitPercent"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitNameModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWarWearinessModifier"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CvYieldInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIWeightPercent"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getChar"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityChange"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilopedia"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getColorType"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDescriptionForm"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldenAgeYield"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldenAgeYieldThreshold"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelp"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHillsChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLakeChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinCity"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPeakChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPopulationChangeDivisor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPopulationChangeOffset"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrategy"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTextKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeModifier"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getType"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGraphicalOnly"
}
, 
{
"doc"
:
"bool (string)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMatchForLink"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyArea"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int () - Returns the total tile yield from the area"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateTotalBestNatureYield"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"countCoastalLand"
}
, 
{
"doc"
:
"int (int /*CorporationTypes*/ eCorporation, int /*PlayerTypes*/ eOwner)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countHasCorporation"
}
, 
{
"doc"
:
"int (int /*ReligionTypes*/ eReligion, int /*PlayerTypes*/ eOwner)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countHasReligion"
}
, 
{
"doc"
:
"int () - Returns the number of unique bonus types in this area"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countNumUniqueBonusTypes"
}
, 
{
"doc"
:
"int (int (PlayerTypes) iIndex) - Returns the number of animal units in this area for this player"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAnimalsPerPlayer"
}
, 
{
"doc"
:
"int (AreaAITypes) (int (TeamTypes) eIndex) - Returns the AreaAIType for this team in this area"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAreaAIType"
}
, 
{
"doc"
:
"int (int (PlayerTypes) iIndex) - Returns the best found value for a plot in this area"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBestFoundValue"
}
, 
{
"doc"
:
"int (int (PlayerTypes) iIndex) - Returns ?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingBadHealth"
}
, 
{
"doc"
:
"int (int (PlayerTypes) iIndex) - Returns ?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingGoodHealth"
}
, 
{
"doc"
:
"int (int (PlayerTypes) iIndex) - Returns ?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingHappiness"
}
, 
{
"doc"
:
"int (int (PlayerTypes) iIndex) - Returns the number of cities in this area for this player"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCitiesPerPlayer"
}
, 
{
"doc"
:
"int (int (PlayerTypes) iIndex) - Returns ?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeSpecialist"
}
, 
{
"doc"
:
"int () - Return's the Areas ID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getID"
}
, 
{
"doc"
:
"int (int (PlayerTypes) iPlayer, int (UnitAITypes) iIndex2) - Returns the number of units for this AI which have this AI type"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumAIUnits"
}
, 
{
"doc"
:
"int(BonusID) - total # of BonusID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBonuses"
}
, 
{
"doc"
:
"int () - Returns the total number of cities for all players in this area"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCities"
}
, 
{
"doc"
:
"int(ImprovementID) - total # of ImprovementID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumImprovements"
}
, 
{
"doc"
:
"int () - Returns the number of owned tiles in this area"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumOwnedTiles"
}
, 
{
"doc"
:
"int (int (TeamTypes) iIndex) - Returns the number of revealed tiles for this team"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumRevealedTiles"
}
, 
{
"doc"
:
"int () - Returns the number of River Edges in this area"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumRiverEdges"
}
, 
{
"doc"
:
"int () - total number of players that are starting on this area"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumStartingPlots"
}
, 
{
"doc"
:
"int () - Returns the number of tiles in this area"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTiles"
}
, 
{
"doc"
:
"int () - total number of bonuses, of all types"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTotalBonuses"
}
, 
{
"doc"
:
"int (int (PlayerTypes) iPlayer, int (UnitAITypes) iIndex2) - Returns ?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTrainAIUnits"
}
, 
{
"doc"
:
"int () - Returns the total number of units for all players in this area"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnits"
}
, 
{
"doc"
:
"int () - Returns the number of unowned tiles in this area"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnownedTiles"
}
, 
{
"doc"
:
"int (int (TeamTypes) iIndex) - Returns the number of unrevealed tiles for this team"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnrevealedTiles"
}
, 
{
"doc"
:
"int (int (PlayerTypes) iIndex) - Returns the total population of this area for this player"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPopulationPerPlayer"
}
, 
{
"doc"
:
"int (int (PlayerTypes) iIndex) - Returns power of this area for this player"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPower"
}
, 
{
"doc"
:
"CyCity* (int (PlayerTypes) eIndex) - Returns ?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTargetCity"
}
, 
{
"doc"
:
"int () - Returns the total population for all players in this area"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTotalPopulation"
}
, 
{
"doc"
:
"int (int (PlayerTypes) iIndex) - Returns the number of units in this area for this player"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitsPerPlayer"
}
, 
{
"doc"
:
"int (int (PlayerTypes) iPlayer, int (YieldTypes) iIndex2 - Returns ?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldRateModifier"
}
, 
{
"doc"
:
"bool (int (TeamTypes) iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBorderObstacle"
}
, 
{
"doc"
:
"bool (int (TeamTypes) iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCleanPower"
}
, 
{
"doc"
:
"bool () - Returns whether the area is a fresh water lake"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isLake"
}
, 
{
"doc"
:
"bool () - Returns whether the pointer points to a real Area"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"bool () - Returns whether or not this area is water"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWater"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyArtFileMgr"
, 
"members"
:
[
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"Reset"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"buildArtFileInfoMaps"
}
, 
{
"doc"
:
"CvArtInfoBonus ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusArtInfo"
}
, 
{
"doc"
:
"CvArtInfoBuilding ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingArtInfo"
}
, 
{
"doc"
:
"CvArtInfoCivilization ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationArtInfo"
}
, 
{
"doc"
:
"CvArtInfoFeature ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureArtInfo"
}
, 
{
"doc"
:
"CvArtInfoImprovement ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementArtInfo"
}
, 
{
"doc"
:
"CvArtInfoInterface ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInterfaceArtInfo"
}
, 
{
"doc"
:
"CvArtInfoLeaderhead ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLeaderheadArtInfo"
}
, 
{
"doc"
:
"CvArtInfoMisc ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMiscArtInfo"
}
, 
{
"doc"
:
"CvArtInfoMovie ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMovieArtInfo"
}
, 
{
"doc"
:
"CvArtInfoTerrain ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainArtInfo"
}
, 
{
"doc"
:
"CvArtInfoUnit ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitArtInfo"
}
, 
{
"doc"
:
"bool () - Checks to see if pointer points to a real object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyAudioGame"
, 
"members"
:
[
{
"doc"
:
"void (int soundhandle) - Stop playing and destroy sound using soundhandle."
, 
"type"
:
"instancemethod"
, 
"name"
:
"Destroy2DSound"
}
, 
{
"doc"
:
"void (int soundhandle) - Stop playing and destroy sound using soundhandle."
, 
"type"
:
"instancemethod"
, 
"name"
:
"Destroy3DSound"
}
, 
{
"doc"
:
"bool (int soundhandle) - Is the sound using this soundhandle and scriptname playing?."
, 
"type"
:
"instancemethod"
, 
"name"
:
"Is2DSoundPlaying"
}
, 
{
"doc"
:
"bool (int soundhandle) - Is the sound using this soundhandle and scriptname playing?."
, 
"type"
:
"instancemethod"
, 
"name"
:
"Is3DSoundPlaying"
}
, 
{
"doc"
:
"int (TCHAR* scriptname) - Play 2d sound using scriptname and return a handle to the sound."
, 
"type"
:
"instancemethod"
, 
"name"
:
"Play2DSound"
}
, 
{
"doc"
:
"int (int scriptId) - Play 2d sound using scriptId and return a handle to the sound."
, 
"type"
:
"instancemethod"
, 
"name"
:
"Play2DSoundWithId"
}
, 
{
"doc"
:
"int (TCHAR* scriptname, float x, float y, float z) - Play 3d sound using scriptname at position (x,y,z) and return a handle to the sound."
, 
"type"
:
"instancemethod"
, 
"name"
:
"Play3DSound"
}
, 
{
"doc"
:
"int (int scriptId, float x, float y, float z) - Play 3d sound using scriptId at position (x,y,z) and return a handle to the sound."
, 
"type"
:
"instancemethod"
, 
"name"
:
"Play3DSoundWithId"
}
, 
{
"doc"
:
"void (int soundhandle, float volume) - Set volume to value between 0.0f and 1.0f to sound using soundhandle."
, 
"type"
:
"instancemethod"
, 
"name"
:
"Set2DSoundVolume"
}
, 
{
"doc"
:
"void (int soundhandle, float x, float y, float z) - Set position of sound using soundhandle to (x,y,z)."
, 
"type"
:
"instancemethod"
, 
"name"
:
"Set3DSoundPosition"
}
, 
{
"doc"
:
"void (int soundhandle, float volume) - Set volume to value between 0.0f and 1.0f to sound using soundhandle."
, 
"type"
:
"instancemethod"
, 
"name"
:
"Set3DSoundVolume"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyCamera"
, 
"members"
:
[
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetBasePitch"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetBaseTurn"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetCameraMovementSpeed"
}
, 
{
"doc"
:
"NiPoint3 ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetCurrentPosition"
}
, 
{
"doc"
:
"NiPoint2 CyCamera().GetDefaultViewPortCenter()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetDefaultViewPortCenter"
}
, 
{
"doc"
:
"NiPoint3 ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetDestinationPosition"
}
, 
{
"doc"
:
"void (NiPoint3 pt3LookAt)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetLookAt"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetLookAtSpeed"
}
, 
{
"doc"
:
"NiPoint3 ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetTargetDestination"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetZoom"
}
, 
{
"doc"
:
"void (CyPlot().getPoint()) - centers on plot"
, 
"type"
:
"instancemethod"
, 
"name"
:
"JustLookAt"
}
, 
{
"doc"
:
"void (CyPlot* pPlot) - centers on plot"
, 
"type"
:
"instancemethod"
, 
"name"
:
"JustLookAtPlot"
}
, 
{
"doc"
:
"void (NiPoint3 pt3LookAt, CameraLookAtTypes type, NiPoint3 attackDirection) - centers the camera on the point"
, 
"type"
:
"instancemethod"
, 
"name"
:
"LookAt"
}
, 
{
"doc"
:
"void (CyUnit) - follow a unit"
, 
"type"
:
"instancemethod"
, 
"name"
:
"LookAtUnit"
}
, 
{
"doc"
:
"void (float increment)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"MoveBaseTurnLeft"
}
, 
{
"doc"
:
"void (float increment)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"MoveBaseTurnRight"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"ReleaseLockedCamera"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"ResetZoom"
}
, 
{
"doc"
:
"void (float fBasePitch)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"SetBasePitch"
}
, 
{
"doc"
:
"void (float baseTurn)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"SetBaseTurn"
}
, 
{
"doc"
:
"void (int (CameraMovementSpeeds) eSpeed)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"SetCameraMovementSpeed"
}
, 
{
"doc"
:
"void (NiPoint3 point)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"SetCurrentPosition"
}
, 
{
"doc"
:
"void (NiPoint3 point)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"SetDestinationPosition"
}
, 
{
"doc"
:
"void (float fSpeed)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"SetLookAtSpeed"
}
, 
{
"doc"
:
"void (NiPoint3 point)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"SetTargetDestination"
}
, 
{
"doc"
:
"void (NiPoint2 pt2Center)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"SetViewPortCenter"
}
, 
{
"doc"
:
"void (float zoom=0.5)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"SetZoom"
}
, 
{
"doc"
:
"void (NiPoint3 &position, NiPoint3 &target) - moves the camera to position looking at target"
, 
"type"
:
"instancemethod"
, 
"name"
:
"SimpleLookAt"
}
, 
{
"doc"
:
"void (NiPoint3 translation=(fX, fY, fZ)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"Translate"
}
, 
{
"doc"
:
"void (float increment=0.5)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"ZoomIn"
}
, 
{
"doc"
:
"void (float increment)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"ZoomOut"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMoving"
}
, 
{
"doc"
:
"void (bool bNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setOrthoCamera"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyCity"
, 
"members"
:
[
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_avoidGrowth"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_cityValue"
}
, 
{
"doc"
:
"int (CyArea* pArea)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_countBestBuilds"
}
, 
{
"doc"
:
"bool (int iEmphasizeType)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_isEmphasize"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void (CyUnit* pUnit, bool bConscript)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addProductionExperience"
}
, 
{
"doc"
:
"int UnitTypes (int eUnit, int iUpgradeCount)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"allUpgradesAvailable"
}
, 
{
"doc"
:
"int (int /*SpecialistTypes*/ eIndex, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"alterSpecialistCount"
}
, 
{
"doc"
:
"void (iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"alterWorkingPlot"
}
, 
{
"doc"
:
"int (iExtra) - # of unhappy citizens"
, 
"type"
:
"instancemethod"
, 
"name"
:
"angryPopulation"
}
, 
{
"doc"
:
"CyArea() () - returns CyArea instance for location of city"
, 
"type"
:
"instancemethod"
, 
"name"
:
"area"
}
, 
{
"doc"
:
"bool (iX, iY) - is the city at (iX, iY) ?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"at"
}
, 
{
"doc"
:
"bool (CyPlot) - is pPlot the cities plot?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"atPlot"
}
, 
{
"doc"
:
"int (bool bNoAngry) - total unhealthiness"
, 
"type"
:
"instancemethod"
, 
"name"
:
"badHealth"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateColonyMaintenance"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateColonyMaintenanceTimes100"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateCorporationMaintenance"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateCorporationMaintenanceTimes100"
}
, 
{
"doc"
:
"int (int eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateCulturePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateDistanceMaintenance"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateDistanceMaintenanceTimes100"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateNumCitiesMaintenance"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateNumCitiesMaintenanceTimes100"
}
, 
{
"doc"
:
"int /*TeamTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateTeamCulturePercent"
}
, 
{
"doc"
:
"int (CyCity) - returns the trade profit created by CyCity"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateTradeProfit"
}
, 
{
"doc"
:
"int (YieldType, int iTradeProfit) - calculates Trade Yield"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateTradeYield"
}
, 
{
"doc"
:
"bool () - can the city conscript units?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canConscript"
}
, 
{
"doc"
:
"bool (int eBuilding, bool bContinue, bool bTestVisible, bool bIgnoreCost)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canConstruct"
}
, 
{
"doc"
:
"bool (OrderData order)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canContinueProduction"
}
, 
{
"doc"
:
"bool (int eProject, bool bContinue, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canCreate"
}
, 
{
"doc"
:
"bool (HurryTypes eHurry, bool bTestVisible = 0) - can player eHurry in this city?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canHurry"
}
, 
{
"doc"
:
"bool () - can a Great Person join the city"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canJoin"
}
, 
{
"doc"
:
"bool (int eProcess, bool bContinue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canMaintain"
}
, 
{
"doc"
:
"bool (int eUnit, bool bContinue, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canTrain"
}
, 
{
"doc"
:
"bool (CyPlot*) - can the city work the plot?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canWork"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"changeBaseGreatPeopleRate"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/, int iChange) - changes the base rate for YieldType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeBaseYieldRate"
}
, 
{
"doc"
:
"void (BuildingID, iChange) - adjusts progress towards BuildingID by iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeBuildingProduction"
}
, 
{
"doc"
:
"int (int eIndex, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeBuildingProductionTime"
}
, 
{
"doc"
:
"void (int iChange) -changes the amount of time left on the conscript anger timer"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeConscriptAngerTimer"
}
, 
{
"doc"
:
"void (int PlayerTypes eIndex, int iChange, bool bPlots)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeCulture"
}
, 
{
"doc"
:
"void (int PlayerTypes eIndex, int iChange, bool bPlots)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeCultureTimes100"
}
, 
{
"doc"
:
"void (iChange) - adjusts the Culture Update Timer by iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeCultureUpdateTimer"
}
, 
{
"doc"
:
"void (iChange) - adjust damage value by iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeDefenseDamage"
}
, 
{
"doc"
:
"void (int iChange) -changes the amount of time left on the anger timer"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeDefyResolutionAngerTimer"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeEspionageHappinessCounter"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeEspionageHealthCounter"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeExtraHappiness"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeExtraHealth"
}
, 
{
"doc"
:
"void (iChange) - Change the number of trade routes this city has"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeExtraTradeRoutes"
}
, 
{
"doc"
:
"void (iChange) - adjust stored food by iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeFood"
}
, 
{
"doc"
:
"int (int /*SpecialistTypes*/ eIndex, int iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeForceSpecialistCount"
}
, 
{
"doc"
:
"void (int eIndex, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeFreeBonus"
}
, 
{
"doc"
:
"int (int /*SpecialistTypes*/ eIndex, iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeFreeSpecialistCount"
}
, 
{
"doc"
:
"void (int iChange) - adjusts great person progress by iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeGreatPeopleProgress"
}
, 
{
"doc"
:
"int (int /*UnitTypes*/ iIndex, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeGreatPeopleUnitProgress"
}
, 
{
"doc"
:
"void (iChange) - adjust Happiness timer by iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeHappinessTimer"
}
, 
{
"doc"
:
"void (int iChange) - changes the heal rate of this city to iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeHealRate"
}
, 
{
"doc"
:
"void (iChange) - adjust Hurry Angry timer by iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeHurryAngerTimer"
}
, 
{
"doc"
:
"void (ImprovementID, iChange) - adjust ImprovementID free specialists by iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeImprovementFreeSpecialists"
}
, 
{
"doc"
:
"void (int eIndex, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeNoBonusCount"
}
, 
{
"doc"
:
"void (iChange) - adjusts the Occupation Timer by iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeOccupationTimer"
}
, 
{
"doc"
:
"void (int iChange) - adjusts the city population by iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changePopulation"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeProduction"
}
, 
{
"doc"
:
"void (ReligionID, iChange) - adjust ReligionID influence by iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeReligionInfluence"
}
, 
{
"doc"
:
"void (int /*CommerceTypes*/, iChange) - adjusts Specialist contribution to CommerceType by iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeSpecialistCommerce"
}
, 
{
"doc"
:
"void (int /*ReligionTypes*/ ReligionID, iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeStateReligionHappiness"
}
, 
{
"doc"
:
"void (UnitID, iChange) - adjusts production towards UnitID by iChange"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeUnitProduction"
}
, 
{
"doc"
:
"void (int /*UnitTypes*/ eTrainUnit, int /*BuildingTypes*/ eConstructBuilding, int /*ProjectTypes*/ eCreateProject, bool bFinish, bool bFront) - Chooses production for a city"
, 
"type"
:
"instancemethod"
, 
"name"
:
"chooseProduction"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"clearOrderQueue"
}
, 
{
"doc"
:
"void (int iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"clearWorkingOverride"
}
, 
{
"doc"
:
"void () - conscripts a unit"
, 
"type"
:
"instancemethod"
, 
"name"
:
"conscript"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"conscriptMinCityPopulation"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countNumImprovedPlots"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countNumRiverPlots"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countNumWaterPlots"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countTotalCultureTimes100"
}
, 
{
"doc"
:
"void (int /*UnitTypes*/ eGreatPersonUnit, bool bIncrementThreshold) - Creates a great person in this city and whether it should increment the threshold to the next level"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createGreatPeople"
}
, 
{
"doc"
:
"int (iDX, iDY) - culture distance"
, 
"type"
:
"instancemethod"
, 
"name"
:
"cultureDistance"
}
, 
{
"doc"
:
"int (ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"cultureGarrison"
}
, 
{
"doc"
:
"int (ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"cultureStrength"
}
, 
{
"doc"
:
"void (int eTaskTypes, int iData1, int iData2, bool bOption) - Enacts the TaskType passed"
, 
"type"
:
"instancemethod"
, 
"name"
:
"doTask"
}
, 
{
"doc"
:
"int () - # of specialist that are allowed for free"
, 
"type"
:
"instancemethod"
, 
"name"
:
"extraFreeSpecialists"
}
, 
{
"doc"
:
"int () - # of extra/available citizens"
, 
"type"
:
"instancemethod"
, 
"name"
:
"extraPopulation"
}
, 
{
"doc"
:
"int () - # of extra/available specialists"
, 
"type"
:
"instancemethod"
, 
"name"
:
"extraSpecialists"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/ eYield)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"findBaseYieldRateRank"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/ eCommerce)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"findCommerceRateRank"
}
, 
{
"doc"
:
"PlayerTypes ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"findHighestCulture"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"findPopulationRank"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/ eYield)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"findYieldRateRank"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"flatConscriptAngerLength"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"flatDefyResolutionAngerLength"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"flatHurryAngerLength"
}
, 
{
"doc"
:
"int (bool bNoAngry, int iExtra)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"foodConsumption"
}
, 
{
"doc"
:
"int (bool bBottom) - result of getYieldRate(Food) - foodConsumption()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"foodDifference"
}
, 
{
"doc"
:
"int (int /*SpecialistTypes*/ eIndex"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAddedFreeSpecialistCount"
}
, 
{
"doc"
:
"int () - returns the air defense modifier"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAirModifier"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/ eTeam) - returns the number of air units allowed here"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAirUnitCapacity"
}
, 
{
"doc"
:
"int /*ArtStyleTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getArtStyleType"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBaseCommerceRate"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBaseCommerceRateTimes100"
}
, 
{
"doc"
:
"int () - base great person rate"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBaseGreatPeopleRate"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/) - base rate for YieldType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBaseYieldRate"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getBaseYieldRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusBadHealth"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusGoodHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusGoodHealth"
}
, 
{
"doc"
:
"int (BonusID) - total happiness bonus from BonusID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusHappiness"
}
, 
{
"doc"
:
"int (BonusID) - total health bonus from BonusID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusHealth"
}
, 
{
"doc"
:
"int (int /*BonusTypes*/ eBonus, bool bDirty)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusPower"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/ eIndex, int /*BonusTypes*/ eBonus)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusYieldRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingBadHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingBadHealth"
}
, 
{
"doc"
:
"int () - building defense"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingBombardDefense"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/) - total effect of cities buildings on CommerceTypes"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingCommerce"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/, BuildingTypes) - total value of CommerceType from BuildingTypes"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingCommerceByBuilding"
}
, 
{
"doc"
:
"int (int /*BuildingClassTypes*/ eBuildingClass, int /*CommerceTypes*/ eCommerce)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingCommerceChange"
}
, 
{
"doc"
:
"int () - building defense"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingDefense"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingGoodHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingGoodHealth"
}
, 
{
"doc"
:
"int (int eBuilding)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingHappiness"
}
, 
{
"doc"
:
"int (int /*BuildingClassTypes*/ eBuildingClass)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingHappyChange"
}
, 
{
"doc"
:
"int (int eBuilding)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingHealth"
}
, 
{
"doc"
:
"int (int /*BuildingClassTypes*/ eBuildingClass)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingHealthChange"
}
, 
{
"doc"
:
"int (BuildingType) - index of original building owner"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingOriginalOwner"
}
, 
{
"doc"
:
"int (BuildingType) - original build date"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingOriginalTime"
}
, 
{
"doc"
:
"int (BuildingID) - current production towards BuildingID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingProduction"
}
, 
{
"doc"
:
"int (BuildingID) - production multiplier for BuildingID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingProductionModifier"
}
, 
{
"doc"
:
"int (int eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingProductionTime"
}
, 
{
"doc"
:
"int (BuildingID, int iNum) - # of turns remaining to complete UnitID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingProductionTurnsLeft"
}
, 
{
"doc"
:
"int (int /*BuildingClassTypes*/ eBuildingClass, int /*YieldTypes*/ eYield)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingYieldChange"
}
, 
{
"doc"
:
"CyPlot* (int iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityIndexPlot"
}
, 
{
"doc"
:
"int (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityPlotIndex"
}
, 
{
"doc"
:
"int /*CitySizeTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCitySizeType"
}
, 
{
"doc"
:
"CivilizationID () - owners CivilizationID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationType"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/, int iYieldRate)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceFromPercent"
}
, 
{
"doc"
:
"int () - happiness from all CommerceTypes"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceHappiness"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/) - happiness from CommerceType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceHappinessByType"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/) - happiness from each level of entertainment"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceHappinessPer"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/) - total Commerce rate"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceRate"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/) - indicates the total rate modifier on CommerceType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceRateModifier"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/) - total Commerce rate"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceRateTimes100"
}
, 
{
"doc"
:
"int () - returns the amount of time left on the conscript anger timer"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConscriptAngerTimer"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConscriptPopulation"
}
, 
{
"doc"
:
"UnitID () - UnitID for the best unit the city can conscript"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConscriptUnit"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/) - effect on CommerceType by Corporation"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCorporationCommerce"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/, CorporationType) - CommerceType effect from CorporationType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCorporationCommerceByCorporation"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/) - effect on YieldTypes by Corporation"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCorporationYield"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/, CorporationType) - YieldTypes effect from CorporationType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCorporationYieldByCorporation"
}
, 
{
"doc"
:
"int /*PlayerTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCulture"
}
, 
{
"doc"
:
"int /*CultureLevelTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCultureLevel"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCulturePercentAnger"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getCultureThreshold"
}
, 
{
"doc"
:
"int /*PlayerTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCultureTimes100"
}
, 
{
"doc"
:
"int () - Culture Update Timer"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCultureUpdateTimer"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCurrAirlift"
}
, 
{
"doc"
:
"int (bool bIgnoreFood, bool bOverflow)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCurrentProductionDifference"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCurrentStateReligionHappiness"
}
, 
{
"doc"
:
"int () - value of damage city defenses can receive"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefenseDamage"
}
, 
{
"doc"
:
"int (bool bIgnoreBuilding)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefenseModifier"
}
, 
{
"doc"
:
"int () - returns the amount of time left on the anger timer"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefyResolutionAngerTimer"
}
, 
{
"doc"
:
"int (int /*DomainTypes*/)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDomainFreeExperience"
}
, 
{
"doc"
:
"int (int /*DomainTypes*/)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDomainProductionModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionageDefenseModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionageHappinessCounter"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionageHealthCounter"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionageVisibility"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraBuildingBadHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraBuildingGoodHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraHealth"
}
, 
{
"doc"
:
"int (int iExtra)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraProductionDifference"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraSpecialistYield"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/ eIndex, int /*SpecialistTypes*/ eSpecialist)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraSpecialistYieldOfType"
}
, 
{
"doc"
:
"int () - returns the number of extra trade routes this city has"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraTradeRoutes"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureBadHappiness"
}
, 
{
"doc"
:
"int () - returns the bad health provided by the feature this city is built on"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureBadHealth"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureGoodHappiness"
}
, 
{
"doc"
:
"int () - returns the good health provided by the feature this city is built on"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureGoodHealth"
}
, 
{
"doc"
:
"int () - value of feature production"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureProduction"
}
, 
{
"doc"
:
"int (int /*BuildingTypes*/ eBuilding)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFirstBuildingOrder"
}
, 
{
"doc"
:
"int (int /*ProjectTypes*/ eProject)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFirstProjectOrder"
}
, 
{
"doc"
:
"int (int /*UnitTypes*/ eUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFirstUnitOrder"
}
, 
{
"doc"
:
"int () - stored food"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFood"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFoodKept"
}
, 
{
"doc"
:
"int () - how many food turns remain?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFoodTurnsLeft"
}
, 
{
"doc"
:
"int (int /*SpecialistTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getForceSpecialistCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getForeignTradeRouteModifier"
}
, 
{
"doc"
:
"int (int eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeBonus"
}
, 
{
"doc"
:
"int () - # of free experience newly trained units receive"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeExperience"
}
, 
{
"doc"
:
"int (int /*PromotionTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreePromotionCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeSpecialist"
}
, 
{
"doc"
:
"int (int /*SpecialistTypes*/ eIndex"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeSpecialistCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreshWaterBadHealth"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreshWaterGoodHealth"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGameTurnAcquired"
}
, 
{
"doc"
:
"int () - GameTurn the city was founded"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGameTurnFounded"
}
, 
{
"doc"
:
"int - # of production turns left for the top order node item in a city..."
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGeneralProductionTurnsLeft"
}
, 
{
"doc"
:
"int () - current great person progress"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeopleProgress"
}
, 
{
"doc"
:
"int () - total Great Person rate"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeopleRate"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeopleRateModifier"
}
, 
{
"doc"
:
"int (int /*UnitTypes*/ iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeopleUnitProgress"
}
, 
{
"doc"
:
"int (int /*UnitTypes*/ iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeopleUnitRate"
}
, 
{
"doc"
:
"HandicapType () - owners difficulty level"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHandicapType"
}
, 
{
"doc"
:
"int () - Temporary Happiness timer"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHappinessTimer"
}
, 
{
"doc"
:
"int () "
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHighestPopulation"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getHurryAngerModifier"
}
, 
{
"doc"
:
"int () - Anger caused by Hurrying timer"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHurryAngerTimer"
}
, 
{
"doc"
:
"int () - index ID # for the city - use with pPlayer.getCity(ID) to obtain city instance"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getID"
}
, 
{
"doc"
:
"int (ImprovementID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementFreeSpecialists"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLargestCityHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLiberationPlayer"
}
, 
{
"doc"
:
"int () - cities current maintenance cost"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaintenance"
}
, 
{
"doc"
:
"int () - total value of the city maintenance modifier"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaintenanceModifier"
}
, 
{
"doc"
:
"int () - cities current maintenance cost"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaintenanceTimes100"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxAirlift"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxFoodKeptPercent"
}
, 
{
"doc"
:
"int (int /*SpecialistTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxSpecialistCount"
}
, 
{
"doc"
:
"int () - happiness created by military units stationed in the city"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMilitaryHappiness"
}
, 
{
"doc"
:
"number of military units creating happiness"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMilitaryHappinessUnits"
}
, 
{
"doc"
:
"int () - value of adjustments to military production"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMilitaryProductionModifier"
}
, 
{
"doc"
:
"string () - city name"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getName"
}
, 
{
"doc"
:
"string () - city name"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNameForm"
}
, 
{
"doc"
:
"string () - city name"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNameKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNaturalDefense"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNoMilitaryPercentAnger"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNukeModifier"
}
, 
{
"doc"
:
"bool (BuildingID) - is BuildingID active in the city (present & not obsolete)?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumActiveBuilding"
}
, 
{
"doc"
:
"int (PlayerID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBonuses"
}
, 
{
"doc"
:
"int - (BuildingID) - How many BuildingID does this city have (real or free)?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBuilding"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBuildings"
}
, 
{
"doc"
:
"int (BuildingID) - # of free Building ID (ie: from a Wonder)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumFreeBuilding"
}
, 
{
"doc"
:
"int () - # of great people who are joined to the city"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumGreatPeople"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumNationalWonders"
}
, 
{
"doc"
:
"int (BuildingID) - get # real building of this type"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumRealBuilding"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTeamWonders"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumWorldWonders"
}
, 
{
"doc"
:
"int () - total # of turns remaining on occupation timer"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOccupationTimer"
}
, 
{
"doc"
:
"OrderData* (int iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOrderFromQueue"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOrderQueueLength"
}
, 
{
"doc"
:
"int /*PlayerTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOriginalOwner"
}
, 
{
"doc"
:
"int (iExtra)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOvercrowdingPercentAnger"
}
, 
{
"doc"
:
"int () - value of overflow production"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOverflowProduction"
}
, 
{
"doc"
:
"int /*PlayerTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOwner"
}
, 
{
"doc"
:
"int /*LeaderHeadTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPersonalityType"
}
, 
{
"doc"
:
"int () - total city population"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPopulation"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPowerBadHealth"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPowerGoodHealth"
}
, 
{
"doc"
:
"int /*PlayerTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPreviousOwner"
}
, 
{
"doc"
:
"int () - returns the current production towards whatever is top of this city's OrderQueue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProduction"
}
, 
{
"doc"
:
"BuildingID () - ID for building that is under construction"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionBuilding"
}
, 
{
"doc"
:
"int (int /*UnitTypes*/ eUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionExperience"
}
, 
{
"doc"
:
"int () - multiplier (if any) for item being produced"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionModifier"
}
, 
{
"doc"
:
"str () - description of item that the city is working on"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionName"
}
, 
{
"doc"
:
"str () - description of item that the city is working on"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionNameKey"
}
, 
{
"doc"
:
"int () - # of production needed to complete construction"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionNeeded"
}
, 
{
"doc"
:
"int /*ProcessTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionProcess"
}
, 
{
"doc"
:
"int /*ProjectTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionProject"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/) - value of production to commerce modifier"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionToCommerceModifier"
}
, 
{
"doc"
:
"int () - # of turns remaining until item is completed"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionTurnsLeft"
}
, 
{
"doc"
:
"UnitID () - ID for unit that is being trained"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionUnit"
}
, 
{
"doc"
:
"int eUnitAIType ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionUnitAI"
}
, 
{
"doc"
:
"int (int /*ProjectTypes*/ eProject)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProjectProductionModifier"
}
, 
{
"doc"
:
"int (int /*ProjectTypes*/ eProject, int iNum)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProjectProductionTurnsLeft"
}
, 
{
"doc"
:
"CyPlot () - returns city's rally plot instance"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRallyPlot"
}
, 
{
"doc"
:
"int () - total city population in \"real\" numbers"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRealPopulation"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionBadHappiness"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/) - effect on CommerceType by Religions"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionCommerce"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/, ReligionType) - CommerceType effect from ReligionType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionCommerceByReligion"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionGoodHappiness"
}
, 
{
"doc"
:
"int (int eReligion)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionHappiness"
}
, 
{
"doc"
:
"int (ReligionID) - value of influence from ReligionID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionInfluence"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionPercentAnger"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/) - total YieldType for river plots"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRiverPlotYield"
}
, 
{
"doc"
:
"str () - Get stored custom data (via pickle)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScriptData"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/) - total YieldType for water plots"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSeaPlotYield"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpaceProductionModifier"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/) - value of CommerceType adjustment from Specialists"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialistCommerce"
}
, 
{
"doc"
:
"int (int /*SpecialistTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialistCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialistFreeExperience"
}
, 
{
"doc"
:
"int () - # of specialists"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialistPopulation"
}
, 
{
"doc"
:
"int (int /*ReligionTypes*/ ReligionID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionHappiness"
}
, 
{
"doc"
:
"int /*TeamTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTeam"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTotalCommerceRateModifier"
}
, 
{
"doc"
:
"int (bool bIgnoreBuilding)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTotalDefense"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTotalGreatPeopleRateModifier"
}
, 
{
"doc"
:
"CyCity (int iIndex) - remove SpecialistType[iIndex]"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeCity"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeRouteModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeRoutes"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/) - trade adjustment to YieldType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeYield"
}
, 
{
"doc"
:
"int (int /*UnitCombatTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitCombatFreeExperience"
}
, 
{
"doc"
:
"int (UnitID) - gets current production towards UnitID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitProduction"
}
, 
{
"doc"
:
"int (UnitID) - production multiplier for UnitID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitProductionModifier"
}
, 
{
"doc"
:
"int (UnitID, int iNum) - # of turns remaining to complete UnitID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitProductionTurnsLeft"
}
, 
{
"doc"
:
"python::tuple getWallOverridePoints()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWallOverridePoints"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getWarWearinessModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWarWearinessPercentAnger"
}
, 
{
"doc"
:
"int () - # of citizens who are working"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWorkingPopulation"
}
, 
{
"doc"
:
"int () - X coordinate for the cities plot"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getX"
}
, 
{
"doc"
:
"int () - Y coordinate for the cities plot"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getY"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/) - total value of YieldType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldRate"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/) - yield rate modifier for YieldType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldRateModifier"
}
, 
{
"doc"
:
"int () - total health"
, 
"type"
:
"instancemethod"
, 
"name"
:
"goodHealth"
}
, 
{
"doc"
:
"int () - value needed for growth"
, 
"type"
:
"instancemethod"
, 
"name"
:
"growthThreshold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"happyLevel"
}
, 
{
"doc"
:
"bool - (BonusID) - is BonusID connected to the city?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasBonus"
}
, 
{
"doc"
:
"bool (TraitID) - does owner have TraitID?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasTrait"
}
, 
{
"doc"
:
"int (bool bNoAngry, int iExtra)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"healthRate"
}
, 
{
"doc"
:
"void (HurryTypes eHurry) - forces the city to rush production using eHurry"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hurry"
}
, 
{
"doc"
:
"int (HurryID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hurryAngerLength"
}
, 
{
"doc"
:
"int (bool bExtra)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hurryCost"
}
, 
{
"doc"
:
"int (HurryID) - total value of gold when hurrying"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hurryGold"
}
, 
{
"doc"
:
"int (HurryID) - value of each pop when hurrying"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hurryPopulation"
}
, 
{
"doc"
:
"int (HurryID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hurryProduction"
}
, 
{
"doc"
:
"bool (CorporationID) - does city have active CorporationID?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isActiveCorporation"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAirliftTargeted"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAreaCleanPower"
}
, 
{
"doc"
:
"bool () - is owner a barbarian?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBarbarian"
}
, 
{
"doc"
:
"bool (CyUnit* pUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBombardable"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBombarded"
}
, 
{
"doc"
:
"bool () - is the city ?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBuildingOnlyHealthy"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBuildingsMaxed"
}
, 
{
"doc"
:
"bool () - is city the owners capital?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCapital"
}
, 
{
"doc"
:
"bool () - are citizens under automation?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCitizensAutomated"
}
, 
{
"doc"
:
"bool (int) - is the city on the coast?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCoastal"
}
, 
{
"doc"
:
"bool (CyCity*) - is city connected to CyCity* via the Trade Network?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isConnectedTo"
}
, 
{
"doc"
:
"bool (iOwner) - connected to the capital?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isConnectedToCapital"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDirtyPower"
}
, 
{
"doc"
:
"bool () - is the city in disorder?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDisorder"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDrafted"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isEverOwned"
}
, 
{
"doc"
:
"bool () - is item under construction being created with food instead of production?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFoodProduction"
}
, 
{
"doc"
:
"bool (int /*PromotionTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFreePromotion"
}
, 
{
"doc"
:
"bool () - is city the government center?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGovernmentCenter"
}
, 
{
"doc"
:
"bool (int iBuildingID) - This function actually no longer exists in C++, this is a helper function which hooks up to getNumBuilding() to help mod backwards compatibility"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHasBuilding"
}
, 
{
"doc"
:
"bool (CorporationID) - does city have CorporationID?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHasCorporation"
}
, 
{
"doc"
:
"bool (ReligionID) - does city have ReligionID?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHasReligion"
}
, 
{
"doc"
:
"bool () - is the city CorporationID's headquarters?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHeadquarters"
}
, 
{
"doc"
:
"bool (CorporationID) - is the city CorporationID's headquarters?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHeadquartersByType"
}
, 
{
"doc"
:
"bool () - is the city ReligionID's holy city?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHolyCity"
}
, 
{
"doc"
:
"bool (ReligionID) - is the city ReligionID's holy city?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHolyCityByType"
}
, 
{
"doc"
:
"bool () - is owner human?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHuman"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNationalWondersMaxed"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNeverLost"
}
, 
{
"doc"
:
"bool (int eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoBonus"
}
, 
{
"doc"
:
"bool () - is the city unaffected by unhappiness?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoUnhappiness"
}
, 
{
"doc"
:
"bool () - is the city unaffected by unhealthiness?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoUnhealthyPopulation"
}
, 
{
"doc"
:
"void () - is the instance valid?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"bool () - is the city under occupation?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOccupation"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPlundered"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPower"
}
, 
{
"doc"
:
"bool () - is city producing?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProduction"
}
, 
{
"doc"
:
"bool () - is production under automation?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProductionAutomated"
}
, 
{
"doc"
:
"bool () - is city constructing a building?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProductionBuilding"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProductionLimited"
}
, 
{
"doc"
:
"bool () - is city maintaining a process?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProductionProcess"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProductionProject"
}
, 
{
"doc"
:
"bool () - is city training a unit?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProductionUnit"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eIndex, bool bDebug)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRevealed"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSpecialistForced"
}
, 
{
"doc"
:
"bool (int /*SpecialistTypes*/ eIndex, int iExtra)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSpecialistValid"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTeamWondersMaxed"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTradeRoute"
}
, 
{
"doc"
:
"bool (UnitID) - does UnitID require food to be trained?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isUnitFoodProduction"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eTeam, bool bDebug)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVisible"
}
, 
{
"doc"
:
"bool isWallOverride()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWallOverride"
}
, 
{
"doc"
:
"bool (iIndex) - true if a worker is working this city's pPlot"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWorkingPlot"
}
, 
{
"doc"
:
"bool (iIndex) - true if a worker is working this city's plot iIndex"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWorkingPlotByIndex"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWorldWondersMaxed"
}
, 
{
"doc"
:
"void () - kill the city"
, 
"type"
:
"instancemethod"
, 
"name"
:
"kill"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"liberate"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"maxHurryPopulation"
}
, 
{
"doc"
:
"CyPlot () - returns cities plot instance"
, 
"type"
:
"instancemethod"
, 
"name"
:
"plot"
}
, 
{
"doc"
:
"int (int iNum, bool bFinish, bool bChoose)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"popOrder"
}
, 
{
"doc"
:
"int () - result of (getProductionNeeded() - getProduction()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"productionLeft"
}
, 
{
"doc"
:
"void (OrderTypes eOrder, int iData1, int iData2, bool bSave, bool bPop, bool bAppend, bool bForce)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"pushOrder"
}
, 
{
"doc"
:
"void (iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setAirliftTargeted"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/, int iNewValue) - sets the base rate for YieldType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setBaseYieldRate"
}
, 
{
"doc"
:
"void (iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setBombarded"
}
, 
{
"doc"
:
"void (int /*BuildingClassTypes*/ eBuildingClass, int /*CommerceTypes*/ eCommerce, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setBuildingCommerceChange"
}
, 
{
"doc"
:
"void (int /*BuildingClassTypes*/ eBuildingClass, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setBuildingHappyChange"
}
, 
{
"doc"
:
"void (int /*BuildingClassTypes*/ eBuildingClass, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setBuildingHealthChange"
}
, 
{
"doc"
:
"void (BuildingID, iNewValue) - set progress towards BuildingID as iNewValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setBuildingProduction"
}
, 
{
"doc"
:
"int (int eIndex, int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setBuildingProductionTime"
}
, 
{
"doc"
:
"void (int /*BuildingClassTypes*/ eBuildingClass, int /*YieldTypes*/ eYield, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setBuildingYieldChange"
}
, 
{
"doc"
:
"void (bool bNewValue) - set city animation bNewValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCitizensAutomated"
}
, 
{
"doc"
:
"setCitySizeBoost(int iBoost)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCitySizeBoost"
}
, 
{
"doc"
:
"void (int PlayerTypes eIndex`, bool bPlots)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCulture"
}
, 
{
"doc"
:
"void (int PlayerTypes eIndex, int iNewValue, bool bPlots)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCultureTimes100"
}
, 
{
"doc"
:
"void (iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setDrafted"
}
, 
{
"doc"
:
"void (iNewValue) - set feature production to iNewValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setFeatureProduction"
}
, 
{
"doc"
:
"void (iNewValue) - set stored food to iNewValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setFood"
}
, 
{
"doc"
:
"int (int /*SpecialistTypes*/ eIndex, int iNewValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setForceSpecialistCount"
}
, 
{
"doc"
:
"int (int /*SpecialistTypes*/ eIndex, iNewValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setFreeSpecialistCount"
}
, 
{
"doc"
:
"int (int /*UnitTypes*/ iIndex, int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setGreatPeopleUnitProgress"
}
, 
{
"doc"
:
"void (CorporationID, bool bNewValue, bool bAnnounce, bool bArrows) - corporation begins to spread"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setHasCorporation"
}
, 
{
"doc"
:
"void (ReligionID, bool bNewValue, bool bAnnounce, bool bArrows) - religion begins to spread"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setHasReligion"
}
, 
{
"doc"
:
"void (iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setHighestPopulation"
}
, 
{
"doc"
:
"void (TCHAR szNewValue, bool bFound) - sets the name to szNewValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setName"
}
, 
{
"doc"
:
"void (iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNeverLost"
}
, 
{
"doc"
:
"(BuildingID, iNum) - Sets number of buildings in this city of BuildingID type"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNumRealBuilding"
}
, 
{
"doc"
:
"void (iNewValue) - set the Occupation Timer to iNewValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setOccupationTimer"
}
, 
{
"doc"
:
"void (iNewValue) - set overflow production to iNewValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setOverflowProduction"
}
, 
{
"doc"
:
"void (iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPlundered"
}
, 
{
"doc"
:
"void (int iNewValue) - sets the city population to iNewValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPopulation"
}
, 
{
"doc"
:
"void (int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setProduction"
}
, 
{
"doc"
:
"void (bool bNewValue) - set city production automation to bNewValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setProductionAutomated"
}
, 
{
"doc"
:
"void (int /*TeamTypes*/ eIndex, bool bNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setRevealed"
}
, 
{
"doc"
:
"void (str) - Set stored custom data (via pickle)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScriptData"
}
, 
{
"doc"
:
"void (UnitID, iNewValue) - sets production towards UnitID as iNewValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setUnitProduction"
}
, 
{
"doc"
:
"setWallOverride(bool bOverride)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setWallOverride"
}
, 
{
"doc"
:
"setWallOverridePoints(const python::tuple& kPoints)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setWallOverridePoints"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"totalBadBuildingHealth"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"totalFreeSpecialists"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"totalGoodBuildingHealth"
}
, 
{
"doc"
:
"int () - total trade adjustment"
, 
"type"
:
"instancemethod"
, 
"name"
:
"totalTradeModifier"
}
, 
{
"doc"
:
"int (int iExtra)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"unhappyLevel"
}
, 
{
"doc"
:
"int (bool bNoAngry), int (iExtra)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"unhealthyPopulation"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"visiblePopulation"
}
, 
{
"doc"
:
"CyArea* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"waterArea"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyDeal"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getFirstPlayer"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getFirstTrade"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getID"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getInitialGameTurn"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getLengthFirstTrades"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getLengthSecondTrades"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getSecondPlayer"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getSecondTrade"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"kill"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyDiplomacy"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void ( int /*DiploCommentTypes*/ eComment, int iData1, int iData2, string szString, tuple txtArgs )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addUserComment"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"atWar"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"clearUserComments"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"closeScreen"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"counterPropose"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"declareWar"
}
, 
{
"doc"
:
"void (int /*DiploEventTypes*/ iDiploEvent, int iData1, int iData2)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"diploEvent"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"endTrade"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getData"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOpponentCivName"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOpponentName"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOurCivName"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOurName"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOurScore"
}
, 
{
"doc"
:
"TradeData* (int iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerTradeOffer"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTheirScore"
}
, 
{
"doc"
:
"TradeData* (int iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTheirTradeOffer"
}
, 
{
"doc"
:
"int PlayerTypes*/ getWhoTradingWith()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWhoTradingWith"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasAnnualDeal"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"implementDeal"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAIOffer"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSeparateTeams"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"makePeace"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"offerDeal"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"ourOfferEmpty"
}
, 
{
"doc"
:
"void ( LeaderheadAction eAction )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"performHeadAction"
}
, 
{
"doc"
:
"void (int iComment)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setAIComment"
}
, 
{
"doc"
:
"void ( bool bOffer )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setAIOffer"
}
, 
{
"doc"
:
"void ( string szString, tuple txtArgs )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setAIString"
}
, 
{
"doc"
:
"void ( bool bShow )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"showAllTrade"
}
, 
{
"doc"
:
"void ( int iComment, bool bRenegotiate )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"startTrade"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"theirOfferEmpty"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"theirVassalTribute"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyEngine"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void (int plotX, int plotY, NiColorA color, int iLayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addColoredPlot"
}
, 
{
"doc"
:
"void (int plotX, int plotY, int iPlotStyle, int iLayer, string szColor, float fAlpha)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addColoredPlotAlt"
}
, 
{
"doc"
:
"void (CyPlot* pPlot, const TCHAR* caption)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addLandmark"
}
, 
{
"doc"
:
"void (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addLandmarkPopup"
}
, 
{
"doc"
:
"void (CyPlot *plot, int /* PlayerTypes */ playerType, const TCHAR* caption)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSign"
}
, 
{
"doc"
:
"void (int iLayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"clearAreaBorderPlots"
}
, 
{
"doc"
:
"void (int iLayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"clearColoredPlots"
}
, 
{
"doc"
:
"void (int plotX, int plotY, NiColorA color, int iLayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"fillAreaBorderPlot"
}
, 
{
"doc"
:
"void (int plotX, int plotY, int iLayer, string szColor, float fAlpha)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"fillAreaBorderPlotAlt"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityBillboardVisibility"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCultureVisibility"
}
, 
{
"doc"
:
"int getNumSigns()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumSigns"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSelectionCursorVisibility"
}
, 
{
"doc"
:
"CySign* (int index)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSignByIndex"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitFlagVisibility"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUpdateRate"
}
, 
{
"doc"
:
"bool (EngineDirtyBits eBit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDirty"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGlobeviewUp"
}
, 
{
"doc"
:
"bool () - is the engine instance valid?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"reloadEffectInfos"
}
, 
{
"doc"
:
"void (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"removeLandmark"
}
, 
{
"doc"
:
"void (CyPlot* pPlot, int /* PlayerTypes */ playerType)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"removeSign"
}
, 
{
"doc"
:
"void (bool bState)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCityBillboardVisibility"
}
, 
{
"doc"
:
"void (bool bState)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCultureVisibility"
}
, 
{
"doc"
:
"void (EngineDirtyBits eBit, bool bNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setDirty"
}
, 
{
"doc"
:
"void (bool bState)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setFogOfWar"
}
, 
{
"doc"
:
"void (bool bState)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSelectionCursorVisibility"
}
, 
{
"doc"
:
"void (bool bState)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setUnitFlagVisibility"
}
, 
{
"doc"
:
"void (float fUpdateRate)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setUpdateRate"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"toggleGlobeview"
}
, 
{
"doc"
:
"void (iEffect, plotPoint)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"triggerEffect"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyFractal"
, 
"members"
:
[
{
"type"
:
"type"
, 
"name"
:
"FracVals"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"DEFAULT_FRAC_X_EXP"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"DEFAULT_FRAC_Y_EXP"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"FRAC_CENTER_RIFT"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"FRAC_INVERT_HEIGHTS"
, 
"value"
:
32
}
, 
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"FRAC_PERCENT"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"FRAC_POLAR"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"FRAC_WRAP_X"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"FRAC_WRAP_Y"
, 
"value"
:
2
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
32
, 
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"values[32]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"values[2]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"values[4]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"values[8]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.FracVals"
, 
"name"
:
"values[16]"
}
]
]
}
]
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void (int iNewXs, int iNewYs, int iGrain, CvRandom random, int iFlags, int iFracXExp, int iFracYExp)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"fracInit"
}
, 
{
"doc"
:
"void (int iNewXs, int iNewYs, int iGrain, CvRandom random, int iFlags, CyFractal pRifts, int iFracXExp, int iFracYExp)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"fracInitHints"
}
, 
{
"doc"
:
"void (int iNewXs, int iNewYs, int iGrain, CvRandom random, int iFlags, list hintsData, int iFracXExp, int iFracYExp)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"fracInitRifts"
}
, 
{
"doc"
:
"int (int x, int y)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHeight"
}
, 
{
"doc"
:
"int (int iPercent)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHeightFromPercent"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyGFlyoutMenu"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void addTextItem(std::wstring szLabel, const std::string& szPythonCBModule, const std::string& szPythonCBFxn)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addTextItem"
}
, 
{
"doc"
:
"void create()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"create"
}
, 
{
"doc"
:
"void destroy()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"destroy"
}
, 
{
"doc"
:
"void hide()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hide"
}
, 
{
"doc"
:
"void show()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"show"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyGInterfaceScreen"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void ( string szName, int iBonus, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2,  float fxRotation, float fzRotation, float fScale, bool bShowBackground)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addBonusGraphicGFC"
}
, 
{
"doc"
:
"void ( string szName, int iBuilding, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2,  float fxRotation, float fzRotation, float fScale, bool bShowBackground)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addBuildingGraphicGFC"
}
, 
{
"doc"
:
"void ( string szName, string szTexture, string szHiliteTexture, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2, ButtonStyles eStyle )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addCheckBoxGFC"
}
, 
{
"doc"
:
"void ( string szName, string szTexture, string szHiliteTexture, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2, ButtonStyles eStyle, bool bSafeFocus )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addCheckBoxGFCAt"
}
, 
{
"doc"
:
"void ( string szName, string szTexture, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addDDSGFC"
}
, 
{
"doc"
:
"void ( string szName, string szAttachTo, string szTexture, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2, bool bOption )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addDDSGFCAt"
}
, 
{
"doc"
:
"void ( string szName, string szTexture, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addDrawControl"
}
, 
{
"doc"
:
"void ( string szName, string szAttachTo, string szTexture, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addDrawControlAt"
}
, 
{
"doc"
:
"void ( string szName, int iX, int iY, int iWidth, WidgetTypes eWidgetType, int iData1, int iData2, FontTypes eFontType )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addDropDownBoxGFC"
}
, 
{
"doc"
:
"void ( string szName, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2, FontTypes eFont )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addEditBoxGFC"
}
, 
{
"doc"
:
"void ( string szName, int iX, int iY, int iWidth, int iHeight, int iOwner, WidgetTypes eWidgetType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addFlagWidgetGFC"
}
, 
{
"doc"
:
"void ( string szName, float fX, float fY, uint uiLayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addGraphData"
}
, 
{
"doc"
:
"void ( string szName, uint uiLayer, int iColor)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addGraphLayer"
}
, 
{
"doc"
:
"void ( string szName, string szAttachTo, string szFile, float fX, float fY, float fZ, float fWidth, float fHeight, WidgetTypes eWidgetType, int iData1, int iData2)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addGraphWidget"
}
, 
{
"doc"
:
"void ( string szName, int iImprovement, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2,  float fxRotation, float fzRotation, float fScale, bool bShowBackground)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addImprovementGraphicGFC"
}
, 
{
"doc"
:
"void ( string szAttachTo, wstring szText, WidgetTypes eWidgetType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addItemToTableGFC"
}
, 
{
"doc"
:
"void ( string  szName, int eWho, int eInitAttitude, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidget, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addLeaderheadGFC"
}
, 
{
"doc"
:
"void ( string szDrawCtrlName, string szName, int iStartX, int iStartY, int iEndX, int iEndY, int eColor )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addLineGFC"
}
, 
{
"doc"
:
"void ( string szName, wstring helpText, int iX, int iY, int iWidth, int iHeight, TableStyles eStyle )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addListBoxGFC"
}
, 
{
"doc"
:
"void ( string szName, string szFile, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2,  float fxRotation, float fzRotation, float fScale )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addModelGraphicGFC"
}
, 
{
"doc"
:
"void ( string szName, wstring helpText, int iX, int iY, int iWidth, int iHeight, int numLists, int defaultWidth, int defaultHeight, TableStyles eStyle )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addMultiListControlGFC"
}
, 
{
"doc"
:
"void ( string szName, wstring helpText, int iX, int iY, int iWidth, int iHeight, int numLists, int defaultWidth, int defaultHeight, TableStyles eStyle )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addMultiListControlGFCAt"
}
, 
{
"doc"
:
"void ( string szName, wstring szText, int iX, int iY, int iWidth, int iHeight, WidgetTypes eType, int iData1, int iData2, int iJustify )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addMultilineText"
}
, 
{
"doc"
:
"void ( string szName, wstring title, wstring helpText, bool bVerticalLayout, bool bScrollable, int iX, int iY, int iWidth, int iHeight, PanelStyles eStyle )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addPanel"
}
, 
{
"doc"
:
"void ( string szName, int iX, int iY, int iWidth, int iHeight, CyPlot *pPlot, int iDistance, bool renderUnits, WidgetTypes eWidgetType, int iData1, int iData2)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addPlotGraphicGFC"
}
, 
{
"doc"
:
"void ( string szName, wstring szString, int iType, int iData, bool bSelected )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addPullDownString"
}
, 
{
"doc"
:
"void ( string szName, string szFile, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addReligionMovieWidgetGFC"
}
, 
{
"doc"
:
"void ( string szName, wstring title, int iX, int iY, int iWidth, int iHeight, PanelStyles eStyle )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addScrollPanel"
}
, 
{
"doc"
:
"void ( string szName, int iX, int iY, int iWidth, int iHeight, TableStyles eStyle )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSimpleTableControlGFC"
}
, 
{
"doc"
:
"void ( string szName, int iX, int iY, int iWidth, int iHeight, int iDefault, int iMin, int iMax, WidgetTypes eWidgetType, int iData1, int iData2, bool bIsVertical=false )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSlider"
}
, 
{
"doc"
:
"void ( string szName, int iX, int iY, int iWidth, int iHeight, int projectType, int artType, WidgetTypes eWidgetType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSpaceShipWidgetGFC"
}
, 
{
"doc"
:
"void ( string szName, CyUnit* pUnit, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2,  float fxRotation, float fzRotation, float fScale, bool bShowBackground )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSpecificUnitGraphicGFC"
}
, 
{
"doc"
:
"void ( string szName, int iX, int iY, int iWidth, int iHeight, int iNumBars, WidgetTypes eWidgetType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addStackedBarGFC"
}
, 
{
"doc"
:
"void ( string szName, string szAttachTo, int iX, int iY, int iWidth, int iHeight, int iNumBars, WidgetTypes eWidgetType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addStackedBarGFCAt"
}
, 
{
"doc"
:
"void ( string szName, int numColumns, int iX, int iY, int iWidth, int iHeight, bool bIncludeHeaders, bool bDrawGrid, int iconWidth, int iconHeight, TableStyles style )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addTableControlGFC"
}
, 
{
"doc"
:
"void ( string szName, int numColumns, int iX, int iY, int iWidth, int iHeight, bool bIncludeHeaders, bool bDrawGrid, int iconWidth, int iconHeight, TableStyles style, wstring szHelpText )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addTableControlGFCWithHelp"
}
, 
{
"doc"
:
"void ( string szAttachTo, wstring szText, int iCol, WidgetTypes eWidgetType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addTableHeaderGFC"
}
, 
{
"doc"
:
"void ( string szName, string szFile)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addToModelGraphicGFC"
}
, 
{
"doc"
:
"void ( string szName, int iUnit, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2,  float fxRotation, float fzRotation, float fScale, bool bShowBackground )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addUnitGraphicGFC"
}
, 
{
"doc"
:
"void ( string szAttachTo, wstring item, WidgetTypes eType, int iData1, int iData2, int iJustify )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"appendListBoxString"
}
, 
{
"doc"
:
"void ( string szAttachTo, wstring item, WidgetTypes eType, int iData1, int iData2, int iJustify )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"appendListBoxStringNoUpdate"
}
, 
{
"doc"
:
"void ( string szAttachTo, string szTexture, int listId, WidgetTypes eWidgetType, int iData1, int iData2, bool bOption )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"appendMultiListButton"
}
, 
{
"doc"
:
"int ( string szName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"appendTableRow"
}
, 
{
"doc"
:
"void ( string szAttachTo, string szName, wstring szText, WidgetTypes eWidgetType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachButtonGFC"
}
, 
{
"doc"
:
"void (string szAttachTo, string szName, string szTexture, string szHiliteTexture, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2, ButtonStyles eStyle )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachCheckBoxGFC"
}
, 
{
"doc"
:
"void ( string szControlName, string szTableName, int iRow, int iColumn )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachControlToTableCell"
}
, 
{
"doc"
:
"void ( string szAttachTo, string szName, bool bExpand )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachDropDownBoxGFC"
}
, 
{
"doc"
:
"void ( string szAttachTo, string szName, string szTexture, GenericButtonSizes eSize, WidgetTypes eWidgetType, int iData1, int iData2, bool bOption )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachImageButton"
}
, 
{
"doc"
:
"void (string szAttachTo, string szName, wstring szText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachLabel"
}
, 
{
"doc"
:
"void ( string szAttachTo, string szName, wstring helpText, TableStyles eStyle )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachListBoxGFC"
}
, 
{
"doc"
:
"void ( string szAttachTo, string szName, wstring helpText, int numLists, int defaultWidth, int defaultHeight, TableStyles eStyle )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachMultiListControlGFC"
}
, 
{
"doc"
:
"void ( string szAttachTo, string szName, wstring szText, WidgetTypes eType, int iData1, int iData2, int iJustify )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachMultilineText"
}
, 
{
"doc"
:
"void ( string szAttachTo, string szName, wstring title, wstring helpText, bool bVerticalLayout, bool bScrollable, PanelStyles eStyle )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachPanel"
}
, 
{
"doc"
:
"void ( string szAttachTo, string szName, wstring title, wstring helpText, bool bVerticalLayout, bool bScrollable, PanelStyles eStyle, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachPanelAt"
}
, 
{
"doc"
:
"void (string szAttachTo, string szName, bool bVertical)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachSeparator"
}
, 
{
"doc"
:
"void ( string szAttachTo, string szName, int iX, int iY, int iWidth, int iHeight, int iDefault, int iMin, int iMax, WidgetTypes eWidgetType, int iData1, int iData2, bool bIsVertical=false )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachSlider"
}
, 
{
"doc"
:
"void ( string szAttachTo, string szName, int numColumns, bool bIncludeHeaders, bool bDrawGrid, int iconWidth, int iconHeight, TableStyles style )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachTableControlGFC"
}
, 
{
"doc"
:
"void ( string szAttachTo, string szName, wstring text, FontTypes eFont, WidgetTypes eType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachTextGFC"
}
, 
{
"doc"
:
"void "
, 
"type"
:
"instancemethod"
, 
"name"
:
"bringMinimapToFront"
}
, 
{
"doc"
:
"int ( int iX )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"centerX"
}
, 
{
"doc"
:
"int ( int iY )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"centerY"
}
, 
{
"doc"
:
"void ( string szName, string szTexture )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeDDSGFC"
}
, 
{
"doc"
:
"void ( string szName, string szTexture )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeDrawControl"
}
, 
{
"doc"
:
"void ( string szName, string szTexture )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeImageButton"
}
, 
{
"doc"
:
"void ( string szName, string szFile)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeModelGraphicTextureGFC"
}
, 
{
"doc"
:
"void ( string szName, uint uiLayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"clearGraphData"
}
, 
{
"doc"
:
"void ( string szListBoxName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"clearListBoxGFC"
}
, 
{
"doc"
:
"void ( string szName    )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"clearMultiList"
}
, 
{
"doc"
:
"void ( string szAttachTo )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"commitTableRow"
}
, 
{
"doc"
:
"void (string pszName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"deleteWidget"
}
, 
{
"doc"
:
"void ( string szName, int iListId, int iIndexId, string szTexture )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"disableMultiListButton"
}
, 
{
"doc"
:
"void ( string szName, bool bEnable )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"enable"
}
, 
{
"doc"
:
"void ( string szName, bool bVertical, bool bHorizontal )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"enableGridlines"
}
, 
{
"doc"
:
"void ( string szName, bool bEnable, int listId, int iIndexId )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"enableMultiListPulse"
}
, 
{
"doc"
:
"void ( string szControlName, bool bEnable )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"enableSelect"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"enableSort"
}
, 
{
"doc"
:
"void ( bool bEnable )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"enableWorldSounds"
}
, 
{
"doc"
:
"bool ( string szName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCheckBoxState"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCurrentTime"
}
, 
{
"doc"
:
"wstring ( string szName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEditBoxString"
}
, 
{
"doc"
:
"int ( string szName, int iIndex )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPullDownData"
}
, 
{
"doc"
:
"int ( string szName, int iIndex )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPullDownType"
}
, 
{
"doc"
:
"int "
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPythonFileID"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRenderInterfaceOnly"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScreenGroup"
}
, 
{
"doc"
:
"int ( string szName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSelectedPullDownID"
}
, 
{
"doc"
:
"int ( string szName     )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTableNumColumns"
}
, 
{
"doc"
:
"int ( string szName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTableNumRows"
}
, 
{
"doc"
:
"void ( string szName, unsigned int iColumn, unsigned int iRow )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTableText"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getXResolution"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYResolution"
}
, 
{
"doc"
:
"void ( string szName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hide"
}
, 
{
"doc"
:
"void (string szName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hideEndTurn"
}
, 
{
"doc"
:
"void ( int iID )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hideList"
}
, 
{
"doc"
:
"void "
, 
"type"
:
"instancemethod"
, 
"name"
:
"hideScreen"
}
, 
{
"doc"
:
"void (int iLeft, int iRight, int iTop, int iBottom, float fZ)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"initMinimap"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isActive"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAlwaysShown"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPersistent"
}
, 
{
"doc"
:
"bool "
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRequiredForcedRedraw"
}
, 
{
"doc"
:
"bool ( string szName, int iRow )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRowSelected"
}
, 
{
"doc"
:
"void ( string  szName, int key )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"leaderheadKeyInput"
}
, 
{
"doc"
:
"void (int iPlotX, int iPlotY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"markMinimapTexturePlotDirty"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"markRenderTexturesDirty"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"minimapClearAllFlashingTiles"
}
, 
{
"doc"
:
"void (int iX, int iY, int eColor, float fSeconds)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"minimapFlashPlot"
}
, 
{
"doc"
:
"void ( string szName, wstring szText, unsigned int uiFlags )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"modifyLabel"
}
, 
{
"doc"
:
"void ( string szName, wstring szText, unsigned int uiFlags )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"modifyString"
}
, 
{
"doc"
:
"void ( string szName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"moveBackward"
}
, 
{
"doc"
:
"void ( string szName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"moveForward"
}
, 
{
"doc"
:
"void ( string szName, float fX, float fY, float fZ )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"moveItem"
}
, 
{
"doc"
:
"void ( string szName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"moveToBack"
}
, 
{
"doc"
:
"void ( string szName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"moveToFront"
}
, 
{
"doc"
:
"void ( string  szName, int eAction )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"performLeaderheadAction"
}
, 
{
"doc"
:
"void ( string szMovieName, float fX, float fY, float fWidth, float fHeight, float fZ)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"playMovie"
}
, 
{
"doc"
:
"void ( string szAttachTo, wstring item, WidgetTypes eType, int iData1, int iData2, int iJustify )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"prependListBoxString"
}
, 
{
"doc"
:
"void ( boost::python::list& szNames, int iSize, int iID )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"registerHideList"
}
, 
{
"doc"
:
"void ( string szDrawCtrlName, string szName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"removeLineGFC"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"renderMinimapWorldTexture"
}
, 
{
"doc"
:
"void ( string szName, int iListID )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"selectMultiList"
}
, 
{
"doc"
:
"void ( string szName, int iRow, bool bSelected )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"selectRow"
}
, 
{
"doc"
:
"void (string szName, ActivationTypes activation)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setActivation"
}
, 
{
"doc"
:
"void ( bool bAlwaysShown )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setAlwaysShown"
}
, 
{
"doc"
:
"void ( string szName, int iBar, float fPercent )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setBarPercentage"
}
, 
{
"doc"
:
"void ( string szName, wstring szText, string szTexture, int iX, int iY, int imageWidth, int imageHeight, WidgetTypes eWidgetType, int iData1, int iData2, ButtonStyles eStyle )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setButtonGFC"
}
, 
{
"doc"
:
"void ( bool bCloseOnEscape )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCloseOnEscape"
}
, 
{
"doc"
:
"void ( int iX, int iY, int iWidth, int iHeight )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setDimensions"
}
, 
{
"doc"
:
"void ( bool bDying )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setDying"
}
, 
{
"doc"
:
"void ( string szName, int maxCharCount, int preferredCharCount )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setEditBoxMaxCharCount"
}
, 
{
"doc"
:
"void ( string szName, wstring szString )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setEditBoxString"
}
, 
{
"doc"
:
"void ( string szName, NiColorA kColor )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setEditBoxTextColor"
}
, 
{
"doc"
:
"void (string szName, wstring szText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setEndTurnState"
}
, 
{
"doc"
:
"void ( wstring szText, unsigned int uiFlags, float fX, float fY, float fZ, FontTypes eFont )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setExitText"
}
, 
{
"doc"
:
"void (string szName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setFocus"
}
, 
{
"doc"
:
"void ( bool bRequiresForcedRedraw )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setForcedRedraw"
}
, 
{
"doc"
:
"void (string szName, float fXstart, float fdX, float fYstart, float fdY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setGraphGrid"
}
, 
{
"doc"
:
"void (string szName, wstring szLabel)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setGraphLabelX"
}
, 
{
"doc"
:
"void (string szName, wstring szLabel)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setGraphLabelY"
}
, 
{
"doc"
:
"void (string szName, float fXmin, float fXmax)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setGraphXDataRange"
}
, 
{
"doc"
:
"void (string szName, float fYmin, float fYmax)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setGraphYDataRange"
}
, 
{
"doc"
:
"void ( string szName, string szAtttachTo, wstring szText, unsigned int uiFlags, float fX, float fY, float fZ, FontTypes eFont, wstring szHelpText )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setHelpLabel"
}
, 
{
"doc"
:
"void ( float fWidth, FontTypes eFont, float fX, float fY, float fZ, bool bFloating, string szArtFile, bool bExpandRight, bool bExpandDown, uint uiFlags, int iMinWidth )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setHelpTextArea"
}
, 
{
"doc"
:
"void ( wstring szString )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setHelpTextString"
}
, 
{
"doc"
:
"void (string szName, hitTestTypes hitTest)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setHitTest"
}
, 
{
"doc"
:
"void ( string szName, string szTexture, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setImageButton"
}
, 
{
"doc"
:
"void ( string szName, string szAttachTo, string szTexture, int iX, int iY, int iWidth, int iHeight, WidgetTypes eWidgetType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setImageButtonAt"
}
, 
{
"doc"
:
"void ( string szName, string szAtttachTo, wstring szText, unsigned int uiFlags, float fX, float fY, float fZ, FontTypes eFont, WidgetTypes eType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setLabel"
}
, 
{
"doc"
:
"void ( string szName, string szAttachTo, wstring szText, unsigned int uiFlags, float fX, float fY, float fZ, FontTypes eFont, WidgetTypes eType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setLabelAt"
}
, 
{
"doc"
:
"void ( string  szName, int eAdvisor )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setLeaderheadAdvisor"
}
, 
{
"doc"
:
"void ( string  szName, int eAttitude )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setLeaderheadMood"
}
, 
{
"doc"
:
"void ( string szName, int item, std::wstring szText, WidgetTypes eType, int iData1, int iData2, int iJustify )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setListBoxStringGFC"
}
, 
{
"doc"
:
"void (bool bMain)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMainInterface"
}
, 
{
"doc"
:
"void (MinimapModeTypes eMinimapMode, int iX, int iY, int iColor, float fAlpha)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMinimapColor"
}
, 
{
"doc"
:
"void (const CyReplayInfo* pReplayInfo, int iLeft, int iRight, int iTop, int iBottom, float fZ)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMinimapMap"
}
, 
{
"doc"
:
"void (MinimapModeTypes eMode)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMinimapMode"
}
, 
{
"doc"
:
"void (bool value)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMinimapNoRender"
}
, 
{
"doc"
:
"void (float left, float bottom, float right, float top)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMinimapSectionOverride"
}
, 
{
"doc"
:
"void ( string szName, float rate)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setModelGraphicRotationRateGFC"
}
, 
{
"doc"
:
"void ( string szName, int iRed, int iGreen, int iBlue )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPanelColor"
}
, 
{
"doc"
:
"void ( string szName, int iX, int iY, int iWidth, int iHeight )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPanelSize"
}
, 
{
"doc"
:
"void ( bool bPersistent )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPersistent"
}
, 
{
"doc"
:
"void (bool val)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setRenderInterfaceOnly"
}
, 
{
"doc"
:
"void ( int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScreenGroup"
}
, 
{
"doc"
:
"void ( string szName, int item )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSelectedListBoxStringGFC"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"setShowFor"
}
, 
{
"doc"
:
"void (string pszSound)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSound"
}
, 
{
"doc"
:
"void (int iSoundId)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSoundId"
}
, 
{
"doc"
:
"void (ProjectTypes projectType)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSpaceShip"
}
, 
{
"doc"
:
"void ( string szName, int iBar, int eColor )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setStackedBarColors"
}
, 
{
"doc"
:
"void ( string szName, int iBar, int eColor, float fAlpha )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setStackedBarColorsAlpha"
}
, 
{
"doc"
:
"void ( string szName, int iBar, int iRed, int iGreen, int iBlue, float fAlpha )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setStackedBarColorsRGB"
}
, 
{
"doc"
:
"void ( string szName, bool /*FxCheckBox::CheckBoxState*/ eState )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setState"
}
, 
{
"doc"
:
"void (string szName, string szStyle)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setStyle"
}
, 
{
"doc"
:
"void ( string szName, int iColumn, wstring header, int iWidth )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTableColumnHeader"
}
, 
{
"doc"
:
"void ( string szName, int iCol )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTableColumnRightJustify"
}
, 
{
"doc"
:
"void ( string szName, int iColumn, int iRow, wstring text, string szIcon, WidgetTypes eWidgetType, int iData1, int iData2, int iJustify )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTableDate"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"setTableInt"
}
, 
{
"doc"
:
"void ( string szName, unsigned int numRows )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTableNumRows"
}
, 
{
"doc"
:
"void ( string szName, int iRow, int iHeight )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTableRowHeight"
}
, 
{
"doc"
:
"void ( string szName, int iColumn, int iRow, wstring text, string szIcon, WidgetTypes eWidgetType, int iData1, int iData2, int iJustify )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTableText"
}
, 
{
"doc"
:
"void ( string szName, int iColumn, wstring szKey, int iRowTest, wstring text, WidgetTypes eWidgetType, int iData1, int iData2, int iJustify, int iNumRows )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTableTextKey"
}
, 
{
"doc"
:
"void ( string szName, string szAtttachTo, wstring szText, unsigned int uiFlags, float fX, float fY, float fZ, FontTypes eFont, WidgetTypes eType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setText"
}
, 
{
"doc"
:
"void ( string szName, string szAttachTo, wstring szText, unsigned int uiFlags, float fX, float fY, float fZ, FontTypes eFont, WidgetTypes eType, int iData1, int iData2 )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTextAt"
}
, 
{
"doc"
:
"void (string szName, ToolTipAlignTypes alignment)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setToolTipAlignment"
}
, 
{
"doc"
:
"void ( string szName, int iWidth, int iHeight )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setViewMin"
}
, 
{
"doc"
:
"void ( string szName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"show"
}
, 
{
"doc"
:
"void (string szName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"showEndTurn"
}
, 
{
"doc"
:
"void ( PopupStates bState, bool bPassInput )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"showScreen"
}
, 
{
"doc"
:
"void ( bool bShow )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"showWindowBackground"
}
, 
{
"doc"
:
"bool (ProjectTypes projectType)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"spaceShipCanChangeType"
}
, 
{
"doc"
:
"void (ProjectTypes projectType)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"spaceShipChangeType"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"spaceShipFinalize"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"spaceShipLaunch"
}
, 
{
"doc"
:
"void (ProjectTypes projectType)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"spaceShipZoom"
}
, 
{
"doc"
:
"void ( string szName, int iNumRows )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"updateAppropriateCitySelection"
}
, 
{
"doc"
:
"void ( string szAttachTo )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"updateListBox"
}
, 
{
"doc"
:
"void (float fTime)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"updateMinimap"
}
, 
{
"doc"
:
"void (MinimapModeTypes eMode, float fAlpha)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"updateMinimapColorFromMap"
}
, 
{
"doc"
:
"void (bool bWholeMap)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"updateMinimapSection"
}
, 
{
"doc"
:
"void "
, 
"type"
:
"instancemethod"
, 
"name"
:
"updateMinimapVisibility"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyGTabCtrl"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void addSectionButton( char *szLabel,  std::string& szPythonCBModule, std::string& szPythonCBFxn, std::string& szPythonID, int iTabIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSectionButton"
}
, 
{
"doc"
:
"void addSectionCheckbox( char *szLabel,  std::string& szPythonCBModule, std::string& szPythonCBFxn, std::string& szPythonID, int iTabIndex, bool bInitialState)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSectionCheckbox"
}
, 
{
"doc"
:
"void addSectionDropdown( std::vector<CvString>& szItems,  std::string& szPythonCBModule, std::string& szPythonCBFxn, std::string& szPythonID, int iTabIndex, int iInitialSelection)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSectionDropdown"
}
, 
{
"doc"
:
"void addSectionEditCtrl( char *szLabel,  std::string& szPythonCBModule, std::string& szPythonCBFxn, std::string& szPythonID, int iTabIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSectionEditCtrl"
}
, 
{
"doc"
:
"void addSectionLabel( char *szLabel, int iTabIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSectionLabel"
}
, 
{
"doc"
:
"void addSectionRadioButton( char *szLabel,  std::string& szPythonCBModule, std::string& szPythonCBFxn, std::string& szPythonID, int iTabIndex, bool bInitialState)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSectionRadioButton"
}
, 
{
"doc"
:
"void addSectionSeparator(iTab)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSectionSeparator"
}
, 
{
"doc"
:
"std::wstring szLabel, const std::string& szPythonCBModule, const std::string& szPythonCBFxn, const std::string& szPythonID, int iTabIndex, int iMin, int iMax, int iInitialVal, int iFormatNumber, int iFormatDecimal"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSectionSlider"
}
, 
{
"doc"
:
"std::wstring szLabel, const std::string& szPythonCBModule, const std::string& szPythonCBFxn, const std::string& szPythonID, int iTabIndex, float fMin, float fMax, float fInc, float fInitialVal)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSectionSpinner"
}
, 
{
"doc"
:
"void addTabSection(const char* szLabel)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addTabSection"
}
, 
{
"doc"
:
"void attachButton (std::string szParent, std::string szName, std::wstring szLabel, const std::string& szPythonCBModule, const std::string& szPythonCBFxn, const std::string& szPythonID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachButton"
}
, 
{
"doc"
:
"void attachCheckBox (std::string szParent, std::string szName, std::wstring szLabel, const std::string& szPythonCBModule, const std::string& szPythonCBFxn, const std::string& szPythonID, bool bInitialState)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachCheckBox"
}
, 
{
"doc"
:
"void attachDropDown (std::string szParent, std::string szName, const char* szID, python::tuple& szItems, const std::string& szPythonCBModule, const std::string& szPythonCBFxn, const std::string& szPythonID, int iInitialSelection)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachDropDown"
}
, 
{
"doc"
:
"void attachEdit (std::string szParent, std::string szName, std::wstring szLabel, const std::string& szPythonCBModule, const std::string& szPythonCBFxn, const std::string& szPythonID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachEdit"
}
, 
{
"doc"
:
"void attachExpandSpacer (std::string szParent)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachExpandSpacer"
}
, 
{
"doc"
:
"void attachFixedSpacer (std::string szParent, int iSize)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachFixedSpacer"
}
, 
{
"doc"
:
"void attachHBox (std::string szParent, std::string szName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachHBox"
}
, 
{
"doc"
:
"void attachHSeparator (std::string szParent, std::string szName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachHSeparator"
}
, 
{
"doc"
:
"void attachHSlider (std::string szParent, std::string szName, const std::string& szPythonCBModule, const std::string& szPythonCBFxn, const std::string& szPythonID, int iMin, int iMax, int iInitialVal)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachHSlider"
}
, 
{
"doc"
:
"void attachImage (std::string szParent, std::string szName, std::wstring szFilename)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachImage"
}
, 
{
"doc"
:
"void attachLabel (std::string szParent, std::string szName, std::wstring szLabel)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachLabel"
}
, 
{
"doc"
:
"void attachPanel (std::string szParent, std::string szName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachPanel"
}
, 
{
"doc"
:
"void attachRadioButton (std::string szParent, std::string szName, std::wstring szLabel, const std::string& szPythonCBModule, const std::string& szPythonCBFxn, const std::string& szPythonID, bool bInitialState)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachRadioButton"
}
, 
{
"doc"
:
"void attachScrollPanel (std::string szParent, std::string szName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachScrollPanel"
}
, 
{
"doc"
:
"void attachSpacer (std::string szParent)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachSpacer"
}
, 
{
"doc"
:
"void attachSpinner (std::string szParent, std::string szName, const std::string& szPythonCBModule, const std::string& szPythonCBFxn, const std::string& szPythonID, float fMin, float fMax, float fInc, float fInitialVal, int iFormatNumber, int iFormatDecimal)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachSpinner"
}
, 
{
"doc"
:
"void attachTabItem (std::string szName, std::wstring szLabel)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachTabItem"
}
, 
{
"doc"
:
"void attachTitledPanel (std::string szParent, std::string szName, std::wstring szLabel)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachTitledPanel"
}
, 
{
"doc"
:
"void attachVBox (std::string szParent, std::string szName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachVBox"
}
, 
{
"doc"
:
"void attachVSeparator (std::string szParent, std::string szName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachVSeparator"
}
, 
{
"doc"
:
"void attachVSlider (std::string szParent, std::string szName, const std::string& szPythonCBModule, const std::string& szPythonCBFxn, const std::string& szPythonID, int iMin, int iMax, int iInitialVal)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attachVSlider"
}
, 
{
"doc"
:
"void (string szID, tuple szItems)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeDropdownContents"
}
, 
{
"doc"
:
"void create()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"create"
}
, 
{
"doc"
:
"void createByName(const char* name)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createByName"
}
, 
{
"doc"
:
"void destroy()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"destroy"
}
, 
{
"doc"
:
"void enable(bool bVal)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"enable"
}
, 
{
"doc"
:
"bool getActiveTab()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getActiveTab"
}
, 
{
"doc"
:
"void getCheckBoxState(const char *szTabName, const wchar *szButtonText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCheckBoxState"
}
, 
{
"doc"
:
"bool getControlsExpanding() const"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getControlsExpanding"
}
, 
{
"doc"
:
"void getDropDownSelection(const char *szTabName, const char *szID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDropDownSelection"
}
, 
{
"doc"
:
"void getRadioButtonState(const char *szTabName, const wchar *szButtonText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRadioButtonState"
}
, 
{
"doc"
:
"float getRadioValue (std::string szName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRadioValue"
}
, 
{
"doc"
:
"std::wstring getText (std::string szName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"float getValue (std::string szName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getValue"
}
, 
{
"doc"
:
"bool isEnabled()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isEnabled"
}
, 
{
"doc"
:
"bool isNone() - Is this instance valid?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"void setActivation (std::string szName, std::string szActivationType)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setActivation"
}
, 
{
"doc"
:
"void setActiveTab(int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setActiveTab"
}
, 
{
"doc"
:
"void setCheckBoxState(const char *szTabName, const wchar *szButtonText, bool bState)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCheckBoxState"
}
, 
{
"doc"
:
"void setColumnLength(int iSize)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setColumnLength"
}
, 
{
"doc"
:
"void setControlFlag (std::string szName, std::string szFlag)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setControlFlag"
}
, 
{
"doc"
:
"void setControlsExpanding(bool bExp)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setControlsExpanding"
}
, 
{
"doc"
:
"void setDropDownSelection(const char *szTabName, const char *szID, int iSelection)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setDropDownSelection"
}
, 
{
"doc"
:
"void (std::wstring szTabName, std::wstring szEditCtrlText, std::wstring szNewText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setEditCtrlText"
}
, 
{
"doc"
:
"void setEnabled (std::string szName, bool bEnabled)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setEnabled"
}
, 
{
"doc"
:
"void setFocus (std::string szName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setFocus"
}
, 
{
"doc"
:
"void setHitTest (std::string szName, std::string szHitTestType)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setHitTest"
}
, 
{
"doc"
:
"void setKeyFocus (std::string szName, std::string szKey, std::string szTarget)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setKeyFocus"
}
, 
{
"doc"
:
"void setLayoutFlag (std::string szName, std::string szFlag)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setLayoutFlag"
}
, 
{
"doc"
:
"void setModal (bool modal)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setModal"
}
, 
{
"doc"
:
"void setNumColumns(int iSize)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNumColumns"
}
, 
{
"doc"
:
"void setRadiioButtonState(const char *szTabName, const wchar *szButtonText, bool bState)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setRadioButtonState"
}
, 
{
"doc"
:
"void setRadioValue (std::string szName, float fValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setRadioValue"
}
, 
{
"doc"
:
"void setSize (int width, int height)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSize"
}
, 
{
"doc"
:
"void setSliderWidth(std::string szName, int iWidth)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSliderWidth"
}
, 
{
"doc"
:
"void setStyle (std::string szName, std::string szStyle)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setStyle"
}
, 
{
"doc"
:
"void setTabFocus (std::string szName, std::string szNext, std::string szPrev)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTabFocus"
}
, 
{
"doc"
:
"void setText (std::string szName, std::wstring szText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setText"
}
, 
{
"doc"
:
"void setToolTip (std::string szName, std::wstring szHelpText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setToolTip"
}
, 
{
"doc"
:
"void setValue (std::string szName, float fValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setValue"
}
, 
{
"doc"
:
"void toggle()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"toggle"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyGame"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"GetWorldBuilderMode"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"addDeal"
}
, 
{
"doc"
:
"void (int eNewPlayer, int eLeader, int eCiv)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addPlayer"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"calculateOptionsChecksum"
}
, 
{
"doc"
:
"int (int eReligion)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateReligionPercent"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"calculateSyncChecksum"
}
, 
{
"doc"
:
"bool (int eVoteSource)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canHaveSecretaryGeneral"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canTrainNukes"
}
, 
{
"doc"
:
"void (VoteSourceTypes, int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeDiploVote"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"changeFreeTradeCount"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"changeMaxTurns"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"changeNoNukesCount"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"changeNukesExploded"
}
, 
{
"doc"
:
"void (int iX, int iY, int iCost)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changePlotExtraCost"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"changeTradeRoutes"
}
, 
{
"doc"
:
"void (CyCity* pCity, OrderTypes eOrder, int iData, bool bAlt, bool bShift, bool bCtrl)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"cityPushOrder"
}
, 
{
"doc"
:
"void (int eIndex) - clears the headquarters for corporation eIndex"
, 
"type"
:
"instancemethod"
, 
"name"
:
"clearHeadquarters"
}
, 
{
"doc"
:
"void (int eIndex) - clears the holy city for religion eIndex"
, 
"type"
:
"instancemethod"
, 
"name"
:
"clearHolyCity"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countCivPlayersAlive"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countCivPlayersEverAlive"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countCivTeamsAlive"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countCivTeamsEverAlive"
}
, 
{
"doc"
:
"int (int eCorporation)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countCorporationLevels"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countHumanPlayersAlive"
}
, 
{
"doc"
:
"int (int eTech)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countKnownTechNumTeams"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"countNumHumanGameTurnActive"
}
, 
{
"doc"
:
"int (int eVote, int eVoteSource)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countPossibleVote"
}
, 
{
"doc"
:
"int (int eReligion)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countReligionLevels"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countTotalCivPower"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countTotalNukeUnits"
}
, 
{
"doc"
:
"void (bool bForward, bool bAdd)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"cycleCities"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, bool bForward, bool bAuto, int iCount)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"cyclePlotUnits"
}
, 
{
"doc"
:
"void (bool bClear, bool bForward, bool bWorkers)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"cycleSelectionGroups"
}
, 
{
"doc"
:
"void (int /*ControlTypes*/ iControl)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"doControl"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getAIAutoPlay"
}
, 
{
"doc"
:
"int () - returns CivilizationID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getActiveCivilizationType"
}
, 
{
"doc"
:
"returns index of the active player"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getActivePlayer"
}
, 
{
"doc"
:
"int () - returns ID for the group"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getActiveTeam"
}
, 
{
"doc"
:
"int (int eVictory)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdjustedLandPercent"
}
, 
{
"doc"
:
"int (int eVictory)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdjustedPopulationPercent"
}
, 
{
"doc"
:
"returns index of the best unit"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBestLandUnit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBestLandUnitCombat"
}
, 
{
"doc"
:
"int (BuildingClassType) - building Class count"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingClassCreatedCount"
}
, 
{
"doc"
:
"CalendarType ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCalendar"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getCorporationGameTurnFounded"
}
, 
{
"doc"
:
"int getCultureThreshold(CultureLevelTypes eLevel)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCultureThreshold"
}
, 
{
"doc"
:
"int /*EratTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCurrentEra"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getCurrentLanguage"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getDeal"
}
, 
{
"doc"
:
"int () - Elapsed turns thus far"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getElapsedGameTurns"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getEstimateEndTurn"
}
, 
{
"doc"
:
"int (CivicTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getForceCivicCount"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getFreeTradeCount"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getGameSpeedType"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getGameState"
}
, 
{
"doc"
:
"int () - current game turn"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGameTurn"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getGameTurnYear"
}
, 
{
"doc"
:
"HandicapType () - difficulty level settings"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHandicapType"
}
, 
{
"doc"
:
"CyCity getHeadquarters()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHeadquarters"
}
, 
{
"doc"
:
"CyCity getHolyCity()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHolyCity"
}
, 
{
"doc"
:
"int (int /*ImprovementTypes*/ eImprovement)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementUpgradeTime"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getIndexAfterLastDeal"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getInitLand"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getInitPopulation"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getInitTech"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getInitWonders"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getMapRand"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getMapRandNum"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getMaxCityElimination"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getMaxLand"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getMaxPopulation"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getMaxTech"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getMaxTurns"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getMaxWonders"
}
, 
{
"doc"
:
"Returns the number of minutes since the game began"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinutesPlayed"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getName"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getNoNukesCount"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getNukesExploded"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getNumAdvancedStartPoints"
}
, 
{
"doc"
:
"int () - total cities in Game"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCities"
}
, 
{
"doc"
:
"int () - total non-barbarian cities in Game"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCivCities"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getNumDeals"
}
, 
{
"doc"
:
"int (int eBonus)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumFreeBonuses"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getNumGameTurnActive"
}
, 
{
"doc"
:
"int () - # of human players in-game"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumHumanPlayers"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getNumReplayMessages"
}
, 
{
"doc"
:
"int () - will get who paused us"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPausePlayer"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPitbossTurnTime"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerRank"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerScore"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerVote"
}
, 
{
"doc"
:
"int (int /*HurryTypes*/ eHurry)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProductionPerPopulation"
}
, 
{
"doc"
:
"int (ProjectTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProjectCreatedCount"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getRankPlayer"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getRankTeam"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getReligionGameTurnFounded"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getReplayInfo"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getReplayMessageColor"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getReplayMessagePlayer"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getReplayMessagePlotX"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getReplayMessagePlotY"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getReplayMessageText"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getReplayMessageTurn"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getReplayMessageType"
}
, 
{
"doc"
:
"str () - Returns ScriptData member (used to store custom data)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScriptData"
}
, 
{
"doc"
:
"int (int eVoteSource)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSecretaryGeneral"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getSecretaryGeneralTimer"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getSorenRand"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getSorenRandNum"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getStartEra"
}
, 
{
"doc"
:
"int () - Returns the starting Turn (0 unless a scenario or advanced era start)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStartTurn"
}
, 
{
"doc"
:
"int () - Returns the starting year (e.g. -4000)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStartYear"
}
, 
{
"doc"
:
"int (int iSymbol)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSymbolID"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getTargetScore"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getTeamRank"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getTeamScore"
}
, 
{
"doc"
:
"int () - total game population"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTotalPopulation"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getTradeRoutes"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getTurnSlice"
}
, 
{
"doc"
:
"int (iGameTurn) - turn Time"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTurnYear"
}
, 
{
"doc"
:
"int (eIndex) - returns number of this unit class type created (?)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitClassCreatedCount"
}
, 
{
"doc"
:
"int (eIndex) - returns number of this unit type created (?)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitCreatedCount"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getVictory"
}
, 
{
"doc"
:
"int (VoteTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVoteOutcome"
}
, 
{
"doc"
:
"int (int eVote, int eVoteSource)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVoteRequired"
}
, 
{
"doc"
:
"int (int /*VoteSourceTypes*/ eVoteSource)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVoteSourceReligion"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getVoteTimer"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getWinner"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"goldenAgeLength"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"hasSkippedSaveChecksum"
}
, 
{
"doc"
:
"bool (BuildingClassType) - max # reached?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBuildingClassMaxedOut"
}
, 
{
"doc"
:
"bool (int /*BuildingTypes*/ eBuilding)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBuildingEverActive"
}
, 
{
"doc"
:
"bool (int eVote)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isChooseElection"
}
, 
{
"doc"
:
"bool () - is the globe circumnavigated?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCircumnavigated"
}
, 
{
"doc"
:
"bool (int /*CivilizationTypes*/ eCivilization)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCivEverActive"
}
, 
{
"doc"
:
"bool (CorporationID) - is corporation founded?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCorporationFounded"
}
, 
{
"doc"
:
"bool () - is the game in Debug Mode?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDebugMode"
}
, 
{
"doc"
:
"bool (VoteSourceTypes)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDiploVote"
}
, 
{
"doc"
:
"bool (int /*EventTriggerTypes*/ eTrigger)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isEventActive"
}
, 
{
"doc"
:
"bool () - Returns whether or not the game initialization process has ended (game has started)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFinalInitialized"
}
, 
{
"doc"
:
"bool (CivicTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isForceCivic"
}
, 
{
"doc"
:
"bool (CivicOptionTypes eCivicOption)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isForceCivicOption"
}
, 
{
"doc"
:
"bool (eIndex) - returns whether Control should be forced"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isForcedControl"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"isFreeTrade"
}
, 
{
"doc"
:
"bool () - GameMultiplayer()? "
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGameMultiPlayer"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHotSeat"
}
, 
{
"doc"
:
"bool"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isInAdvancedStart"
}
, 
{
"doc"
:
"bool (int /*LeaderHeadTypes*/ eLeader)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isLeaderEverActive"
}
, 
{
"doc"
:
"bool (eIndex) - returns whether MP Option is valid"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMPOption"
}
, 
{
"doc"
:
"bool () - Using a modem? "
, 
"type"
:
"instancemethod"
, 
"name"
:
"isModem"
}
, 
{
"doc"
:
"bool () - NetworkMultiplayer()? "
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNetworkMultiPlayer"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"isNoNukes"
}
, 
{
"doc"
:
"CyGame* () - is the instance valid?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"bool"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNukesValid"
}
, 
{
"doc"
:
"bool (eIndex) - returns whether Game Option is valid"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOption"
}
, 
{
"doc"
:
"bool () - will say if the game is paused"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPaused"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPbem"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPitboss"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"isPitbossHost"
}
, 
{
"doc"
:
"bool (ProjectTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProjectMaxedOut"
}
, 
{
"doc"
:
"bool (ReligionID) - is religion founded?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isReligionFounded"
}
, 
{
"doc"
:
"bool (ReligionID) - is religion in that tech slot founded?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isReligionSlotTaken"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isScoreDirty"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSimultaneousTeamTurns"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"isSpecialBuildingValid"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"isSpecialUnitValid"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTeamGame"
}
, 
{
"doc"
:
"bool (int eVote)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTeamVote"
}
, 
{
"doc"
:
"bool (int eTeam, int eVoteSource)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTeamVoteEligible"
}
, 
{
"doc"
:
"bool (eIndex, iExtra) - returns whether or not this unit class is maxed out (e.g. spies)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isUnitClassMaxedOut"
}
, 
{
"doc"
:
"bool (int /*UnitTypes*/ eUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isUnitEverActive"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"isVictoryValid"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"isVotePassed"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"makeCircumnavigated"
}
, 
{
"doc"
:
"void (bool bValid)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"makeNukesValid"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"makeSpecialBuildingValid"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"makeSpecialUnitValid"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"reviveActivePlayer"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"saveReplay"
}
, 
{
"doc"
:
"void (int eMessage, int iData2, int iData3, int iData4, bool bOption, bool bAlt, bool bShift, bool bCtrl)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"selectedCitiesGameNetMessage"
}
, 
{
"doc"
:
"void (int eMessage, int iData2, int iData3, int iData4, int iFlags, bool bAlt, bool bShift)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"selectionListGameNetMessage"
}
, 
{
"doc"
:
"void (CyPlot* pPlot, bool bAlt, bool bShift, bool bCtrl)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"selectionListMove"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"setAIAutoPlay"
}
, 
{
"doc"
:
"void (int /*PlayerTypes*/ eNewValue, bool bForceHotSeat)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setActivePlayer"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"setCurrentLanguage"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"setEstimateEndTurn"
}
, 
{
"doc"
:
"void (iNewValue) - set current game turn"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setGameTurn"
}
, 
{
"doc"
:
"void (int eIndex, CyCity *pNewValue, bAnnounce) - Sets headquarters for corporation eIndex to pNewValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setHeadquarters"
}
, 
{
"doc"
:
"void (int eIndex, CyCity *pNewValue, bAnnounce) - Sets holy city for religion eIndex to pNewValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setHolyCity"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"setMaxCityElimination"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"setMaxTurns"
}
, 
{
"doc"
:
"void (bool bModem) - Use a modem! (or don't)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setModem"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"setName"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"setNumAdvancedStartPoints"
}
, 
{
"doc"
:
"void (GameOptionIndex, bEnabled) - sets a Game Option"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setOption"
}
, 
{
"doc"
:
"void (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPitbossTurnTime"
}
, 
{
"doc"
:
"void (int iX, int iY, int /*YieldTypes*/ eYield, int iExtraYield)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPlotExtraYield"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"setScoreDirty"
}
, 
{
"doc"
:
"void (str) - Sets ScriptData member (used to store custom data)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScriptData"
}
, 
{
"doc"
:
"void () - Sets the starting year (e.g. -4000)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setStartYear"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"setTargetScore"
}
, 
{
"doc"
:
"void (int /*VoteSourceTypes*/ eVoteSource, int /*ReligionTypes*/ eReligion, bool bAnnounce)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setVoteSourceReligion"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"setWinner"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"toggleDebugMode"
}
, 
{
"doc"
:
"void (bool bForce)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"updateScore"
}
, 
{
"doc"
:
"int (int /*VictoryTypes*/ eVictory)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"victoryDelay"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyGameTextMgr"
, 
"members"
:
[
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"Reset"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"buildHintsList"
}
, 
{
"doc"
:
"wstring (int iThisPlayer, int iOtherPlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getActiveDealsString"
}
, 
{
"doc"
:
"wstring (int iPlayer, int iTargetPlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAttitudeString"
}
, 
{
"doc"
:
"wstring (int iBonus, bool bCivilopediaText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusHelp"
}
, 
{
"doc"
:
"wstring (int iBuilding, bool bCivilopediaText, bool bStrategyText, bool bTechChooserText, CyCity* pCity)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingHelp"
}
, 
{
"doc"
:
"wstring (int iCorporation, CyCity* pCity, bool bCityScreen, bool bForceCorporation)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCorporationHelpCity"
}
, 
{
"doc"
:
"wstring (int iGameTurn, bool bSave, int /*CalendarTypes*/ eCalendar, int iStartYear, int /*GameSpeedTypes*/ eSpeed)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDateStr"
}
, 
{
"doc"
:
"wstring (CyDeal* pDeal, int iPlayerPerspective)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDealString"
}
, 
{
"doc"
:
"wstring (int iFeature, bool bCivilopediaText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureHelp"
}
, 
{
"doc"
:
"wstring (int /*PlayerTypes*/ iPlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldStr"
}
, 
{
"doc"
:
"wstring (int iImprovement, bool bCivilopediaText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementHelp"
}
, 
{
"doc"
:
"wstring (int /*PlayerTypes*/ iPlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInterfaceTimeStr"
}
, 
{
"doc"
:
"wstring (int /*PlayerTypes*/ iPlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNetStats"
}
, 
{
"doc"
:
"wstring (int /*PlayerTypes*/ iPlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOOSSeeds"
}
, 
{
"doc"
:
"wstring (int iProject, bool bCivilopediaText, CyCity* pCity)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProjectHelp"
}
, 
{
"doc"
:
"wstring (int iPromotion, bool bCivilopediaText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPromotionHelp"
}
, 
{
"doc"
:
"wstring (int iReligion, CyCity* pCity, bool bCityScreen, bool bForceReligion, bool bForceState)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionHelpCity"
}
, 
{
"doc"
:
"wstring (int /*PlayerTypes*/ iPlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getResearchStr"
}
, 
{
"doc"
:
"wstring (TradeData* pTradeData, int iPlayer1, int iPlayer2)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialistHelp"
}
, 
{
"doc"
:
"wstring (CyUnit* pUnit, bool bOneLine, bool bShort)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecificUnitHelp"
}
, 
{
"doc"
:
"wstring (int iTech, bool bCivilopediaText, bool bPlayerContext, bool bStrategyText, bool bTreeInfo, int iFromTech)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechHelp"
}
, 
{
"doc"
:
"wstring (int iTerrain, bool bCivilopediaText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainHelp"
}
, 
{
"doc"
:
"wstring (int iGameTurn, bool bSave)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTimeStr"
}
, 
{
"doc"
:
"wstring (int iSpecialist, bool bCivilopediaText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeString"
}
, 
{
"doc"
:
"wstring (int iUnit, bool bCivilopediaText, bool bStrategyText, bool bTechChooserText, CyCity* pCity)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitHelp"
}
, 
{
"doc"
:
"bool () - Checks to see if pointer points to a real object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"wstring (int /*CivilizationTypes*/ iCivilization, bool bDawnOfMan)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"parseCivInfos"
}
, 
{
"doc"
:
"wstring (int /*CivicTypes*/ iCivicType, bool bCivilopediaText, bool bPlayerContext, bool bSkipName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"parseCivicInfo"
}
, 
{
"doc"
:
"wstring (int /*CorporationTypes*/ iCorporationType, bool bCivilopediaText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"parseCorporationInfo"
}
, 
{
"doc"
:
"wstring (int /*LeaderHeadTypes*/ iLeader, int /*CivilizationTypes*/ iCivilization, bool bDawnOfMan, bool bCivilopediaText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"parseLeaderTraits"
}
, 
{
"doc"
:
"wstring (int /*ReligionTypes*/ iReligionType, bool bCivilopediaText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"parseReligionInfo"
}
, 
{
"doc"
:
"wstring (int iPlayer, int iReligion)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setConvertHelp"
}
, 
{
"doc"
:
"wstring (int iPlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setRevolutionHelp"
}
, 
{
"doc"
:
"wstring (int iMaster, int iVassal)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setVassalRevoltHelp"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyGlobalContext"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAIR_BOMB_HEIGHT"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAMPHIB_ATTACK_MODIFIER"
}
, 
{
"doc"
:
"Non-Synch'd random #"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getASyncRand"
}
, 
{
"doc"
:
"(ActionID) - CvInfo for ActionID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getActionInfo"
}
, 
{
"doc"
:
"() - active player instance"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getActivePlayer"
}
, 
{
"doc"
:
"string () - Returns enum string"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAnimationOperatorTypes"
}
, 
{
"doc"
:
"string () - Returns enum string"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getArtStyleTypes"
}
, 
{
"doc"
:
"AttitudeInfo (int id)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAttitudeInfo"
}
, 
{
"doc"
:
"(AutomateID) - CvInfo for AutomateID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAutomateInfo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBARBARIAN_PLAYER"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBARBARIAN_TEAM"
}
, 
{
"doc"
:
"BonusArtInfo () - Returns info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusArtInfo"
}
, 
{
"doc"
:
"(int (BonusClassTypes) eBonusClassID) - CvInfo for BonusID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusClassInfo"
}
, 
{
"doc"
:
"(BonusID) - CvInfo for BonusID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusInfo"
}
, 
{
"doc"
:
"(BuildID) - CvInfo for BuildID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildInfo"
}
, 
{
"doc"
:
"(BuildingID) - CvArtInfo for BuildingID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingArtInfo"
}
, 
{
"doc"
:
"(BuildingClassID) - CvInfo for BuildingClassID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingClassInfo"
}
, 
{
"doc"
:
"(BuildingID) - CvInfo for BuildingID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingInfo"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCAMERA_FAR_CLIP_Z_HEIGHT"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCAMERA_LOWER_PITCH"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCAMERA_MAX_TRAVEL_DISTANCE"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCAMERA_MAX_TURN_OFFSET"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCAMERA_MAX_YAW"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCAMERA_MIN_DISTANCE"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCAMERA_MIN_YAW"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCAMERA_SPECIAL_PITCH"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCAMERA_START_DISTANCE"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCAMERA_UPPER_PITCH"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCITY_HOME_PLOT"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCITY_MAX_NUM_BUILDINGS"
}
, 
{
"doc"
:
"CalendarInfo () - Returns Info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCalendarInfo"
}
, 
{
"doc"
:
"string () - Returns enum string"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCitySizeTypes"
}
, 
{
"doc"
:
"CityTabInfo - () - Returns Info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityTabInfo"
}
, 
{
"doc"
:
"(CivicID) - CvInfo for CivicID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivicInfo"
}
, 
{
"doc"
:
"(CivicID) - CvInfo for CivicID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivicOptionInfo"
}
, 
{
"doc"
:
"(CivilizationID) - CvArtInfo for CivilizationID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationArtInfo"
}
, 
{
"doc"
:
"(CivilizationID) - CvInfo for CivilizationID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationInfo"
}
, 
{
"doc"
:
"CvClimateInfo - (ClimateTypeID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getClimateInfo"
}
, 
{
"doc"
:
"ColorInfo (int id)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getColorInfo"
}
, 
{
"doc"
:
"(CommandID) - CvInfo for CommandID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommandInfo"
}
, 
{
"doc"
:
"(CommerceID) - CvInfo for CommerceID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceInfo"
}
, 
{
"doc"
:
"Concept Info () - Returns info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConceptInfo"
}
, 
{
"doc"
:
"string () - Returns enum string"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getContactTypes"
}
, 
{
"doc"
:
"(ControlID) - CvInfo for ControlID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getControlInfo"
}
, 
{
"doc"
:
"(CorporationID) - CvInfo for CorporationID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCorporationInfo"
}
, 
{
"doc"
:
"(CultureLevelID) - CvInfo for CultureLevelID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCultureLevelInfo"
}
, 
{
"doc"
:
"float ( string szName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefineFLOAT"
}
, 
{
"doc"
:
"int ( string szName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefineINT"
}
, 
{
"doc"
:
"string getDefineSTRING( string szName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefineSTRING"
}
, 
{
"doc"
:
"DenialInfo () - Returns Info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDenialInfo"
}
, 
{
"doc"
:
"(DiplomacyID) - CvInfo for DiplomacyID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDiplomacyInfo"
}
, 
{
"doc"
:
"string () - Returns enum string"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDiplomacyPowerTypes"
}
, 
{
"doc"
:
"(DomainID) - CvInfo for DomainID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDomainInfo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEVENT_MESSAGE_TIME"
}
, 
{
"doc"
:
"(int (EffectTypes) eEffectID) - CvInfo for EffectID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEffectInfo"
}
, 
{
"doc"
:
"(EmphasizeID) - CvInfo for EmphasizeID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEmphasizeInfo"
}
, 
{
"doc"
:
"string () - Returns enum string"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEntityEventType"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getEraInfo"
}
, 
{
"doc"
:
"EspionageMissionInfo () - Returns info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionageMissionInfo"
}
, 
{
"doc"
:
"EventInfo () - Returns info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEventInfo"
}
, 
{
"doc"
:
"EventTriggerInfo () - Returns info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEventTriggerInfo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFEATURE_GROWTH_MODIFIER"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFIELD_OF_VIEW"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFOOD_CONSUMPTION_PER_POPULATION"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFORTIFY_MODIFIER_PER_TURN"
}
, 
{
"doc"
:
"FeatureArtInfo () - Returns info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureArtInfo"
}
, 
{
"doc"
:
"(FeatureID) - CvInfo for FeatureID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureInfo"
}
, 
{
"doc"
:
"string () - Returns enum string"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFlavorTypes"
}
, 
{
"doc"
:
"ForceControlInfo () - Returns Info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getForceControlInfo"
}
, 
{
"doc"
:
"string () - Returns enum string"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFunctionTypes"
}
, 
{
"doc"
:
"() - CyGame()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGame"
}
, 
{
"doc"
:
"GameOptionInfo () - Returns Info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGameOptionInfo"
}
, 
{
"doc"
:
"(GameSpeed Info) - CvInfo for GameSpeedID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGameSpeedInfo"
}
, 
{
"doc"
:
"(GoodyID) - CvInfo for GoodyID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoodyInfo"
}
, 
{
"doc"
:
"(GraphicOptionsInfoID) - GraphicOptionsInfo for GraphicOptionsInfo"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGraphicOptionsInfo"
}
, 
{
"doc"
:
"(GraphicOptionsInfoID) - GraphicOptionsInfo for GraphicOptionsInfo"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGraphicOptionsInfoByIndex"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHILLS_EXTRA_DEFENSE"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHILLS_EXTRA_MOVEMENT"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHILLS_SEE_FROM_CHANGE"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHILLS_SEE_THROUGH_CHANGE"
}
, 
{
"doc"
:
"(HandicapID) - CvInfo for HandicapID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHandicapInfo"
}
, 
{
"doc"
:
"Hints () - Returns info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHints"
}
, 
{
"doc"
:
"(HurryID) - CvInfo for HurryID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHurryInfo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getINVALID_PLOT_COORD"
}
, 
{
"doc"
:
"ImprovementArtInfo () - Returns info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementArtInfo"
}
, 
{
"doc"
:
"(ImprovementID) - CvInfo for ImprovementID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementInfo"
}
, 
{
"doc"
:
"int (string) - returns the info index with the matching type string"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInfoTypeForString"
}
, 
{
"doc"
:
"(InterfaceArtID) - CvArtInfo for InterfaceArtID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInterfaceArtInfo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLAKE_MAX_AREA_SIZE"
}
, 
{
"doc"
:
"(LeaderHeadID) - CvInfo for LeaderHeadID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLeaderHeadInfo"
}
, 
{
"doc"
:
"(LeaderheadID) - CvArtInfo for LeaderheadID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLeaderheadArtInfo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMAX_CITY_DEFENSE_DAMAGE"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMAX_CIV_PLAYERS"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMAX_CIV_TEAMS"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMAX_HIT_POINTS"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMAX_PLAYERS"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMAX_PLOT_LIST_ROWS"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMAX_TEAMS"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMIN_CITY_RANGE"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMIN_WATER_SIZE_FOR_OCEAN"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMOVE_DENOMINATOR"
}
, 
{
"doc"
:
"MPOptionInfo () - Returns Info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMPOptionInfo"
}
, 
{
"doc"
:
"MainMenus () - Returns info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMainMenus"
}
, 
{
"doc"
:
"() - CyMap()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMap"
}
, 
{
"doc"
:
"MemoryInfo (int id)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMemoryInfo"
}
, 
{
"doc"
:
"(MiscArtID) - CvArtInfo for MiscArtID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMiscArtInfo"
}
, 
{
"doc"
:
"(MissionID) - CvInfo for MissionID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMissionInfo"
}
, 
{
"doc"
:
"MonthInfo () - Returns Info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMonthInfo"
}
, 
{
"doc"
:
"(MovieArtID) - CvArtInfo for MovieArtID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMovieArtInfo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNUM_AND_TECH_PREREQS"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNUM_BUILDING_AND_TECH_PREREQS"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNUM_BUILDING_PREREQ_OR_BONUSES"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNUM_CITY_PLOTS"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNUM_CORPORATION_PREREQ_BONUSES"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNUM_OR_TECH_PREREQS"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNUM_ROUTE_PREREQ_OR_BONUSES"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNUM_UNIT_AND_TECH_PREREQS"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNUM_UNIT_PREREQ_OR_BONUSES"
}
, 
{
"doc"
:
"New Concept Info () - Returns info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNewConceptInfo"
}
, 
{
"doc"
:
"() - Total Action Infos XML\\Units\\CIV4ActionInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumActionInfos"
}
, 
{
"doc"
:
"int () - Returns number of AnimationOperatorTypes"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumAnimationOperatorTypes"
}
, 
{
"doc"
:
"int () - Returns number of ArtStyleTypes"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumArtStyleTypes"
}
, 
{
"doc"
:
"() - Total Automate Infos XML\\Units\\CIV4AutomateInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumAutomateInfos"
}
, 
{
"doc"
:
"int () - Returns number of BonusArtInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBonusArtInfos"
}
, 
{
"doc"
:
"() - Total Bonus Infos XML\\Terrain\\CIV4BonusInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBonusInfos"
}
, 
{
"doc"
:
"() - Total Build Infos XML\\Units\\CIV4BuildInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBuildInfos"
}
, 
{
"doc"
:
"int () - Returns number of BuildingArtInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBuildingArtInfos"
}
, 
{
"doc"
:
"() - Total Building Class Infos XML\\Buildings\\CIV4BuildingClassInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBuildingClassInfos"
}
, 
{
"doc"
:
"() - Total Building Infos XML\\Buildings\\CIV4BuildingInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBuildingInfos"
}
, 
{
"doc"
:
"int () - Returns NumCalendarInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCalendarInfos"
}
, 
{
"doc"
:
"int () - Returns number of CitySizeTypes"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCitySizeTypes"
}
, 
{
"doc"
:
"int () - Returns NumCityTabInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCityTabInfos"
}
, 
{
"doc"
:
"() - Total Civic Infos XML\\Misc\\CIV4CivicInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCivicInfos"
}
, 
{
"doc"
:
"() - Total Civic Infos XML\\Misc\\CIV4CivicOptionInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCivicOptionInfos"
}
, 
{
"doc"
:
"int () - Returns number of CivilizationArtInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCivilizationArtInfos"
}
, 
{
"doc"
:
"() - Total Civilization Infos XML\\Civilizations\\CIV4CivilizationInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCivilizationInfos"
}
, 
{
"doc"
:
"int () - Number of climate infos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumClimateInfos"
}
, 
{
"doc"
:
"() - Total Command Infos XML\\Units\\CIV4CommandInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCommandInfos"
}
, 
{
"doc"
:
"int () - NumConceptInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumConceptInfos"
}
, 
{
"doc"
:
"() - Total Control Infos XML\\Units\\CIV4ControlInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumControlInfos"
}
, 
{
"doc"
:
"() - Total Religion Infos XML\\GameInfo\\CIV4CorporationInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCorporationInfos"
}
, 
{
"doc"
:
"int () - Number of culture level infos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCultureLevelInfos"
}
, 
{
"doc"
:
"int () - Returns NumDenialInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumDenialInfos"
}
, 
{
"doc"
:
"() - Total diplomacy Infos XML\\GameInfo\\CIV4DiplomacyInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumDiplomacyInfos"
}
, 
{
"doc"
:
"int () - Number of effect infos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumEffectInfos"
}
, 
{
"doc"
:
"() - Total EmphasizeInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumEmphasizeInfos"
}
, 
{
"doc"
:
"int () - Returns number of EntityEventTypes"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumEntityEventTypes"
}
, 
{
"doc"
:
"int () - Number of era infos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumEraInfos"
}
, 
{
"doc"
:
"int () - Returns number of EspionageMissionInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumEspionageMissionInfos"
}
, 
{
"doc"
:
"int () - Returns number of EventInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumEventInfos"
}
, 
{
"doc"
:
"int () - Returns number of EventTriggerInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumEventTriggerInfos"
}
, 
{
"doc"
:
"int () - Returns number of FeatureArtInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumFeatureArtInfos"
}
, 
{
"doc"
:
"() - Total Feature Infos XML\\Terrain\\CIV4FeatureInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumFeatureInfos"
}
, 
{
"doc"
:
"int () - Returns number of FlavorTypes"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumFlavorTypes"
}
, 
{
"doc"
:
"int () - Returns NumForceControlInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumForceControlInfos"
}
, 
{
"doc"
:
"int () - Returns NumGameOptionInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumGameOptionInfos"
}
, 
{
"doc"
:
"() - Total Game speed Infos XML\\GameInfo\\CIV4GameSpeedInfo.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumGameSpeedInfos"
}
, 
{
"doc"
:
"() - Total Goody Infos XML\\GameInfo\\CIV4GoodyInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumGoodyInfos"
}
, 
{
"doc"
:
"() - Total Handicap Infos XML\\GameInfo\\CIV4HandicapInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumHandicapInfos"
}
, 
{
"doc"
:
"int () - Returns number of Hints"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumHints"
}
, 
{
"doc"
:
"() - Total Hurry Infos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumHurryInfos"
}
, 
{
"doc"
:
"int () - Returns number of ImprovementArtInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumImprovementArtInfos"
}
, 
{
"doc"
:
"() - Total Improvement Infos XML\\Terrain\\CIV4ImprovementInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumImprovementInfos"
}
, 
{
"doc"
:
"() - Total InterfaceArtnology Infos XML\\InterfaceArtnologies\\CIV4InterfaceArtInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumInterfaceArtInfos"
}
, 
{
"doc"
:
"() - Total LeaderHead Infos XML\\Civilizations\\CIV4LeaderHeadInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumLeaderHeadInfos"
}
, 
{
"doc"
:
"int () - Returns number of LeaderHeadArtInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumLeaderheadArtInfos"
}
, 
{
"doc"
:
"int () - Returns NumMPOptionInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumMPOptionInfos"
}
, 
{
"doc"
:
"int () - Returns number"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumMainMenus"
}
, 
{
"doc"
:
"() - Total MiscArtnology Infos XML\\MiscArt\\CIV4MiscArtInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumMiscArtInfos"
}
, 
{
"doc"
:
"() - Total Mission Infos XML\\Units\\CIV4MissionInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumMissionInfos"
}
, 
{
"doc"
:
"int () - Returns NumMonthInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumMonthInfos"
}
, 
{
"doc"
:
"() - Total MovieArt Infos XML\\MovieArtInfos\\CIV4ArtDefines.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumMovieArtInfos"
}
, 
{
"doc"
:
"int () - NumNewConceptInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumNewConceptInfos"
}
, 
{
"doc"
:
"() - Total # of Playable Civs"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumPlayableCivilizationInfos"
}
, 
{
"doc"
:
"int () - Returns number of PlayerColorInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumPlayerColorInfos"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getNumPlayerOptionInfos"
}
, 
{
"doc"
:
"() - Total ProcessInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumProcessInfos"
}
, 
{
"doc"
:
"() - Total Project Infos XML\\GameInfo\\CIV4ProjectInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumProjectInfos"
}
, 
{
"doc"
:
"() - Total Promotion Infos XML\\Units\\CIV4PromotionInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumPromotionInfos"
}
, 
{
"doc"
:
"int () - Returns number of QuestInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumQuestInfos"
}
, 
{
"doc"
:
"() - Total Religion Infos XML\\GameInfo\\CIV4ReligionInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumReligionInfos"
}
, 
{
"doc"
:
"() - Total Route Infos XML\\Misc\\CIV4RouteInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumRouteInfos"
}
, 
{
"doc"
:
"int () - Number of seal level infos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumSeaLevelInfos"
}
, 
{
"doc"
:
"int () - Returns NumSeasonInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumSeasonInfos"
}
, 
{
"doc"
:
"() - Total Special Building Infos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumSpecialBuildingInfos"
}
, 
{
"doc"
:
"() - Total SpecialUnit Infos XML\\Units\\CIV4SpecialUnitInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumSpecialUnitInfos"
}
, 
{
"doc"
:
"() - Total Specialist Infos XML\\Units\\CIV4SpecialistInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumSpecialistInfos"
}
, 
{
"doc"
:
"() - Total Technology Infos XML\\Technologies\\CIV4TechInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTechInfos"
}
, 
{
"doc"
:
"int () - Returns number of TerrainArtInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTerrainArtInfos"
}
, 
{
"doc"
:
"() - Total Terrain Infos XML\\Terrain\\CIV4TerrainInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTerrainInfos"
}
, 
{
"doc"
:
"() - Total Civilization Infos XML\\Civilizations\\CIV4TraitInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTraitInfos"
}
, 
{
"doc"
:
"() - Total Turn timer Infos XML\\GameInfo\\CIV4TurnTimerInfo.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTurnTimerInfos"
}
, 
{
"doc"
:
"int () - Returns number of TutorialInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTutorialInfos"
}
, 
{
"doc"
:
"() - Total UnitArtnology Infos XML\\UnitArt\\CIV4UnitArtInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnitArtInfos"
}
, 
{
"doc"
:
"int () - Returns number of UnitArtStyleTypes"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnitArtStyleTypeInfos"
}
, 
{
"doc"
:
"() - Total Unit Class Infos XML\\Units\\CIV4UnitClassInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnitClassInfos"
}
, 
{
"doc"
:
"() - Total Unit Combat Infos XML\\Units\\CIV4UnitCombatInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnitCombatInfos"
}
, 
{
"doc"
:
"() - Total Unit Infos XML\\Units\\CIV4UnitInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnitInfos"
}
, 
{
"doc"
:
"int () - Number of upkeep infos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUpkeepInfos"
}
, 
{
"doc"
:
"() - Total Victory Infos XML\\GameInfo\\CIV4VictoryInfos.xml"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumVictoryInfos"
}
, 
{
"doc"
:
"() - Total VoteInfos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumVoteInfos"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumVoteSourceInfos"
}
, 
{
"doc"
:
"int () - Number of world infos"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumWorldInfos"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPEAK_SEE_FROM_CHANGE"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPEAK_SEE_THROUGH_CHANGE"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPERCENT_ANGER_DIVISOR"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPLOT_SIZE"
}
, 
{
"doc"
:
"(iPlayer) - iPlayer instance"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayer"
}
, 
{
"doc"
:
"PlayerColorInfo (int id)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerColorInfo"
}
, 
{
"doc"
:
"(PlayerOptionsInfoID) - PlayerOptionsInfo for PlayerOptionsInfo"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerOptionsInfo"
}
, 
{
"doc"
:
"(PlayerOptionsInfoID) - PlayerOptionsInfo for PlayerOptionsInfo"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerOptionsInfoByIndex"
}
, 
{
"doc"
:
"(ProcessID) - CvInfo for ProcessID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProcessInfo"
}
, 
{
"doc"
:
"(ProjectID) - CvInfo for ProjectID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProjectInfo"
}
, 
{
"doc"
:
"(PromotionID) - CvInfo for PromotionID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPromotionInfo"
}
, 
{
"doc"
:
"QuestInfo () - Returns info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getQuestInfo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRIVER_ATTACK_MODIFIER"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getROUTE_FEATURE_GROWTH_MODIFIER"
}
, 
{
"doc"
:
"(ReligionID) - CvInfo for ReligionID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionInfo"
}
, 
{
"doc"
:
"(RouteID) - CvInfo for RouteID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRouteInfo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSEAWATER_SEE_FROM_CHANGE"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSHADOW_SCALE"
}
, 
{
"doc"
:
"CvSeaLevelInfo - (SeaLevelTypeID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSeaLevelInfo"
}
, 
{
"doc"
:
"SeasonInfo () - Returns Info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSeasonInfo"
}
, 
{
"doc"
:
"(SpecialBuildingID) - CvInfo for SpecialBuildingID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialBuildingInfo"
}
, 
{
"doc"
:
"(UnitID) - CvInfo for UnitID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialUnitInfo"
}
, 
{
"doc"
:
"(SpecialistID) - CvInfo for SpecialistID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialistInfo"
}
, 
{
"doc"
:
"(iTeam) - iTeam instance"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTeam"
}
, 
{
"doc"
:
"(TechID) - CvInfo for TechID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechInfo"
}
, 
{
"doc"
:
"TerrainArtInfo () - Returns info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainArtInfo"
}
, 
{
"doc"
:
"(int (TerrainTypes) eTerrainID) - CvInfo for TerrainID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainInfo"
}
, 
{
"doc"
:
"(TraitID) - CvInfo for TraitID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTraitInfo"
}
, 
{
"doc"
:
"(TurnTimer Info) - CvInfo for TurnTimerID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTurnTimerInfo"
}
, 
{
"doc"
:
"TutorialInfo () - Returns info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTutorialInfo"
}
, 
{
"doc"
:
"int (string) - returns the type enum from a type string"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTypesEnum"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUNIT_MULTISELECT_DISTANCE"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUNIT_MULTISELECT_MAX"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUSE_SPIES_NO_ENTER_BORDERS"
}
, 
{
"doc"
:
"UnitAIInfo (int id)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitAIInfo"
}
, 
{
"doc"
:
"(UnitID) - CvArtInfo for UnitID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitArtInfo"
}
, 
{
"doc"
:
"(UnitArtStyleTypeID) - CvInfo for UnitArtStyleTypeID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitArtStyleTypeInfo"
}
, 
{
"doc"
:
"(UnitClassID) - CvInfo for UnitClassID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitClassInfo"
}
, 
{
"doc"
:
"(UnitCombatID) - CvInfo for UnitCombatID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitCombatInfo"
}
, 
{
"doc"
:
"(UnitID) - CvInfo for UnitID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitInfo"
}
, 
{
"doc"
:
"(UpkeepInfoID) - CvInfo for upkeep info"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUpkeepInfo"
}
, 
{
"doc"
:
"(VictoryID) - CvInfo for VictoryID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVictoryInfo"
}
, 
{
"doc"
:
"(VoteID) - CvInfo for VoteID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVoteInfo"
}
, 
{
"doc"
:
"Returns info object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVoteSourceInfo"
}
, 
{
"doc"
:
"CvWorldInfo - (WorldTypeID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWorldInfo"
}
, 
{
"doc"
:
"(YieldID) - CvInfo for YieldID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldInfo"
}
, 
{
"doc"
:
"() - returns true if running a debug build"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDebugBuild"
}
, 
{
"doc"
:
"void setDefineFLOAT( string szName, float fValue )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setDefineFLOAT"
}
, 
{
"doc"
:
"void ( string szName, int iValue )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setDefineINT"
}
, 
{
"doc"
:
"void ( string szName, string szValue )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setDefineSTRING"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyGlobeLayer"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"const char* getButtonStyle()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButtonStyle"
}
, 
{
"doc"
:
"int getCurrentOption()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCurrentOption"
}
, 
{
"doc"
:
"const char* getName()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getName"
}
, 
{
"doc"
:
"int getNumLayers()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumOptions"
}
, 
{
"doc"
:
"std::wstring getOptionName(int iOptionID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOptionName"
}
, 
{
"doc"
:
"bool isGlobeviewRequired()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGlobeviewRequired"
}
, 
{
"doc"
:
"bool isNone()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"bool shouldCitiesZoom()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"shouldCitiesZoom"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyGlobeLayerManager"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"CvGlobeLayer* getCurrentLayer"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCurrentLayer"
}
, 
{
"doc"
:
"int getCurrentLayerID()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCurrentLayerID"
}
, 
{
"doc"
:
"const TCHAR* getCurrentLayerName()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCurrentLayerName"
}
, 
{
"doc"
:
"CvGlobeLayer* getLayer(int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLayer"
}
, 
{
"doc"
:
"int getLayerID(const TCHAR*)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLayerID"
}
, 
{
"doc"
:
"int getNumLayers()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumLayers"
}
, 
{
"doc"
:
"void setCurrentLayer()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCurrentLayer"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyHallOfFameInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumGames"
}
, 
{
"doc"
:
"CyReplayInfo* (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReplayInfo"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"loadReplays"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyInterface"
, 
"members"
:
[
{
"doc"
:
"bool (string szSoundtrackScript)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"DoSoundtrack"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void (int /*PlayerTypes*/ ePlayer, wstring szString)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addCombatMessage"
}
, 
{
"doc"
:
"void (wstring szString, string szSound)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addImmediateMessage"
}
, 
{
"doc"
:
"void (int /*PlayerTypes*/ ePlayer, bool bForce, int iLength, wstring szString, string szSound = NULL, int /*InterfaceMessageTypes*/ eType = MESSAGE_TYPE_INFO, string szIcon = NULL, ColorTypes eFlashColor = NO_COLOR, int iFlashX = -1, int iFlashY = -1, bool bShowOffScreenArrows = false, bool bShowOnScreenArrows = false)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addMessage"
}
, 
{
"doc"
:
"void (int /*PlayerTypes*/ ePlayer, wstring szString)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addQuestMessage"
}
, 
{
"doc"
:
"void (CyCity* pNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSelectedCity"
}
, 
{
"doc"
:
"void (CyPlot *)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"cacheInterfacePlotUnits"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canCreateGroup"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canDeleteGroup"
}
, 
{
"doc"
:
"bool (int iAction, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canHandleAction"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canSelectHeadUnit"
}
, 
{
"doc"
:
"void (int /*PlayerTypes*/ ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"checkFlashReset"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"checkFlashUpdate"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"clearSelectedCities"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"clearSelectionList"
}
, 
{
"doc"
:
"int (int iI)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countEntities"
}
, 
{
"doc"
:
"int (wstring szBuffer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"determineWidth"
}
, 
{
"doc"
:
"void (int iX, int iY, int /*PlayerTypes*/ ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"doPing"
}
, 
{
"doc"
:
"void (string szOutputText )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"endTimer"
}
, 
{
"doc"
:
"void (std::string szLoadFile)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"exitingToMainMenu"
}
, 
{
"doc"
:
"tuple ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getActionsToShow"
}
, 
{
"doc"
:
"CyUnit* (index)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCachedInterfacePlotUnit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityTabSelectionRow"
}
, 
{
"doc"
:
"CyPlot* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCursorPlot"
}
, 
{
"doc"
:
"EndTurnButtonStates ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEndTurnState"
}
, 
{
"doc"
:
"CyPlot* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGotoPlot"
}
, 
{
"doc"
:
"CyCity* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHeadSelectedCity"
}
, 
{
"doc"
:
"CyUnit* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHeadSelectedUnit"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHelpString"
}
, 
{
"doc"
:
"CyPlot* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHighlightPlot"
}
, 
{
"doc"
:
"InterfaceModeTypes ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInterfaceMode"
}
, 
{
"doc"
:
"CyUnit* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInterfacePlotUnit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLengthSelectionList"
}
, 
{
"doc"
:
"CyPlot* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMouseOverPlot"
}
, 
{
"doc"
:
"POINT getMousePos() - returns the mouse coords"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMousePos"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCachedInterfacePlotUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumOrdersQueued"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumVisibleUnits"
}
, 
{
"doc"
:
"int (int iNode)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOrderNodeData1"
}
, 
{
"doc"
:
"int (int iNode)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOrderNodeData2"
}
, 
{
"doc"
:
"bool (int iNode)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOrderNodeSave"
}
, 
{
"doc"
:
"OrderTypes (int iNode)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOrderNodeType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlotListColumn"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlotListOffset"
}
, 
{
"doc"
:
"CyPlot* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSelectionPlot"
}
, 
{
"doc"
:
"CyUnit* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSelectionUnit"
}
, 
{
"doc"
:
"InterfaceVisibility ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getShowInterface"
}
, 
{
"doc"
:
"void (CyUnit* pUnit, bool bClear, bool bToggle, bool bGroup, bool bSound)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"insertIntoSelectionList"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCityScreenUp"
}
, 
{
"doc"
:
"bool (CyCity* pCity)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCitySelected"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCitySelection"
}
, 
{
"doc"
:
"bool (InterfaceDirtyBits eDirty)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDirty"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFlashing"
}
, 
{
"doc"
:
"bool (int iPlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFlashingPlayer"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFocused"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFocusedWidget"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isInAdvancedStart"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isInMainMenu"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isLeftMouseDown"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNetStatsVisible"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOOSVisible"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOneCitySelected"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRightMouseDown"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isScoresMinimized"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isScoresVisible"
}
, 
{
"doc"
:
"bool (int iEnumVal)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isScreenUp"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isUnitFocus"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isYieldVisibleMode"
}
, 
{
"doc"
:
"void (int iCity, int iBuilding)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"lookAtCityBuilding"
}
, 
{
"doc"
:
"void (int iCity)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"lookAtCityOffset"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"makeInterfaceDirty"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"mirrorsSelectionGroup"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"noTechSplash"
}
, 
{
"doc"
:
"void (string pszSound)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"playAdvisorSound"
}
, 
{
"doc"
:
"void (string pszSound)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"playGeneralSound"
}
, 
{
"doc"
:
"void (int iScriptID, CyPlot*)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"playGeneralSoundAtPlot"
}
, 
{
"doc"
:
"void (int iScriptID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"playGeneralSoundByID"
}
, 
{
"doc"
:
"void (CyUnit* pUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"removeFromSelectionList"
}
, 
{
"doc"
:
"void (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"selectAll"
}
, 
{
"doc"
:
"void (CyCity* pNewValue, bool bTestProduction)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"selectCity"
}
, 
{
"doc"
:
"void (CyUnit* pUnit, bool bShift, bool bCtrl, bool bAlt)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"selectGroup"
}
, 
{
"doc"
:
"int (int iHotKeyNumber)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"selectHotKeyUnit"
}
, 
{
"doc"
:
"void (CyUnit* pUnit, bool bClear, bool bToggle, bool bSound)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"selectUnit"
}
, 
{
"doc"
:
"void (bool)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setBusy"
}
, 
{
"doc"
:
"void (int/*CityTabTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCityTabSelectionRow"
}
, 
{
"doc"
:
"void (InterfaceDirtyBits eDirty, bool bDirty)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setDirty"
}
, 
{
"doc"
:
"void (InterfaceModeTypes)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setInterfaceMode"
}
, 
{
"doc"
:
"void ( bool bPausedPopups )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPausedPopups"
}
, 
{
"doc"
:
"void (InterfaceVisibility eInterfaceVisibility)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setShowInterface"
}
, 
{
"doc"
:
"void (bool)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSoundSelectionReady"
}
, 
{
"doc"
:
"void (bool bTurnOn)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setWorldBuilder"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"shiftKey"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"shouldDisplayEndTurn"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"shouldDisplayEndTurnButton"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"shouldDisplayFlag"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"shouldDisplayReturn"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"shouldDisplayUnitModel"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"shouldDisplayWaitingOthers"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"shouldDisplayWaitingYou"
}
, 
{
"doc"
:
"bool (int iPlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"shouldFlash"
}
, 
{
"doc"
:
"bool (int iAction)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"shouldShowAction"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"shouldShowResearchButtons"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"startTimer"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"stop2DSound"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"stopAdvisorSound"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"toggleBareMapMode"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"toggleMusicOn"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"toggleNetStatsVisible"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"toggleScoresMinimized"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"toggleScoresVisible"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"toggleYieldVisibleMode"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyMap"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"finds the shortest passable path between two CyPlots and returns its length, or returns -1 if no such path exists. Note: the path must be all-land or all-water"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculatePathDistance"
}
, 
{
"doc"
:
"() - erases the plots"
, 
"type"
:
"instancemethod"
, 
"name"
:
"erasePlots"
}
, 
{
"doc"
:
"CyArea* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"findBiggestArea"
}
, 
{
"doc"
:
"CyCity* (int iX, int iY, int (PlayerTypes) eOwner = NO_PLAYER, int (TeamTypes) eTeam = NO_TEAM, bool bSameArea = true, bool bCoastalOnly = false, int (TeamTypes) eTeamAtWarWith = NO_TEAM, int (DirectionTypes) eDirection = NO_DIRECTION, CvCity* pSkipCity = NULL) - finds city"
, 
"type"
:
"instancemethod"
, 
"name"
:
"findCity"
}
, 
{
"doc"
:
"CvSelectionGroup* (int iX, int iY, int /*PlayerTypes*/ eOwner, bool bReadyToSelect, bool bWorkers)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"findSelectionGroup"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, int iRange, bool bFreshWater)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"findWater"
}
, 
{
"doc"
:
"CyArea (iID) - get CyArea at iID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getArea"
}
, 
{
"doc"
:
"int () - bottom latitude (usually -90)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBottomLatitude"
}
, 
{
"doc"
:
"ClimateTypes () - climate of the world"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getClimate"
}
, 
{
"doc"
:
"CustomMapOptionTypes () - user defined map setting at this option id"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCustomMapOption"
}
, 
{
"doc"
:
"int () - the height of the map, in plots"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGridHeight"
}
, 
{
"doc"
:
"int () - the width of the map, in plots"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGridWidth"
}
, 
{
"doc"
:
"int () - index for handling NULL areas"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getIndexAfterLastArea"
}
, 
{
"doc"
:
"int () - total land plots"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLandPlots"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMapFractalFlags"
}
, 
{
"doc"
:
"wstring () - name of the map script"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMapScriptName"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNextRiverID"
}
, 
{
"doc"
:
"int () - total areas"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumAreas"
}
, 
{
"doc"
:
"int () - total bonuses"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBonuses"
}
, 
{
"doc"
:
"int () - total bonuses on land plots"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumBonusesOnLand"
}
, 
{
"doc"
:
"int () - number of custom map settings"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCustomMapOptions"
}
, 
{
"doc"
:
"int () - total land areas"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumLandAreas"
}
, 
{
"doc"
:
"int () - total owned plots"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOwnedPlots"
}
, 
{
"doc"
:
"SeaLevelTypes () - sealevel of the world"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSeaLevel"
}
, 
{
"doc"
:
"int () - top latitude (usually 90)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTopLatitude"
}
, 
{
"doc"
:
"WorldSizeTypes () - size of the world"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWorldSize"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"incrementNextRiverID"
}
, 
{
"doc"
:
"bool () - valid CyMap() interface"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"bool (iX,iY) - is (iX, iY) a valid plot?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPlot"
}
, 
{
"doc"
:
"bool () - whether the map wraps in the X axis"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWrapX"
}
, 
{
"doc"
:
"bool () - whether the map wraps in the Y axis"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWrapY"
}
, 
{
"doc"
:
"int () - total plots in the map"
, 
"type"
:
"instancemethod"
, 
"name"
:
"numPlots"
}
, 
{
"doc"
:
"CyPlot (iX,iY) - get CyPlot at (iX,iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"plot"
}
, 
{
"doc"
:
"CyPlot (iIndex) - get a plot by its Index"
, 
"type"
:
"instancemethod"
, 
"name"
:
"plotByIndex"
}
, 
{
"doc"
:
"int (iX,iY) - the index for a given plot"
, 
"type"
:
"instancemethod"
, 
"name"
:
"plotNum"
}
, 
{
"doc"
:
"int (iIndex) - given the index of a plot, returns its X coordinate"
, 
"type"
:
"instancemethod"
, 
"name"
:
"plotX"
}
, 
{
"doc"
:
"int (iIndex) - given the index of a plot, returns its Y coordinate"
, 
"type"
:
"instancemethod"
, 
"name"
:
"plotY"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"pointToPlot"
}
, 
{
"doc"
:
"used to initialize the map during WorldBuilder load"
, 
"type"
:
"instancemethod"
, 
"name"
:
"rebuild"
}
, 
{
"doc"
:
"void () - Recalculates the areaID for each plot. Should be preceded by CyMap.setPlotTypes(...)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"recalculateAreas"
}
, 
{
"doc"
:
"used to regenerate everything but the terrain and height maps"
, 
"type"
:
"instancemethod"
, 
"name"
:
"regenerateGameElements"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"resetPathDistance"
}
, 
{
"doc"
:
"CyPlot (iX,iY) - static - get CyPlot at (iX,iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"sPlot"
}
, 
{
"doc"
:
"CyPlot (iIndex) - static - get plot by iIndex"
, 
"type"
:
"instancemethod"
, 
"name"
:
"sPlotByIndex"
}
, 
{
"doc"
:
"void (int /*PlotTypes*/ ePlotType) - sets all plots to ePlotType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setAllPlotTypes"
}
, 
{
"doc"
:
"void (int /*TeamTypes*/ eTeam, bool bNewValue, bool bTerrainOnly) - reveals the plots to eTeam"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setRevealedPlots"
}
, 
{
"doc"
:
"CyPlot* (iFlags,iArea,iMinUnitDistance,iTimeout) - random plot based on conditions"
, 
"type"
:
"instancemethod"
, 
"name"
:
"syncRandPlot"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"updateFog"
}
, 
{
"doc"
:
"void (CyArea* pArea)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"updateMinOriginalStartDist"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"updateMinimapColor"
}
, 
{
"doc"
:
"() - updates the plots visibility"
, 
"type"
:
"instancemethod"
, 
"name"
:
"updateVisibility"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyMapGenerator"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addBonuses"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addFeatures"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addGameElements"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addGoodies"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addLakes"
}
, 
{
"doc"
:
"void (int /*BonusTypes*/ eBonusType)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addNonUniqueBonusType"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addRivers"
}
, 
{
"doc"
:
"void (int /*BonusTypes*/ eBonusType)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addUniqueBonusType"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"afterGeneration"
}
, 
{
"doc"
:
"bool (int /*BonusTypes*/ eBonus, int iX, int iY, bool bIgnoreLatitude)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canPlaceBonusAt"
}
, 
{
"doc"
:
"bool (int /*ImprovementTypes*/ eImprovement, int iX, int iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canPlaceGoodyAt"
}
, 
{
"doc"
:
"void (CyPlot* pStartPlot, int /*CardinalDirectionTypes*/ eCardinalDirection)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"doRiver"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"eraseBonuses"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"eraseFeatures"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"eraseGoodies"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"eraseRivers"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"generatePlotTypes"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"generateRandomMap"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"generateTerrain"
}
, 
{
"doc"
:
"bool () - valid CyMapGenerator() interface"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"void (list lPlotTypes) - set plot types to the contents of the given list"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPlotTypes"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyMessageControl"
, 
"members"
:
[
{
"doc"
:
"int (int iPlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetConnState"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetFirstBadConnection"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void (int /*AdvancedStartActionTypes*/ eAction, int /*PlayerTypes*/ ePlayer, int iX, int iY, int iData, bool bAdd)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"sendAdvancedStartAction"
}
, 
{
"doc"
:
"void ( int /*ReligionTypes*/ iReligion )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"sendConvert"
}
, 
{
"doc"
:
"void (int iCity, int eTask, int iData1, int iData2, bool bOption, bool bAlt, bool bShift, bool bCtrl)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"sendDoTask"
}
, 
{
"doc"
:
"void (int /*PlayerTypes*/ ePlayer, int iAreaId)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"sendEmpireSplit"
}
, 
{
"doc"
:
"void (int /*TeamTypes*/ eTargetTeam, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"sendEspionageSpendingWeightChange"
}
, 
{
"doc"
:
"void (int iData1, int iData2, int iData3, int iData4, int iData5) - This is a NetMessage designed specifically for modders to use to make their mods Multiplayer friendly, eliminating Out-of-Sync errors. Check out 'onModNetMessage()' in CvEventManager for the callback"
, 
"type"
:
"instancemethod"
, 
"name"
:
"sendModNetMessage"
}
, 
{
"doc"
:
"void (int /*PlayerOptionTypes*/ eOption, bool bValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"sendPlayerOption"
}
, 
{
"doc"
:
"void (int iCityID, int eOrder, int iData, bool bAlt, bool bShift, bool bCtrl)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"sendPushOrder"
}
, 
{
"doc"
:
"void (int eTech, bool bShift)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"sendResearch"
}
, 
{
"doc"
:
"void () - allows you to force a turn to end"
, 
"type"
:
"instancemethod"
, 
"name"
:
"sendTurnComplete"
}
, 
{
"doc"
:
"void (list iCivics)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"sendUpdateCivics"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyPlayer"
, 
"members"
:
[
{
"doc"
:
"void (int /*PlayerTypes*/ eIndex, int iChange) - Changes the extra attitude for this player - usually scenario specific"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_changeAttitudeExtra"
}
, 
{
"doc"
:
"void (/*PlayerTypes*/ eIndex1, /*MemoryTypes*/ eIndex2, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_changeMemoryCount"
}
, 
{
"doc"
:
"int (int /*CivicTypes*/ eCivic)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_civicValue"
}
, 
{
"doc"
:
"bool (int /*PlayerTypes*/)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_demandRebukedWar"
}
, 
{
"doc"
:
"int (int, int, int, bool)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_foundValue"
}
, 
{
"doc"
:
"AttitudeTypes (int /*PlayerTypes*/) - Gets the attitude of the player towards the player passed in"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_getAttitude"
}
, 
{
"doc"
:
"int (int /*PlayerTypes*/ eIndex) - Returns the extra attitude for this player - usually scenario specific"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_getAttitudeExtra"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_getExtraGoldTarget"
}
, 
{
"doc"
:
"int (/*PlayerTypes*/ eIndex1, /*MemoryTypes*/ eIndex2)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_getMemoryCount"
}
, 
{
"doc"
:
"int (UnitAIType) - Returns # of UnitAITypes the player current has of UnitAIType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_getNumAIUnits"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_isFinancialTrouble"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_maxGoldPerTurnTrade"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_maxGoldTrade"
}
, 
{
"doc"
:
"void (int /*PlayerTypes*/ eIndex, int iNewValue) - Sets the extra attitude for this player - usually scenario specific"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_setAttitudeExtra"
}
, 
{
"doc"
:
"void (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_setExtraGoldTarget"
}
, 
{
"doc"
:
"int (CyArea* pArea, int /*UnitAITypes*/ eUnitAI)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_totalAreaUnitAIs"
}
, 
{
"doc"
:
"int (int /*UnitAITypes*/ eUnitAI)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_totalUnitAIs"
}
, 
{
"doc"
:
"int (CyArea* pArea, int /*UnitAITypes*/ eUnitAI)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_totalWaterAreaUnitAIs"
}
, 
{
"doc"
:
"int (int /*UnitTypes*/ eUnit, int /*UnitAITypes*/ eUnitAI, CyArea* pArea)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_unitValue"
}
, 
{
"doc"
:
"void (bool bStartingLoc)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_updateFoundValues"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void (CyCity* pCity, bool bConquest, bool bTrade)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"acquireCity"
}
, 
{
"doc"
:
"void (std::wstring szName)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addCityName"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateBaseNetResearch"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateGoldRate"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateInflatedCosts"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateInflationRate"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculatePreInflatedCosts"
}
, 
{
"doc"
:
"int (int /*TechTypes*/ eTech)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateResearchModifier"
}
, 
{
"doc"
:
"int (int /*TechTypes*/ eTech)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateResearchRate"
}
, 
{
"doc"
:
"int () - Returns the total sum of all city Happiness values"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateTotalCityHappiness"
}
, 
{
"doc"
:
"int () - Returns the total sum of all city Healthiness values"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateTotalCityHealthiness"
}
, 
{
"doc"
:
"int () - Returns the total sum of all city Unhappiness values"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateTotalCityUnhappiness"
}
, 
{
"doc"
:
"int () - Returns the total sum of all city Unhealthiness values"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateTotalCityUnhealthiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateTotalCommerce"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/ eYield) - Returns the total sum of all city gold generated for other civs via trade routes"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateTotalExports"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/ eYield) - Returns the total sum of all city gold generated for this civ via trade routes with others"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateTotalImports"
}
, 
{
"doc"
:
"int (int /*YieldTypes*/ eYield) - Returns the total sum of all city yield"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateTotalYield"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateUnitCost"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateUnitSupply"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, int (BuildTypes) eBuild, bool bTestEra, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canBuild"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canChangeReligion"
}
, 
{
"doc"
:
"bool (int /*BuildingTypes*/eBuilding, bool bContinue, bool bTestVisible, bool bIgnoreCost)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canConstruct"
}
, 
{
"doc"
:
"bool (int ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canContact"
}
, 
{
"doc"
:
"bool (int /*ReligionTypes*/ iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canConvert"
}
, 
{
"doc"
:
"bool (int /*ProjectTypes*/ eProject, bool bContinue, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canCreate"
}
, 
{
"doc"
:
"bool (int (CivicTypes) eCivic)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canDoCivics"
}
, 
{
"doc"
:
"bool (EspionageMissionTypes eMission, PlayerTypes eTargetPlayer, CyPlot* pPlot, int iExtraData)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canDoEspionageMission"
}
, 
{
"doc"
:
"int (int /*ReligionTypes*/ eReligion)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canDoReligion"
}
, 
{
"doc"
:
"bool (int /*TechTypes*/ iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canEverResearch"
}
, 
{
"doc"
:
"bool (int iX, int iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canFound"
}
, 
{
"doc"
:
"bool (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canHaveTradeRoutesWith"
}
, 
{
"doc"
:
"int (int (HurryTypes) eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canHurry"
}
, 
{
"doc"
:
"bool (int /*ProcessTypes*/ eProcess, bool bContinue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canMaintain"
}
, 
{
"doc"
:
"bool (CyCity pCity)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canRaze"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, int /*GoodyTypes*/ eGoody, CyUnit* pUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canReceiveGoody"
}
, 
{
"doc"
:
"bool (int /*TechTypes*/ iIndex, bool bTrade)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canResearch"
}
, 
{
"doc"
:
"bool (int (CivicTypes*) paeNewCivics)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canRevolution"
}
, 
{
"doc"
:
"bool (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canSplitArea"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canSplitEmpire"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/ eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canStopTradingWithTeam"
}
, 
{
"doc"
:
"bool (int ePlayer, bool bTestDenial)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canTradeItem"
}
, 
{
"doc"
:
"bool (int (PlayerTypes) iPlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canTradeNetworkWith"
}
, 
{
"doc"
:
"bool (int ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canTradeWith"
}
, 
{
"doc"
:
"bool (int eUnit, bool bContinue, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canTrain"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeAdvancedStartPoints"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeAnarchyTurns"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeAssets"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeCoastalTradeRoutes"
}
, 
{
"doc"
:
"void (int) - Combat experience used to produce Warlords"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeCombatExperience"
}
, 
{
"doc"
:
"int (CommerceTypes eIndex, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeCommercePercent"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeConscriptCount"
}
, 
{
"doc"
:
"void (TeamTypes eIndex, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeEspionageSpendingWeightAgainstTeam"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeExtraHappiness"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeGold"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeGoldenAgeTurns"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeNumUnitGoldenAges"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeStateReligionBuildingProductionModifier"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeStateReligionUnitProductionModifier"
}
, 
{
"doc"
:
"void (int iDiscover, wstring szText, bool bFront)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"chooseTech"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"clearResearchQueue"
}
, 
{
"doc"
:
"void (int ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"contact"
}
, 
{
"doc"
:
"void (int /*ReligionTypes*/ iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"convert"
}
, 
{
"doc"
:
"int (int /*FeatureTypes*/ eFeature) - Returns ?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countCityFeatures"
}
, 
{
"doc"
:
"int (CorporationTypes) - Counts the # of corporations this player has"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countCorporations"
}
, 
{
"doc"
:
"int () - Counts the # of headquarters this player has"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countHeadquarters"
}
, 
{
"doc"
:
"int () - Counts the # of holy cities this player has"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countHolyCities"
}
, 
{
"doc"
:
"int (int /*BuildingTypes*/ eBuilding) - Returns the number of buildings?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countNumBuildings"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countNumCoastalCities"
}
, 
{
"doc"
:
"(int (CyArea* pArea)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countNumCoastalCitiesByArea"
}
, 
{
"doc"
:
"int (int (BonusTypes) eBonus) - "
, 
"type"
:
"instancemethod"
, 
"name"
:
"countOwnedBonuses"
}
, 
{
"doc"
:
"int (CyArea* pIgnoreArea) - Returns the number of potential foreign trade cities"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countPotentialForeignTradeCities"
}
, 
{
"doc"
:
"int () - Returns the number of potential foreign trade cities which are also connected to this player's capital"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countPotentialForeignTradeCitiesConnected"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countTotalCulture"
}
, 
{
"doc"
:
"int () - "
, 
"type"
:
"instancemethod"
, 
"name"
:
"countTotalHasCorporation"
}
, 
{
"doc"
:
"int () - "
, 
"type"
:
"instancemethod"
, 
"name"
:
"countTotalHasReligion"
}
, 
{
"doc"
:
"int (int (CyArea* pArea, CyPlot* pFromPlot) - "
, 
"type"
:
"instancemethod"
, 
"name"
:
"countUnimprovedBonuses"
}
, 
{
"doc"
:
"void (int /*UnitTypes*/ eGreatPersonUnit, bool bIncrementThreshold, int iX, int iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createGreatPeople"
}
, 
{
"doc"
:
"void (CyCity pCity)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"disband"
}
, 
{
"doc"
:
"void (bool bAnnounce)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"disbandUnit"
}
, 
{
"doc"
:
"void (EspionageMissionTypes eMission, PlayerTypes eTargetPlayer, CyPlot* pPlot, int iExtraData, CyUnit* pUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"doEspionageMission"
}
, 
{
"doc"
:
"void (CyPlot* pPlot, CyUnit* pUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"doGoody"
}
, 
{
"doc"
:
"int () - Finds best found value"
, 
"type"
:
"instancemethod"
, 
"name"
:
"findBestFoundValue"
}
, 
{
"doc"
:
"int () - "
, 
"type"
:
"instancemethod"
, 
"name"
:
"findHighestHasReligionCount"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"findNewCapital"
}
, 
{
"doc"
:
"int (int (TechTypes) eTech, bool bCost)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"findPathLength"
}
, 
{
"doc"
:
"findStartingPlot(bool bRandomize) - Finds a starting plot for player"
, 
"type"
:
"instancemethod"
, 
"name"
:
"findStartingPlot"
}
, 
{
"doc"
:
"tuple(CyCity, int iterOut) (bool bReverse) - gets the first city"
, 
"type"
:
"instancemethod"
, 
"name"
:
"firstCity"
}
, 
{
"doc"
:
"tuple(CySelectionGroup, int iterOut) (bool bReverse) - gets the first selectionGroup"
, 
"type"
:
"instancemethod"
, 
"name"
:
"firstSelectionGroup"
}
, 
{
"doc"
:
"tuple(CyUnit, int iterOut) (bool bReverse) - gets the first unit"
, 
"type"
:
"instancemethod"
, 
"name"
:
"firstUnit"
}
, 
{
"doc"
:
"void (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"forcePeace"
}
, 
{
"doc"
:
"void (int iX, int iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"found"
}
, 
{
"doc"
:
"void (int /*CorporationTypes*/ eCorporation)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"foundCorporation"
}
, 
{
"doc"
:
"void (int /*ReligionTypes*/ eReligion, int /*ReligionTypes*/ iSlotReligion, bool)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"foundReligion"
}
, 
{
"doc"
:
"int (int (BuildingTypes) eUnit, bool bAdd, CyCity* pCity)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdvancedStartBuildingCost"
}
, 
{
"doc"
:
"int (int (bool bAdd, CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdvancedStartCityCost"
}
, 
{
"doc"
:
"int (int (bool bAdd, CyCity* pCity)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdvancedStartCultureCost"
}
, 
{
"doc"
:
"int (int (ImprovementTypes) eImprovement, bool bAdd, CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdvancedStartImprovementCost"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdvancedStartPoints"
}
, 
{
"doc"
:
"int (int (bool bAdd, CyCity* pCity)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdvancedStartPopCost"
}
, 
{
"doc"
:
"int (int (RouteTypes) eUnit, bool bAdd, CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdvancedStartRouteCost"
}
, 
{
"doc"
:
"int (int (TechTypes) eUnit, bool bAdd)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdvancedStartTechCost"
}
, 
{
"doc"
:
"int (int (UnitTypes) eUnit, bool bAdd, CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdvancedStartUnitCost"
}
, 
{
"doc"
:
"int (bool bAdd, CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdvancedStartVisibilityCost"
}
, 
{
"doc"
:
"int (int iTurn)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAgricultureHistory"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAnarchyModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAnarchyTurns"
}
, 
{
"doc"
:
"int () - Returns the ArtStyleType for this player (e.g. European)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getArtStyleType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAssets"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAveragePopulation"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBaseFreeMilitaryUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBaseFreeUnits"
}
, 
{
"doc"
:
"str () - returns the name of the best attack unit"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBestAttackUnitKey"
}
, 
{
"doc"
:
"str () - returns the name of the best attack unit"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBestAttackUnitName"
}
, 
{
"doc"
:
"int (CommerceTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusExport"
}
, 
{
"doc"
:
"int (CommerceTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusImport"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingBadHealth"
}
, 
{
"doc"
:
"int (int /*BuildingClassTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingClassCount"
}
, 
{
"doc"
:
"int (int /*BuildingClassTypes*/ iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingClassCountPlusMaking"
}
, 
{
"doc"
:
"int (int /*BuildingClassTypes*/ iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingClassMaking"
}
, 
{
"doc"
:
"int (int /*BuildingTypes*/ eBuilding, int /*BuildingClassTypes*/ ePrereqBuildingClass, iExtra) -"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingClassPrereqBuilding"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingGoodHealth"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingHappiness"
}
, 
{
"doc"
:
"int (int /*BuildingTypes*/ iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingProductionNeeded"
}
, 
{
"doc"
:
"CyCity* (int iID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCapitalCity"
}
, 
{
"doc"
:
"int (CommerceTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCapitalCommerceRateModifier"
}
, 
{
"doc"
:
"int (YieldTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCapitalYieldRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCitiesLost"
}
, 
{
"doc"
:
"CyCity* (int iID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCity"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityDefenseModifier"
}
, 
{
"doc"
:
"std::wstring (int iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityName"
}
, 
{
"doc"
:
"int (int (CivicTypes*) paeNewCivics)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivicAnarchyLength"
}
, 
{
"doc"
:
"int (int /*CivicTypes*/ eCivic)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivicPercentAnger"
}
, 
{
"doc"
:
"int (int* /*CivicTypes*/ paiCivics, bool bIgnoreAnarchy)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivicUpkeep"
}
, 
{
"doc"
:
"int /*CivicTypes*/ (int /*CivicOptionTypes*/ iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivics"
}
, 
{
"doc"
:
"str() - returns the Civilization name in adjective form"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationAdjective"
}
, 
{
"doc"
:
"str() - returns the Civilization name in adjective form"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationAdjectiveKey"
}
, 
{
"doc"
:
"str() - returns the Civilization Description String"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationDescription"
}
, 
{
"doc"
:
"str() - returns the Civilization Description String"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationDescriptionKey"
}
, 
{
"doc"
:
"str() - returns the short Civilization Description"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationShortDescription"
}
, 
{
"doc"
:
"str() - returns the short Civilization Description"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationShortDescriptionKey"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCoastalTradeRoutes"
}
, 
{
"doc"
:
"int () - Combat experience used to produce Warlords"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCombatExperience"
}
, 
{
"doc"
:
"int (CommerceTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommercePercent"
}
, 
{
"doc"
:
"int (CommerceTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceRate"
}
, 
{
"doc"
:
"int (CommerceTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConscriptCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getConversionTimer"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCorporationMaintenanceModifier"
}
, 
{
"doc"
:
"int (int iTurn)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCultureHistory"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCurrentEra"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCurrentResearch"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDistanceMaintenanceModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDomesticGreatGeneralRateModifier"
}
, 
{
"doc"
:
"int (int iTurn)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEconomyHistory"
}
, 
{
"doc"
:
"int (int iTurn)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionageHistory"
}
, 
{
"doc"
:
"int (EspionageMissionTypes eMission, PlayerTypes eTargetPlayer, CyPlot* pPlot, int iExtraData)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionageMissionCost"
}
, 
{
"doc"
:
"int (PlayerTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionageSpending"
}
, 
{
"doc"
:
"int (TeamTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionageSpendingWeightAgainstTeam"
}
, 
{
"doc"
:
"EventTriggeredData* (int /*EventTypes*/ eEvent)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEventOccured"
}
, 
{
"doc"
:
"int getEventTriggerWeight(int eEventTrigger)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEventTriggerWeight"
}
, 
{
"doc"
:
"EventTriggeredData* (int iID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEventTriggered"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExpInBorderModifier"
}
, 
{
"doc"
:
"int (int /*BuildingTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraBuildingHappiness"
}
, 
{
"doc"
:
"int (int /*BuildingTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraBuildingHealth"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraHealth"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraUnitCost"
}
, 
{
"doc"
:
"int (YieldTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraYieldThreshold"
}
, 
{
"doc"
:
"int (int /*FeatureTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureProductionModifier"
}
, 
{
"doc"
:
"str() - returns the Civilization flag decal"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFlagDecal"
}
, 
{
"doc"
:
"int (CommerceTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeCityCommerce"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeExperience"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeMilitaryUnitsPopulationPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeSpecialist"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFreeUnitsPopulationPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGold"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldPerMilitaryUnit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldPerTurn"
}
, 
{
"doc"
:
"int (PlayerTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldPerTurnByPlayer"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldPerUnit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldenAgeLength"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldenAgeModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldenAgeTurns"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatGeneralRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatGeneralsCreated"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatGeneralsThresholdModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeopleCreated"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeopleRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatPeopleThresholdModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHandicapType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHappyPerMilitaryUnit"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getHasCorporationCount"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getHasReligionCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHighestUnitLevel"
}
, 
{
"doc"
:
"int (int (HurryTypes) eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHurryCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHurryModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getID"
}
, 
{
"doc"
:
"int (int /*ImprovementTypes*/ iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementUpgradeRateModifier"
}
, 
{
"doc"
:
"int (int iTurn)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getIndustryHistory"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLandScore"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLargestCityHappiness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLeaderType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLengthResearchQueue"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLevelExperienceModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxAnarchyTurns"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxConscript"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxGlobalBuildingProductionModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxPlayerBuildingProductionModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxTeamBuildingProductionModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMilitaryProductionModifier"
}
, 
{
"doc"
:
"str ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getName"
}
, 
{
"doc"
:
"str ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNameForm"
}
, 
{
"doc"
:
"str ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNameKey"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNewCityName"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNonStateReligionHappiness"
}
, 
{
"doc"
:
"int (int (BonusTypes) eBonus)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumAvailableBonuses"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCities"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCitiesMaintenanceModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCityNames"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumGovernmentCenters"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumMilitaryUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumNukeUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumOutsideUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumSelectionGroups"
}
, 
{
"doc"
:
"int (int /*PlayerTypes*/ ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTradeBonusImports"
}
, 
{
"doc"
:
"int (int (BonusTypes) eBonus)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumTradeableBonuses"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnitGoldenAges"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOverflowResearch"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPersonalityType"
}
, 
{
"doc"
:
"int (PlayerColorTypes) () - returns the color ID of the player"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerColor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerTextColorA"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerTextColorB"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerTextColorG"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerTextColorR"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPopScore"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPower"
}
, 
{
"doc"
:
"int (int iTurn)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPowerHistory"
}
, 
{
"doc"
:
"bool (int /*ProjectTypes*/ eProject, bool bContinue, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProjectProductionNeeded"
}
, 
{
"doc"
:
"int"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getQueuePosition"
}
, 
{
"doc"
:
"long int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRealPopulation"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReligionAnarchyLength"
}
, 
{
"doc"
:
"int (int /*TechTypes*/ eTech, bool bOverflow)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getResearchTurnsLeft"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRevolutionTimer"
}
, 
{
"doc"
:
"int (int iTurn)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScoreHistory"
}
, 
{
"doc"
:
"str () - Get stored custom data (via pickle)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScriptData"
}
, 
{
"doc"
:
"int (YieldTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSeaPlotYield"
}
, 
{
"doc"
:
"CvSelectionGroup* (int iID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSelectionGroup"
}
, 
{
"doc"
:
"int (int /*CivicTypes*/ eCivic, bool bIgnoreAnarchy)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSingleCivicUpkeep"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpaceProductionModifier"
}
, 
{
"doc"
:
"int (int (SpecialBuildingTypes) eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialBuildingNotRequiredCount"
}
, 
{
"doc"
:
"int (CommerceTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialistExtraCommerce"
}
, 
{
"doc"
:
"int (int /*SpecialistTypes*/ eIndex1, int /*YieldTypes*/ eIndex2)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialistExtraYield"
}
, 
{
"doc"
:
"CyPlot* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStartingPlot"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligion"
}
, 
{
"doc"
:
"int (CommerceTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionBuildingCommerce"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionBuildingProductionModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionFreeExperience"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionGreatPeopleRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionHappiness"
}
, 
{
"doc"
:
"str() - returns the name of the Civilizations State Religion"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionKey"
}
, 
{
"doc"
:
"str() - returns the name of the Civilizations State Religion"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionName"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStateReligionUnitProductionModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStrikeTurns"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTeam"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechScore"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTotalLand"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTotalLandScored"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTotalMaintenance"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTotalPopulation"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTotalTimePlayed"
}
, 
{
"doc"
:
"DenialTypes (int eWhoTo, TradeData item)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeDenial"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeRoutes"
}
, 
{
"doc"
:
"int (YieldTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeYieldModifier"
}
, 
{
"doc"
:
"CyUnit* (int iID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnit"
}
, 
{
"doc"
:
"string (int eUnit) - Returns the unit button for this player"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitButton"
}
, 
{
"doc"
:
"int (int (UnitClassTypes) eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitClassCount"
}
, 
{
"doc"
:
"int (int (UnitClassTypes) eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitClassCountPlusMaking"
}
, 
{
"doc"
:
"int (int (UnitClassTypes) eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitClassMaking"
}
, 
{
"doc"
:
"int (int /*UnitTypes*/ iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitProductionNeeded"
}
, 
{
"doc"
:
"int (int (UpkeepTypes) eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUpkeepCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUpkeepModifier"
}
, 
{
"doc"
:
"int (int /*VoteTypes*/ eVote, int /*VoteSourceTypes*/ eVoteSource)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVotes"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWarWearinessModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWarWearinessPercentAnger"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWinsVsBarbs"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWondersScore"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWorkerSpeedModifier"
}
, 
{
"doc"
:
"str () - returns the name of the worst enemy"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWorstEnemyName"
}
, 
{
"doc"
:
"int (YieldTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYieldRateModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"greatPeopleThreshold"
}
, 
{
"doc"
:
"int (int /*BonusType*/ ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasBonus"
}
, 
{
"doc"
:
"bool (int (CorporationTypes) eCorporation)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasHeadquarters"
}
, 
{
"doc"
:
"bool (int (ReligionTypes) eReligion)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasHolyCity"
}
, 
{
"doc"
:
"bool hasTrait(int /*TraitTypes*/ iIndex) - returns True if player is the Trait Type."
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasTrait"
}
, 
{
"doc"
:
"initCity( plotX, plotY ) - spawns a city at x,y"
, 
"type"
:
"instancemethod"
, 
"name"
:
"initCity"
}
, 
{
"doc"
:
"EventTriggeredData* (int eEventTrigger, bool bFire, int iCityId, int iPlotX, int iPlotY, PlayerTypes eOtherPlayer, int iOtherPlayerCityId, ReligionTypes eReligion, CorporationTypes eCorporation, int iUnitId, BuildingTypes eBuilding)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"initTriggeredData"
}
, 
{
"doc"
:
"CyUnit* initUnit(UnitTypes iIndex, plotX, plotY, UnitAITypes iIndex)  - place Unit at X,Y   NOTE: Always use UnitAITypes.NO_UNITAI"
, 
"type"
:
"instancemethod"
, 
"name"
:
"initUnit"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAlive"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAnarchy"
}
, 
{
"doc"
:
"bool () - returns True if player is a Barbarian"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBarbarian"
}
, 
{
"doc"
:
"bool (int /*BuildingClassTypes*/ iIndex, int iExtra)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBuildingClassMaxedOut"
}
, 
{
"doc"
:
"bool (int /*BuildingTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBuildingFree"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBuildingOnlyHealthy"
}
, 
{
"doc"
:
"bool (int (CivicTypes) eCivic)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCivic"
}
, 
{
"doc"
:
"bool (CommerceTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCommerceFlexible"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCurrentResearchRepeat"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isEverAlive"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isExtendedGame"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFeatAccomplished"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFoundedFirstCity"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFullMember"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGoldenAge"
}
, 
{
"doc"
:
"bool (int (CivicOptionTypes) eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHasCivicOption"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHuman"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isLoyalMember"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMilitaryFoodProduction"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMinorCiv"
}
, 
{
"doc"
:
"bool (int /*CivicOptionTypes*/ iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoCivicUpkeep"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoCorporations"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoForeignCorporations"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoForeignTrade"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoNonStateReligionSpread"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoResearchAvailable"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoUnhealthyPopulation"
}
, 
{
"doc"
:
"checks for a null player"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOption"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPlayable"
}
, 
{
"doc"
:
"int (int /*BuildingClassTypes*/ eBuildingClass, bool bAcquireCity)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProductionMaxedBuildingClass"
}
, 
{
"doc"
:
"int (int /*ProjectTypes*/ eProject)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProductionMaxedProject"
}
, 
{
"doc"
:
"int (int /*UnitClassTypes*/ eUnitClass)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProductionMaxedUnitClass"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isResearch"
}
, 
{
"doc"
:
"bool (int /*TechTypes*/ iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isResearchingTech"
}
, 
{
"doc"
:
"int (int (SpecialBuildingTypes) eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSpecialBuildingNotRequired"
}
, 
{
"doc"
:
"bool (int /*SpecialistTypes*/ iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSpecialistValid"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isStateReligion"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isStrike"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTurnActive"
}
, 
{
"doc"
:
"bool (int (UnitClassTypes) eIndex, int iExtra)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isUnitClassMaxedOut"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVotingMember"
}
, 
{
"doc"
:
"bool () - Whether or not this player is using a custom texture flag (set in WBS)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWhiteFlag"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"killAllDeals"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"killCities"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"killUnits"
}
, 
{
"doc"
:
"tuple(CyCity, int iterOut) (int iterIn, bool bReverse) - gets the next city"
, 
"type"
:
"instancemethod"
, 
"name"
:
"nextCity"
}
, 
{
"doc"
:
"tuple(CySelectionGroup, int iterOut) (int iterIn, bool bReverse) - gets the next selectionGroup"
, 
"type"
:
"instancemethod"
, 
"name"
:
"nextSelectionGroup"
}
, 
{
"doc"
:
"tuple(CyUnit, int iterOut) (int iterIn, bool bReverse) - gets the next unit"
, 
"type"
:
"instancemethod"
, 
"name"
:
"nextUnit"
}
, 
{
"doc"
:
"void (int /*TechTypes*/ eTech)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"popResearch"
}
, 
{
"doc"
:
"void (int /*TechTypes*/ iIndex, bool bClear)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"pushResearch"
}
, 
{
"doc"
:
"void (CyCity pCity)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"raze"
}
, 
{
"doc"
:
"void (CyPlot* pPlot, int /*GoodyTypes*/ eGoody, CyUnit* pUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"receiveGoody"
}
, 
{
"doc"
:
"void (int /*BuildingClassTypes*/ eBuildingClass)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"removeBuildingClass"
}
, 
{
"doc"
:
"void (int /*EventTypes*/ eEvent)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"resetEventOccured"
}
, 
{
"doc"
:
"void (int (CivicTypes*) paeNewCivics, bool bForce)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"revolution"
}
, 
{
"doc"
:
"void (int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setAdvancedStartPoints"
}
, 
{
"doc"
:
"void (int iCivicOptionType, int iCivicType) - Used to forcibly set civics with no anarchy"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCivics"
}
, 
{
"doc"
:
"void (int) - Combat experience used to produce Warlords"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCombatExperience"
}
, 
{
"doc"
:
"int (CommerceTypes eIndex, int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCommercePercent"
}
, 
{
"doc"
:
"void (int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setConscriptCount"
}
, 
{
"doc"
:
"void (int /*EraTypes*/ iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCurrentEra"
}
, 
{
"doc"
:
"void (TeamTypes eIndex, int iValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setEspionageSpendingWeightAgainstTeam"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setFeatAccomplished"
}
, 
{
"doc"
:
"void (int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setGold"
}
, 
{
"doc"
:
"void (int iReligionID) - Sets the player's state religion to iReligionID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setLastStateReligion"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setLoyalMember"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setOption"
}
, 
{
"doc"
:
"void (int /*LeaderHeadTypes*/ eNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPersonalityType"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPlayable"
}
, 
{
"doc"
:
"void (str) - Set stored custom data (via pickle)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScriptData"
}
, 
{
"doc"
:
"void (CyPlot*, bool) - sets the player's starting plot"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setStartingPlot"
}
, 
{
"doc"
:
"int (int (SpecialistTypes) eSpecialist, int (CommerceTypes) eCommerce)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"specialistCommerce"
}
, 
{
"doc"
:
"int (int (SpecialistTypes) eSpecialist, int (YieldTypes) eCommerce)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"specialistYield"
}
, 
{
"doc"
:
"bool (int iAreaId)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"splitEmpire"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"startingPlotRange"
}
, 
{
"doc"
:
"bool (CyPlot *pPlot, int /*PlayerTypes*/ ePlayer, int iRange, int iPass)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"startingPlotWithinRange"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/ eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"stopTradingWithTeam"
}
, 
{
"doc"
:
"void (/*EventTriggerTypes*/int eEventTrigger)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"trigger"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"unitsGoldenAgeCapable"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"unitsGoldenAgeReady"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"unitsRequiredForGoldenAge"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyPlot"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void (string dummyTag, string modelTag)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addFeatureDummyModel"
}
, 
{
"doc"
:
"CyArea* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"area"
}
, 
{
"doc"
:
"bool (int iX, int iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"at"
}
, 
{
"doc"
:
"int (int (YieldTypes) eYield, int (TeamTypes) eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateBestNatureYield"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateCulturalOwner"
}
, 
{
"doc"
:
"int (int /*PlayerTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateCulturePercent"
}
, 
{
"doc"
:
"int (int (ImprovementTypes) eImprovement, int (YieldTypes) eYield, int (PlayerTypes) ePlayer, bool bOptimal)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateImprovementYieldChange"
}
, 
{
"doc"
:
"int (int (YieldTypes) eYield, int (TeamTypes) eTeam, bool bIgnoreFeature)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateNatureYield"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateTeamCulturePercent"
}
, 
{
"doc"
:
"int (int (TeamTypes) eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateTotalBestNatureYield"
}
, 
{
"doc"
:
"int (YieldTypes eYield, bool bDisplay)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"calculateYield"
}
, 
{
"doc"
:
"bool (int (BuildTypes) eBuild, int (PlayerTypes) ePlayer, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canBuild"
}
, 
{
"doc"
:
"bool (int /*BonusTypes*/ eBonus, bool bIgnoreLatitude)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canHaveBonus"
}
, 
{
"doc"
:
"bool (int /*FeatureTypes*/ eFeature)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canHaveFeature"
}
, 
{
"doc"
:
"bool (int (ImprovementTypes) eImprovement, int (TeamTypes) eTeam, bool bPotential)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canHaveImprovement"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canHavePotentialIrrigation"
}
, 
{
"doc"
:
"bool (int /*BuildTypes*/ eBuild, int iChange, int /*TeamTypes*/ eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeBuildProgress"
}
, 
{
"doc"
:
"void (int /*PlayerTypes*/ eIndex, int iChange, bool bUpdate)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeCulture"
}
, 
{
"doc"
:
"int (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeExtraMovePathCost"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeForceUnownedTimer"
}
, 
{
"doc"
:
"int (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeImprovementDuration"
}
, 
{
"doc"
:
"int (int (TeamTypes eTeam), int (InvisibleTypes) eInvisible, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeInvisibleVisibilityCount"
}
, 
{
"doc"
:
"int (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeOwnershipDuration"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeUpgradeProgress"
}
, 
{
"doc"
:
"void (int (TeamTypes) eTeam, int iChange, int (InvisibleTypes) eSeeInvisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeVisibilityCount"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/ ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countNumAirUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countTotalCulture"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/, bool bIgnoreBuilding, bool bHelp)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"defenseModifier"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"erase"
}
, 
{
"doc"
:
"int /*TeamTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"findHighestCultureTeam"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getArea"
}
, 
{
"doc"
:
"CyUnit* (int (PlayerTypes) eOwner, int (PlayerTypes) eAttackingPlayer, CvUnit* pAttacker, bool bTestAtWar, bool bTestPotentialEnemy, bool bTestCanMove)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBestDefender"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/ eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBonusType"
}
, 
{
"doc"
:
"int (int /*BuildTypes*/ eBuild)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildProgress"
}
, 
{
"doc"
:
"int (int /*BuildTypes*/ eBuild)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildTime"
}
, 
{
"doc"
:
"int (int (BuildTypes) eBuild, int iNowExtra, int iThenExtra)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildTurnsLeft"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCityRadiusCount"
}
, 
{
"doc"
:
"int (int /*PlayerTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCulture"
}
, 
{
"doc"
:
"int (int /*PlayerTypes*/ eOwnerIndex, int iRangeIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCultureRangeCities"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraMovePathCost"
}
, 
{
"doc"
:
"int (int (BuildTypes) eBuild, int (TeamTypes) eTeam, CvCity** ppCity)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureProduction"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFeatureVariety"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getForceUnownedTimer"
}
, 
{
"doc"
:
"int (int /*PlayerTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFoundValue"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementDuration"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementType"
}
, 
{
"doc"
:
"int (int (TeamTypes eTeam), int (InvisibleTypes) eInvisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInvisibleVisibilityCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLatitude"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMinOriginalStartDist"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNearestLandArea"
}
, 
{
"doc"
:
"CyPlot* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNearestLandPlot"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/ eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNonObsoleteBonusType"
}
, 
{
"doc"
:
"bool (int /*PlayerTypes*/ ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCultureRangeCities"
}
, 
{
"doc"
:
"int (int /*PlayerTypes*/ ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumDefenders"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnits"
}
, 
{
"doc"
:
"int (CyUnit* pUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumVisibleEnemyDefenders"
}
, 
{
"doc"
:
"int (CyUnit* pUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumVisiblePotentialEnemyDefenders"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOwner"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOwnershipDuration"
}
, 
{
"doc"
:
"int (int /*PlayerTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerCityRadiusCount"
}
, 
{
"doc"
:
"CyCity* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlotCity"
}
, 
{
"doc"
:
"int (int (PlayerTypes) ePlayer, int (BonusTypes) eBonus)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlotGroupConnectedBonus"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlotType"
}
, 
{
"doc"
:
"NiPoint3 ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPoint"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReconCount"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/ eTeam, bool bDebug)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRevealedImprovementType"
}
, 
{
"doc"
:
"int (int (TeamTypes) eTeam, bool bDebug)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRevealedOwner"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/ eTeam, bool bDebug)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRevealedRouteType"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/ eTeam, bool bDebug)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRevealedTeam"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRiverCrossingCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRiverID"
}
, 
{
"doc"
:
"CardinalDirectionTypes ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRiverNSDirection"
}
, 
{
"doc"
:
"CardinalDirectionTypes ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRiverWEDirection"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRouteType"
}
, 
{
"doc"
:
"str () - Get stored custom data"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScriptData"
}
, 
{
"doc"
:
"CyUnit* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSelectedUnit"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/ eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStolenVisibilityCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTeam"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTerrainType"
}
, 
{
"doc"
:
"CyUnit* (int iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnit"
}
, 
{
"doc"
:
"int (int /*PlayerTypes*/ eOwner)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitPower"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUpgradeProgress"
}
, 
{
"doc"
:
"int (int /*ImprovementTypes*/ eImprovement, int /*PlayerTypes*/ ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUpgradeTimeLeft"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/ eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVisibilityCount"
}
, 
{
"doc"
:
"CyCity* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWorkingCity"
}
, 
{
"doc"
:
"CyCity* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWorkingCityOverride"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getX"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getY"
}
, 
{
"doc"
:
"int (YieldTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYield"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasYield"
}
, 
{
"doc"
:
"bool (bool bDebug)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isActiveVisible"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"isAdjacentNonrevealed"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"isAdjacentNonvisible"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAdjacentOwned"
}
, 
{
"doc"
:
"bool (int /*PlayerTypes*/ ePlayer, bool bLandOnly)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAdjacentPlayer"
}
, 
{
"doc"
:
"bool (int (PlayerTypes) ePlayer, int (BonusTypes) eBonus)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAdjacentPlotGroupConnectedBonus"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"isAdjacentRevealed"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eTeam, bool bLandOnly)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAdjacentTeam"
}
, 
{
"doc"
:
"bool (CyArea)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAdjacentToArea"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAdjacentToLand"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"isAdjacentVisible"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBarbarian"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBeingWorked"
}
, 
{
"doc"
:
"bool (int /*PlayerTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBestAdjacentFound"
}
, 
{
"doc"
:
"bool (int (TeamTypes) eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBonusNetwork"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCity"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCityRadius"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCoastalLand"
}
, 
{
"doc"
:
"bool (CvCity* pCity) - returns whether this plot is connected to the provided city"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isConnectedTo"
}
, 
{
"doc"
:
"bool (int (PlayerTypes) ePlayer) - returns whether this plot is connected to the capital of the provided player"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isConnectedToCapital"
}
, 
{
"doc"
:
"bool (int /*PlayerTypes*/ eOwnerIndex, int iRangeIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCultureRangeCity"
}
, 
{
"doc"
:
"bool (CyUnit* pUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isEnemyCity"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFighting"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFlagDirty"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFlatlands"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isForceUnowned"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFreshWater"
}
, 
{
"doc"
:
"bool (CyUnit* pUnit, bool bCheckImprovement)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFriendlyCity"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGoody"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHills"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isImpassable"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isInvestigate"
}
, 
{
"doc"
:
"int (int (TeamTypes eTeam), int (InvisibleTypes) eInvisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isInvisibleVisible"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isIrrigated"
}
, 
{
"doc"
:
"bool (bool bIgnoreSelf)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isIrrigationAvailable"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isLake"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNOfRiver"
}
, 
{
"doc"
:
"bool (int (TeamTypes) eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNetworkTerrain"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOccupation"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOwned"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOwnershipScore"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPeak"
}
, 
{
"doc"
:
"bool (int /*PlayerTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPlayerCityRadius"
}
, 
{
"doc"
:
"bool (int (PlayerTypes) ePlayer, int (BonusTypes) eBonus)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPlotGroupConnectedBonus"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPotentialCityWork"
}
, 
{
"doc"
:
"bool (CyArea* pArea)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPotentialCityWorkForArea"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPotentialIrrigation"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eTeam, bool bDebug)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRevealed"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRevealedBarbarian"
}
, 
{
"doc"
:
"bool (int (TeamTypes) eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRevealedGoody"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRiver"
}
, 
{
"doc"
:
"bool (int /*DirectionTypes*/ eDirection)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRiverConnection"
}
, 
{
"doc"
:
"bool (DirectionTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRiverCrossing"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRiverSide"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRoute"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isStartingPlot"
}
, 
{
"doc"
:
"bool (int eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTradeNetwork"
}
, 
{
"doc"
:
"bool (CyPlot, int eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTradeNetworkConnected"
}
, 
{
"doc"
:
"bool (int (TeamTypes) eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTradeNetworkImpassable"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isUnit"
}
, 
{
"doc"
:
"bool (CyUnit* pUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isValidDomainForAction"
}
, 
{
"doc"
:
"bool (CyUnit* pUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isValidDomainForLocation"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eTeam, bool bDebug)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVisible"
}
, 
{
"doc"
:
"bool (CyUnit* pUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVisibleEnemyDefender"
}
, 
{
"doc"
:
"bool (int /*PlayerTypes*/ ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVisibleEnemyUnit"
}
, 
{
"doc"
:
"bool (int /*PlayerTypes*/ ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVisibleOtherUnit"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVisibleToWatchingHuman"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWOfRiver"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWater"
}
, 
{
"doc"
:
"bool (int /*PlayerTypes*/ ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWithinCultureRange"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eTeam, int /*PlayerTypes*/ eIgnorePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWithinTeamCityRadius"
}
, 
{
"doc"
:
"int (CyUnit* pUnit, CyPlot* pFromPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"movementCost"
}
, 
{
"doc"
:
"void (int iRange, CyUnit* pNukeUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"nukeExplosion"
}
, 
{
"doc"
:
"string (int mouseX, int mouseY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"pickFeatureDummyTag"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"removeGoody"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"resetFeatureModel"
}
, 
{
"doc"
:
"int (int eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"seeFromLevel"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"seeThroughLevel"
}
, 
{
"doc"
:
"void (int eNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setBonusType"
}
, 
{
"doc"
:
"void (int /*PlayerTypes*/ eIndex, int iNewValue, bool bUpdate)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCulture"
}
, 
{
"doc"
:
"void (string dummyTag, string textureTag)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setFeatureDummyTexture"
}
, 
{
"doc"
:
"void (string dummyTag, bool show)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setFeatureDummyVisibility"
}
, 
{
"doc"
:
"void (int /*FeatureTypes*/ eNewValue, int iVariety)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setFeatureType"
}
, 
{
"doc"
:
"void (bool bNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setFlagDirty"
}
, 
{
"doc"
:
"void (int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setForceUnownedTimer"
}
, 
{
"doc"
:
"int (int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setImprovementDuration"
}
, 
{
"doc"
:
"void (int eNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setImprovementType"
}
, 
{
"doc"
:
"void (bool bNewValue, CardinalDirectionTypes eRiverDir)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNOfRiver"
}
, 
{
"doc"
:
"void (int /*PlayerTypes*/ eNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setOwner"
}
, 
{
"doc"
:
"void (int /*PlayerTypes*/ eNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setOwnerNoUnitCheck"
}
, 
{
"doc"
:
"int (int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setOwnershipDuration"
}
, 
{
"doc"
:
"void (PlotTypes eNewValue, bool bRecalculate, bool bRebuildGraphics)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPlotType"
}
, 
{
"doc"
:
"void (int /*TeamTypes*/ eTeam, bool bNewValue, bool bTerrainOnly, int /*TeamTypes*/ eFromTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setRevealed"
}
, 
{
"doc"
:
"void (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setRiverID"
}
, 
{
"doc"
:
"void (int (RouteTypes) eNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setRouteType"
}
, 
{
"doc"
:
"void (str) - Set stored custom data"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScriptData"
}
, 
{
"doc"
:
"void (bool bNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setStartingPlot"
}
, 
{
"doc"
:
"void (TerrainTypes eNewValue, bool bRecalculate, bool bRebuildGraphics)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTerrainType"
}
, 
{
"doc"
:
"void (int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setUpgradeProgress"
}
, 
{
"doc"
:
"void (bool bNewValue, CardinalDirectionTypes eRiverDir)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setWOfRiver"
}
, 
{
"doc"
:
"bool (CyPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"shareAdjacentArea"
}
, 
{
"doc"
:
"void () Refreshes all of the plots"
, 
"type"
:
"instancemethod"
, 
"name"
:
"updateVisibility"
}
, 
{
"doc"
:
"CyArea* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"waterArea"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyPopup"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void ( wstring szText )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addButton"
}
, 
{
"doc"
:
"void ( wstring szText, int iX, int iY )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addButtonXY"
}
, 
{
"doc"
:
"void ( string szPathName, int iX, int iY, int iWidth, int iHeight )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addDDS"
}
, 
{
"doc"
:
"void ( int iSpace )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addFixedSeparator"
}
, 
{
"doc"
:
"void ( string  szPathName, int eWho, int eInitAttitude, int iX, int iY )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addLeaderhead"
}
, 
{
"doc"
:
"void ( wstring szText, int iID, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addListBoxString"
}
, 
{
"doc"
:
"void ( wstring szText, int iID, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addPullDownString"
}
, 
{
"doc"
:
"void ( string szFunctionName, wstring szBtnText, wstring szHelpText, string szArtFile, int iData1, int iData2, bool bOption )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addPythonButton"
}
, 
{
"doc"
:
"void ( string szFunctionName, wstring szBtnText, wstring szHelpText, string szArtFile, int iData1, int iData2, bool bOption, int iX, int iY )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addPythonButtonXY"
}
, 
{
"doc"
:
"void ( string szPathName, wstring szText, int iX, int iY, int iWidth, int iHeight )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addPythonDDS"
}
, 
{
"doc"
:
"void ( )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addSeparator"
}
, 
{
"doc"
:
"void ( int iRow, int iCol, string szFile, int iX, int iY, int iWidth, int iHeight, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addTableCellDDS"
}
, 
{
"doc"
:
"void ( int iRow, int iCol, string szFile, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addTableCellImage"
}
, 
{
"doc"
:
"void ( int iRow, int iCol, wstring szText, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addTableCellText"
}
, 
{
"doc"
:
"void ( int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"completeTableAndAttach"
}
, 
{
"doc"
:
"void ( int iGroup, int iX, int iY )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"completeTableAndAttachXY"
}
, 
{
"doc"
:
"void ( int iNumBoxes, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createCheckBoxes"
}
, 
{
"doc"
:
"void (wstring szText, int iGroup)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createEditBox"
}
, 
{
"doc"
:
"void (wstring szText, int iGroup, int iX, int iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createEditBoxXY"
}
, 
{
"doc"
:
"void ( int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createListBox"
}
, 
{
"doc"
:
"void ( int iGroup, int iX, int iY )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createListBoxXY"
}
, 
{
"doc"
:
"void ( int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createPullDown"
}
, 
{
"doc"
:
"void ( int iGroup, int iX, int iY )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createPullDownXY"
}
, 
{
"doc"
:
"void ( int iNumBoxes, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createPythonCheckBoxes"
}
, 
{
"doc"
:
"void (wstring szText, wstring szHelpText, int iGroup)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createPythonEditBox"
}
, 
{
"doc"
:
"void (wstring szText, wstring szHelpText, int iGroup, int iX, int iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createPythonEditBoxXY"
}
, 
{
"doc"
:
"void ( wstring szText, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createPythonListBox"
}
, 
{
"doc"
:
"void ( wstring szText, int iGroup, int iX, int iY )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createPythonListBoxXY"
}
, 
{
"doc"
:
"void ( wstring szText, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createPythonPullDown"
}
, 
{
"doc"
:
"void ( wstring szText, int iGroup, int iX, int iY )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createPythonPullDownXY"
}
, 
{
"doc"
:
"void ( int iNumButtons, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createPythonRadioButtons"
}
, 
{
"doc"
:
"void ( int iNumButtons, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createRadioButtons"
}
, 
{
"doc"
:
"void ( int iIndex, wstring szHelpText, int iDefault, int iIncrement, int iMax, int iMin )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createSpinBox"
}
, 
{
"doc"
:
"void ( int iRows, int iCols, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createTable"
}
, 
{
"doc"
:
"bool () - returns whether this is a valid CyPopup instance"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"bool (bool bCreateOK, PopupStates eState"
, 
"type"
:
"instancemethod"
, 
"name"
:
"launch"
}
, 
{
"doc"
:
"void ( wstring szText, uint uiFlags )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setBodyString"
}
, 
{
"doc"
:
"void ( int iCheckBoxID, wstring szText, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCheckBoxText"
}
, 
{
"doc"
:
"void (int maxCharCount, int preferredCharCount, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setEditBoxMaxCharCount"
}
, 
{
"doc"
:
"void ( wstring szText, uint uiFlags )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setHeaderString"
}
, 
{
"doc"
:
"void (int iX, int iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPosition"
}
, 
{
"doc"
:
"void ( wstring szDefText, string szName, wstring szText, uint uiFlags )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPythonBodyString"
}
, 
{
"doc"
:
"void ( int iCheckBoxID, wstring szText, wstring szHelpText, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPythonCheckBoxText"
}
, 
{
"doc"
:
"void ( int iRadioButtonID, wstring szText, wstring szHelpText, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPythonRadioButtonText"
}
, 
{
"doc"
:
"void ( int iRadioButtonID, wstring szText, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setRadioButtonText"
}
, 
{
"doc"
:
"void ( int iID, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSelectedListBoxString"
}
, 
{
"doc"
:
"void ( int iID, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSelectedPulldownID"
}
, 
{
"doc"
:
"void (int iXS, int iYS)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSize"
}
, 
{
"doc"
:
"void ( int iCol, int iPixels, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTableCellSize"
}
, 
{
"doc"
:
"void ( int iRow, int iSize, int iGroup )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTableYSize"
}
, 
{
"doc"
:
"void (unsigned int uiTime)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTimer"
}
, 
{
"doc"
:
"void (tuple userData)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setUserData"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyPopupInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void (int iPlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addPopup"
}
, 
{
"doc"
:
"void (wstring szText, string szArt)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addPythonButton"
}
, 
{
"doc"
:
"ButtonPopupTypes ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButtonPopupType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getData1"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getData2"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getData3"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFlags"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumPythonButtons"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOnClickedPythonCallback"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOnFocusPythonCallback"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOption1"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOption2"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPythonButtonArt"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPythonButtonText"
}
, 
{
"doc"
:
"string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPythonModule"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"bool () - returns whether this is a valid CyPopupInfo instance"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"void (ButtonPopupTypes eValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setButtonPopupType"
}
, 
{
"doc"
:
"void (int iValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setData1"
}
, 
{
"doc"
:
"void (int iValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setData2"
}
, 
{
"doc"
:
"void (int iValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setData3"
}
, 
{
"doc"
:
"void (int iValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setFlags"
}
, 
{
"doc"
:
"void (string szOnFocus)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setOnClickedPythonCallback"
}
, 
{
"doc"
:
"void (string szOnFocus)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setOnFocusPythonCallback"
}
, 
{
"doc"
:
"void (bool bValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setOption1"
}
, 
{
"doc"
:
"void (bool bValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setOption2"
}
, 
{
"doc"
:
"void (string szOnFocus)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPythonModule"
}
, 
{
"doc"
:
"void (string szText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setText"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyPopupReturn"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int (int iGroup)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButtonClicked"
}
, 
{
"doc"
:
"wstring (int iGroup)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEditBoxString"
}
, 
{
"doc"
:
"int (int iGroup)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSelectedListBoxValue"
}
, 
{
"doc"
:
"int (int iGroup)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSelectedPullDownValue"
}
, 
{
"doc"
:
"int (int iGroup)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSelectedRadioButton"
}
, 
{
"doc"
:
"int (int iGroup)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpinnerWidgetValue"
}
, 
{
"doc"
:
"bool () - returns whether this is a valid CyPopupReturn instance"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyPythonMgr"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"allowDefaultImpl"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"debugMsg"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"debugMsgWide"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"errorMsg"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"errorMsgWide"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyRandom"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"returns a random number"
, 
"type"
:
"instancemethod"
, 
"name"
:
"get"
}
, 
{
"doc"
:
"void (unsigned long int ulSeed)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"init"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyReplayInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"createInfo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getActivePlayer"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCalendar"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivAdjective"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivDescription"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getClimate"
}
, 
{
"doc"
:
"int (int iPlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getColor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDifficulty"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEra"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFinalAgriculture"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFinalDate"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFinalEconomy"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFinalIndustry"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFinalScore"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFinalTurn"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGameSpeed"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInitialTurn"
}
, 
{
"doc"
:
"int (int iPlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLeader"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLeaderName"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMapHeight"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMapScriptName"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMapWidth"
}
, 
{
"doc"
:
"std::wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getModName"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNormalizedScore"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumPlayers"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumReplayMessages"
}
, 
{
"doc"
:
"int (int iPlayer, int iTurn)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerAgriculture"
}
, 
{
"doc"
:
"int (int iPlayer, int iTurn)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerEconomy"
}
, 
{
"doc"
:
"int (int iPlayer, int iTurn)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerIndustry"
}
, 
{
"doc"
:
"int (int iPlayer, int iTurn)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerScore"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReplayMessageColor"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReplayMessagePlayer"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReplayMessagePlotX"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReplayMessagePlotY"
}
, 
{
"doc"
:
"wstring (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReplayMessageText"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReplayMessageTurn"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReplayMessageType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSeaLevel"
}
, 
{
"doc"
:
"wstring ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getShortCivDescription"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getStartYear"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVictoryType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWorldSize"
}
, 
{
"doc"
:
"bool (int iOption)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGameOption"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMultiplayer"
}
, 
{
"doc"
:
"bool () - Returns whether or not this is a valid object"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"bool (int iVictory)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVictoryCondition"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CySelectionGroup"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"alwaysInvisible"
}
, 
{
"doc"
:
"CyArea ()*"
, 
"type"
:
"instancemethod"
, 
"name"
:
"area"
}
, 
{
"doc"
:
"bool (iX, iY) - is the group at plot iX, iY?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"at"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot) - is the group at pPlot?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"atPlot"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"baseMoves"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canAllMove"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canAnyMove"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canDefend"
}
, 
{
"doc"
:
"bool (eCommand, iData1, iData2, bTestVisible = False) - can the group perform eCommand?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canDoCommand"
}
, 
{
"doc"
:
"bool (int (InterfaceModeTypes) eInterfaceMode)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canDoInterfaceMode"
}
, 
{
"doc"
:
"bool (int (InterfaceModeTypes) eInterfaceMode, CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canDoInterfaceModeAt"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eTeam, CyArea* pArea, bool bIgnoreRightOfPassage)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canEnterArea"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eTeam, bool bIgnoreRightOfPassage)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canEnterTerritory"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canFight"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, bool bAttack) - can the group move into pPlot?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canMoveInto"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, bool bDeclareWar) - can the group move or attack into pPlot?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canMoveOrAttackInto"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canMoveThrough"
}
, 
{
"doc"
:
"bool (int iMission, int iData1, int iData2, CyPlot* pPlot, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canStartMission"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"clearMissionQueue"
}
, 
{
"doc"
:
"int (int (UnitAITypes) eUnitAI"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countNumUnitAIType"
}
, 
{
"doc"
:
"bool (CyPlot* pFromPlot, CyPlot* pToPlot, int iFlags, bool bReuse, int* piPathTurns)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"generatePath"
}
, 
{
"doc"
:
"int /*ActivityTypes*/ () - ActivityTypes the group is engaging in"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getActivityType"
}
, 
{
"doc"
:
"int /*AutomateTypes*/ () - AutomateTypes the group is engaging in"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAutomateType"
}
, 
{
"doc"
:
"int (RouteTypes) (CyPlot* pPlot, BuildTypes* peBestBuild)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBestBuildRoute"
}
, 
{
"doc"
:
"CyUnit* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHeadUnit"
}
, 
{
"doc"
:
"int () - the ID for the SelectionGroup"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getID"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLengthMissionQueue"
}
, 
{
"doc"
:
"int (int iNode)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMissionData1"
}
, 
{
"doc"
:
"int (int iNode)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMissionData2"
}
, 
{
"doc"
:
"MissionData* (int iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMissionFromQueue"
}
, 
{
"doc"
:
"int (int iNode)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMissionType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumUnits"
}
, 
{
"doc"
:
"int (PlayerTypes) () - ID for owner of the group"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOwner"
}
, 
{
"doc"
:
"CyPlot* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPathEndTurnPlot"
}
, 
{
"doc"
:
"CyPlot* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPathFirstPlot"
}
, 
{
"doc"
:
"int (TeamTypes) () - ID for team owner of the group"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTeam"
}
, 
{
"doc"
:
"CyUnit* (int index)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitAt"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasCargo"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasMoved"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasWorker"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAmphibPlot"
}
, 
{
"doc"
:
"bool () - Is the group automated?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAutomated"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFull"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHuman"
}
, 
{
"doc"
:
"bool (int eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isInvisible"
}
, 
{
"doc"
:
"bool () - is this CySelectionGroup instance valid?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWaiting"
}
, 
{
"doc"
:
"CvPlot* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"lastMissionPlot"
}
, 
{
"doc"
:
"CyPlot () - get plot that the group is on"
, 
"type"
:
"instancemethod"
, 
"name"
:
"plot"
}
, 
{
"doc"
:
"void () - removes mission from queue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"popMission"
}
, 
{
"doc"
:
"void (eMission, iData1, iData2, iFlags, bAppend, bManual, eMissionAI, pMissionAIPlot, pMissionAIUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"pushMission"
}
, 
{
"doc"
:
"void (plotX, plotY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"pushMoveToMission"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"readyToAuto"
}
, 
{
"doc"
:
"bool (bool bAny) - is the group awake and ready to move?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"readyToMove"
}
, 
{
"doc"
:
"bool (bool bAny) - is the group able to be selected?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"readyToSelect"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"resetPath"
}
, 
{
"doc"
:
"void (int /*ActivityTypes*/ eNewValue) - set the group to this ActivityTypes"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setActivityType"
}
, 
{
"doc"
:
"void (int /*AutomateTypes*/ eNewValue) - get the group to perform this AutomateTypes"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setAutomateType"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CySign"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"wstring getCaption()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCaption"
}
, 
{
"doc"
:
"PlayerTypes getPlayerType()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerType"
}
, 
{
"doc"
:
"CyPlot getPlot()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlot"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyStatistics"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int (int iPlayerID, int iBuildingID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerNumBuildingsBuilt"
}
, 
{
"doc"
:
"int (int iPlayerID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerNumCitiesBuilt"
}
, 
{
"doc"
:
"int (int iPlayerID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerNumCitiesRazed"
}
, 
{
"doc"
:
"int (int iPlayerID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerNumGoldenAges"
}
, 
{
"doc"
:
"int (int iPlayerID, int iUnitID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerNumUnitsBuilt"
}
, 
{
"doc"
:
"int (int iPlayerID, int iUnitID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerNumUnitsKilled"
}
, 
{
"doc"
:
"int (int iPlayerID, int iUnitID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerNumUnitsLost"
}
, 
{
"doc"
:
"bool (int iPlayerID, int iReligionID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerReligionFounded"
}
, 
{
"doc"
:
"int (int iPlayerID) - Returns the amount of time player iPlayerID has played this game for; note that this is only set at the end of the game and will return 0 during a game - use CyGame().getMinutesPlayed() instead"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerTimePlayed"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyTeam"
, 
"members"
:
[
{
"doc"
:
"int (TeamTypes)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_getAtPeaceCounter"
}
, 
{
"doc"
:
"int (TeamTypes)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_getAtWarCounter"
}
, 
{
"doc"
:
"int (TeamTypes)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_getWarSuccess"
}
, 
{
"doc"
:
"void (int /*TeamTypes*/ eIndex, int /*WarPlanTypes*/ eNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_setWarPlan"
}
, 
{
"doc"
:
"bool (TeamTypes)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"AI_shareWar"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"void (int /*TeamTypes*/ eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"addTeam"
}
, 
{
"doc"
:
"void (TeamTypes, bool)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"assignVassal"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canChangeWarPeace"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canContact"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canDeclareWar"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canLaunch"
}
, 
{
"doc"
:
"void (iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeBridgeBuildingCount"
}
, 
{
"doc"
:
"void (int /*CommerceTypes*/ eIndex, iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeCommerceFlexibleCount"
}
, 
{
"doc"
:
"void (TeamTypes eIndex, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeCounterespionageModAgainstTeam"
}
, 
{
"doc"
:
"void (TeamTypes eIndex, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeCounterespionageTurnsLeftAgainstTeam"
}
, 
{
"doc"
:
"void (iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeDefensivePactTradingCount"
}
, 
{
"doc"
:
"void (iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeEnemyWarWearinessModifier"
}
, 
{
"doc"
:
"void (TeamTypes eIndex, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeEspionagePointsAgainstTeam"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeEspionagePointsEver"
}
, 
{
"doc"
:
"void (int /*DomainTypes*/ eIndex, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeExtraMoves"
}
, 
{
"doc"
:
"void (iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeExtraWaterSeeFromCount"
}
, 
{
"doc"
:
"void (int /*VoteSourceTypes*/ eVoteSource, iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeForceTeamVoteEligibilityCount"
}
, 
{
"doc"
:
"void (iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeGoldTradingCount"
}
, 
{
"doc"
:
"void (iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeIgnoreIrrigationCount"
}
, 
{
"doc"
:
"void (int /*ImprovementTypes*/ eIndex1, int /*YieldTypes*/ eIndex2, iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeImprovementYieldChange"
}
, 
{
"doc"
:
"void (iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeIrrigationCount"
}
, 
{
"doc"
:
"void (iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeMapTradingCount"
}
, 
{
"doc"
:
"void (iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeNukeInterception"
}
, 
{
"doc"
:
"void (iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeOpenBordersTradingCount"
}
, 
{
"doc"
:
"void (iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changePermanentAllianceTradingCount"
}
, 
{
"doc"
:
"void (int /*ProjectTypes*/ eIndex, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeProjectCount"
}
, 
{
"doc"
:
"void (TechID, iChange, iPlayer ) - edits progress towards TechID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeResearchProgress"
}
, 
{
"doc"
:
"void (int /*RouteType*/ eIndex, int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeRouteChange"
}
, 
{
"doc"
:
"void (int iIndex, iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeTechShareCount"
}
, 
{
"doc"
:
"void (iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeTechTradingCount"
}
, 
{
"doc"
:
"void (iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeVassalTradingCount"
}
, 
{
"doc"
:
"void (int /*TeamTypes*/ eIndex, iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeWarWeariness"
}
, 
{
"doc"
:
"void (iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeWaterWorkCount"
}
, 
{
"doc"
:
"int (CyArea* pArea)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countEnemyDangerByArea"
}
, 
{
"doc"
:
"int (CyArea* pArea)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countEnemyPowerByArea"
}
, 
{
"doc"
:
"int (CyArea* pArea, int /*UnitAITypes*/ eUnitAI)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countNumAIUnitsByArea"
}
, 
{
"doc"
:
"int (CyArea* pArea)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countNumCitiesByArea"
}
, 
{
"doc"
:
"int (CyArea* pArea)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countNumUnitsByArea"
}
, 
{
"doc"
:
"int (CyArea* pArea)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countPowerByArea"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countTotalCulture"
}
, 
{
"doc"
:
"int (CyArea* pArea)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"countTotalPopulationByArea"
}
, 
{
"doc"
:
"void (int /*TeamTypes*/ eTeam, bool bNewDiplo, int /*WarPlanTypes*/ eWarPlan) - Forces your team to declare War on iTeam"
, 
"type"
:
"instancemethod"
, 
"name"
:
"declareWar"
}
, 
{
"doc"
:
"void (TeamTypes)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"freeVassal"
}
, 
{
"doc"
:
"int (bool bIgnoreMinors)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAnyWarPlanCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAssets"
}
, 
{
"doc"
:
"int (bool bIgnoreMinors)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAtWarCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBridgeBuildingCount"
}
, 
{
"doc"
:
"bool (int /*BuildingClassTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingClassCount"
}
, 
{
"doc"
:
"int (int (BuildingClassTypes) eBuildingClass)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingClassCountPlusMaking"
}
, 
{
"doc"
:
"int (int (BuildingClassTypes) eBuildingClass)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildingClassMaking"
}
, 
{
"doc"
:
"int (bool bIgnoreMinors)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getChosenWarCount"
}
, 
{
"doc"
:
"int (int /*CommerceTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCommerceFlexibleCount"
}
, 
{
"doc"
:
"int (TeamTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCounterespionageModAgainstTeam"
}
, 
{
"doc"
:
"int (TeamTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCounterespionageTurnsLeftAgainstTeam"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefensivePactCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefensivePactTradingCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDefensivePower"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEnemyWarWearinessModifier"
}
, 
{
"doc"
:
"int (TeamTypes eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionagePointsAgainstTeam"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionagePointsEver"
}
, 
{
"doc"
:
"int (int /*DomainTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraMoves"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraWaterSeeFromCount"
}
, 
{
"doc"
:
"int (int /*VoteSourceTypes*/ eVoteSource)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getForceTeamVoteEligibilityCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGoldTradingCount"
}
, 
{
"doc"
:
"int (HandicapTypes) ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHandicapType"
}
, 
{
"doc"
:
"int (int (CorporationTypes) eReligion)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHasCorporationCount"
}
, 
{
"doc"
:
"int (bool bIgnoreMinors)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHasMetCivCount"
}
, 
{
"doc"
:
"int (int (ReligionTypes) eReligion)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHasReligionCount"
}
, 
{
"doc"
:
"int () - team ID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getID"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getIgnoreIrrigationCount"
}
, 
{
"doc"
:
"int (int /*ImprovementTypes*/ eIndex1, int /*YieldTypes*/ eIndex2)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImprovementYieldChange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getIrrigationCount"
}
, 
{
"doc"
:
"int (int /*VictoryTypes*/)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLaunchSuccessRate"
}
, 
{
"doc"
:
"int (PlayerTypes) ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLeaderID"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMapTradingCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMasterPower"
}
, 
{
"doc"
:
"str ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getName"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNukeInterception"
}
, 
{
"doc"
:
"int (); # of cities controlled by team"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCities"
}
, 
{
"doc"
:
"int (); # of people on team"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumMembers"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumNukeUnits"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getObsoleteBuildingCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOpenBordersTradingCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPermanentAllianceTradingCount"
}
, 
{
"doc"
:
"int (bool bIncludeVassals)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPower"
}
, 
{
"doc"
:
"int (int /*ProjectTypes*/ eIndex, int number)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProjectArtType"
}
, 
{
"doc"
:
"bool (int /*ProjectTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProjectCount"
}
, 
{
"doc"
:
"bool (int /*ProjectTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProjectDefaultArtType"
}
, 
{
"doc"
:
"bool (int /*ProjectTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProjectMaking"
}
, 
{
"doc"
:
"int (TechID) - total cost of Tech"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getResearchCost"
}
, 
{
"doc"
:
"int (TechID) - Amount of remaining research necessary"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getResearchLeft"
}
, 
{
"doc"
:
"int (TechID) - progress towards finishing research on TechID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getResearchProgress"
}
, 
{
"doc"
:
"int (RouteType) - Route Change caused by RouteType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRouteChange"
}
, 
{
"doc"
:
"int (PlayerTypes) ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSecretaryID"
}
, 
{
"doc"
:
"int (TechID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechCount"
}
, 
{
"doc"
:
"int (int iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechShareCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTechTradingCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTotalLand"
}
, 
{
"doc"
:
"int (); # of citizens controlled by team"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTotalPopulation"
}
, 
{
"doc"
:
"int (int (UnitClassTypes) eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitClassCount"
}
, 
{
"doc"
:
"int (int (UnitClassTypes) eUnitClass)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitClassCountPlusMaking"
}
, 
{
"doc"
:
"int (int (UnitClassTypes) eUnitClass)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitClassMaking"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVassalPower"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVassalTradingCount"
}
, 
{
"doc"
:
"int (int /*VictoryTypes*/)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVictoryCountdown"
}
, 
{
"doc"
:
"int (int /*VictoryTypes*/)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVictoryDelay"
}
, 
{
"doc"
:
"int (int /*WarPlanTypes*/ eWarPlan, bool bIgnoreMinors)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWarPlanCount"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWarWeariness"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getWaterWorkCount"
}
, 
{
"doc"
:
"bool (int (CorporationTypes) eCorporation) - does this team have eCorporation's headquarters?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasHeadquarters"
}
, 
{
"doc"
:
"bool (int (ReligionTypes) eReligion) - does this team have eReligion's holy city?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasHolyCity"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasMetHuman"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAVassal"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAlive"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAtWar"
}
, 
{
"doc"
:
"bool () - is barbarian team?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBarbarian"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBridgeBuilding"
}
, 
{
"doc"
:
"bool (BuildingClassTypes, iExtra)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBuildingClassMaxedOut"
}
, 
{
"doc"
:
"bool (int /*CommerceTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCommerceFlexible"
}
, 
{
"doc"
:
"bool (TeamTypes)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDefensivePact"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDefensivePactTrading"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isEverAlive"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isExtraWaterSeeFrom"
}
, 
{
"doc"
:
"bool (TeamTypes)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isForcePeace"
}
, 
{
"doc"
:
"bool (int /*VoteSourceTypes*/ eVoteSource)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isForceTeamVoteEligible"
}
, 
{
"doc"
:
"bool (TeamTypes)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFreeTrade"
}
, 
{
"doc"
:
"bool () - gold trading?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGoldTrading"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHasMet"
}
, 
{
"doc"
:
"bool (TechID) - has the team researched techID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHasTech"
}
, 
{
"doc"
:
"bool () - is human team?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHuman"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isIgnoreIrrigation"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isIrrigation"
}
, 
{
"doc"
:
"bool () - map is centered"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMapCentering"
}
, 
{
"doc"
:
"bool () - map is ready"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMapTrading"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"isMinorCiv"
}
, 
{
"doc"
:
"bool (TechID)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoTradeTech"
}
, 
{
"doc"
:
"bool () - is this instance valid?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"bool (BuildingID - is BuildingID obsolete?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isObsoleteBuilding"
}
, 
{
"doc"
:
"bool (TeamTypes)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOpenBorders"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOpenBordersTrading"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPermanentAllianceTrading"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPermanentWarPeace"
}
, 
{
"doc"
:
"bool (int /*ProjectTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProjectAndArtMaxedOut"
}
, 
{
"doc"
:
"bool (int /*ProjectTypes*/ eIndex, int iExtra)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProjectMaxedOut"
}
, 
{
"doc"
:
"bool () - will let us know if rivers allow trade"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRiverTrade"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/ eIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isStolenVisibility"
}
, 
{
"doc"
:
"bool (int iIndex)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTechShare"
}
, 
{
"doc"
:
"bool () - tech trading?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTechTrading"
}
, 
{
"doc"
:
"bool (int iTerrainType) - will let us know if this terrain type allows trade"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTerrainTrade"
}
, 
{
"doc"
:
"bool (int (UnitClassTypes) eIndex, int iExtra)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isUnitClassMaxedOut"
}
, 
{
"doc"
:
"bool (TeamTypes)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVassal"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isVassalStateTrading"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWaterWork"
}
, 
{
"doc"
:
"void (int /*TeamTypes*/ eTeam) - Forces peace between your team and iTeam"
, 
"type"
:
"instancemethod"
, 
"name"
:
"makePeace"
}
, 
{
"doc"
:
"void (int /*TeamTypes*/ eTeam, bool bNewDiplo) - forces team to meet iTeam"
, 
"type"
:
"instancemethod"
, 
"name"
:
"meet"
}
, 
{
"doc"
:
"void (TeamTypes eIndex, int iValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCounterespionageModAgainstTeam"
}
, 
{
"doc"
:
"void (TeamTypes eIndex, int iValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCounterespionageTurnsLeftAgainstTeam"
}
, 
{
"doc"
:
"void (TeamTypes eIndex, int iValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setEspionagePointsAgainstTeam"
}
, 
{
"doc"
:
"void (int iValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setEspionagePointsEver"
}
, 
{
"doc"
:
"void (TechID, bNewValue, iPlayer, bFirst, bAnnounce)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setHasTech"
}
, 
{
"doc"
:
"void (bNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMapCentering"
}
, 
{
"doc"
:
"void (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMasterPower"
}
, 
{
"doc"
:
"void (TechID, bNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setNoTradeTech"
}
, 
{
"doc"
:
"void (int /*TeamTypes*/ eIndex, bool bNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPermanentWarPeace"
}
, 
{
"doc"
:
"void (int /*ProjectTypes*/ eIndex, int number, int value)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setProjectArtType"
}
, 
{
"doc"
:
"void (int /*ProjectTypes*/ eIndex, int value)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setProjectDefaultArtType"
}
, 
{
"doc"
:
"void (TechID, iNewValue, iPlayer ) - sets progress towards TechID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setResearchProgress"
}
, 
{
"doc"
:
"void (TeamTypes, bool)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setVassal"
}
, 
{
"doc"
:
"void (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setVassalPower"
}
, 
{
"doc"
:
"void (int /*TeamTypes*/ eIndex, iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setWarWeariness"
}
, 
{
"doc"
:
"void (int /*TeamTypes*/ eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"signDefensivePact"
}
, 
{
"doc"
:
"void (int /*TeamTypes*/ eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"signOpenBorders"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyTranslator"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"string (string szText, int iColor)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeTextColor"
}
, 
{
"doc"
:
"string (string szTag, tuple args, int iColor)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getColorText"
}
, 
{
"doc"
:
"string (string szTag, int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getObjectText"
}
, 
{
"doc"
:
"string (string szTag, tuple args)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getText"
}
, 
{
"doc"
:
"string (string szText)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"stripHTML"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyUnit"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"IsSelected"
}
, 
{
"doc"
:
"void (int EntityEventType)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"NotifyEntity"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"airBaseCombatStr"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"airBombBaseRate"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"airBombCurrRate"
}
, 
{
"doc"
:
"int (CyUnit* pDefender)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"airCombatDamage"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"airCombatLimit"
}
, 
{
"doc"
:
"int (CyUnit* pOther)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"airCurrCombatStr"
}
, 
{
"doc"
:
"float (CyUnit* pOther)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"airCurrCombatStrFloat"
}
, 
{
"doc"
:
"int (CyUnit* pOther)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"airMaxCombatStr"
}
, 
{
"doc"
:
"float (CyUnit* pOther)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"airMaxCombatStrFloat"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"airRange"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"alwaysInvisible"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"animalCombatModifier"
}
, 
{
"doc"
:
"CyArea* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"area"
}
, 
{
"doc"
:
"bool (int iX, int iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"at"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"atPlot"
}
, 
{
"doc"
:
"void attackForDamage(CyUnit *defender, int attakerDamageChange, int defenderDamageChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attackForDamage"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"attackXPValue"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"baseCombatStr"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"baseMoves"
}
, 
{
"doc"
:
"CyUnit* (CyPlot*)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"bestInterceptor"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"bombardRate"
}
, 
{
"doc"
:
"CyCity* (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"bombardTarget"
}
, 
{
"doc"
:
"bool (int /*PromotionTypes*/ ePromotion)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canAcquirePromotion"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canAcquirePromotionAny"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canAirAttack"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canAirBomb"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, int iX, int iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canAirBombAt"
}
, 
{
"doc"
:
"bool (CyPlot*)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canAirDefend"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canAirPatrol"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canAirlift"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, int iX, int iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canAirliftAt"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canAttack"
}
, 
{
"doc"
:
"bool (int (AutomateTypes) eAutomate)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canAutomate"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canBombard"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, int (BuildTypes) eBuild, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canBuild"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canBuildRoute"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canCargoAllMove"
}
, 
{
"doc"
:
"bool (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canCoexistWithEnemyUnit"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, int (BuildingTypes) eBuilding)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canConstruct"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canDefend"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canDestroy"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canDiscover"
}
, 
{
"doc"
:
"bool (eCommand, iData1, iData2, bTestVisible = False) - can the unit perform eCommand?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canDoCommand"
}
, 
{
"doc"
:
"bool (int (TeamTypes) eTeam, CyArea* pArea, bool bIgnoreRightOfPassage)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canEnterArea"
}
, 
{
"doc"
:
"bool (int (TeamTypes) eTeam, bool bIgnoreRightOfPassage)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canEnterTerritory"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canEspionage"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canFight"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canFortify"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canFound"
}
, 
{
"doc"
:
"bool (bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canGift"
}
, 
{
"doc"
:
"int (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canGiveExperience"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canGoldenAge"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canGreatWork"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canHeal"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canHold"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canHurry"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canInfiltrate"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, int (SpecialistTypes) eSpecialist)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canJoin"
}
, 
{
"doc"
:
"int (CyPlot* pPlot, int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canLead"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canLoad"
}
, 
{
"doc"
:
"bool (CyUnit* pUnit, CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canLoadUnit"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canMove"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canMoveAllTerrain"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canMoveImpassable"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, bool bAttack, bool bDeclareWar, bool bIgnoreLoad)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canMoveInto"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, bool bDeclareWar)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canMoveOrAttackInto"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canMoveThrough"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canNuke"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, int iX, int iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canNukeAt"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canPillage"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canPlunder"
}
, 
{
"doc"
:
"bool (ePromotion, iLeaderUnitId)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canPromote"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canRecon"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, int iX, int iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canReconAt"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canSabotage"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canScrap"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canSeaPatrol"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canSentry"
}
, 
{
"doc"
:
"bool (int /*TeamTypes*/ eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canSiege"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canSleep"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, int /*ReligionTypes*/ eReligion, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canSpread"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canStealPlans"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canTrade"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canUnload"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canUnloadAll"
}
, 
{
"doc"
:
"bool (int /*UnitTypes*/ eUnit, bool bTestVisible)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"canUpgrade"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"cargoSpace"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"cargoSpaceAvailable"
}
, 
{
"doc"
:
"void () - Centers the Camera on the unit"
, 
"type"
:
"instancemethod"
, 
"name"
:
"centerCamera"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"chanceFirstStrikes"
}
, 
{
"doc"
:
"void (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeCargoSpace"
}
, 
{
"doc"
:
"void (int iChange, int /*PlayerTypes*/ ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeDamage"
}
, 
{
"doc"
:
"void (int iChange, int iMax, bool bFromCombat, bool bInBorders, bool bUpdateGlobal)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeExperience"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"changeLevel"
}
, 
{
"doc"
:
"void (int iChange)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"changeMoves"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"cityAttackModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"cityDefenseModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"collateralDamage"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"collateralDamageLimit"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"collateralDamageMaxUnits"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"combatLimit"
}
, 
{
"doc"
:
"void (CyUnit* pUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"convert"
}
, 
{
"doc"
:
"int (CyPlot* pPlot, CyUnit* pAttacker)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"currCombatStr"
}
, 
{
"doc"
:
"float (CyPlot* pPlot, CyUnit* pAttacker)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"currCombatStrFloat"
}
, 
{
"doc"
:
"int (CyPlot* pPlot, CyUnit* pAttacker)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"currFirepower"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"currHitPoints"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"currInterceptionProbability"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"defenseXPValue"
}
, 
{
"doc"
:
"int (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"destroyCost"
}
, 
{
"doc"
:
"int (CyPlot* pPlot, int /*ProbabilityTypes*/ eProbStyle)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"destroyProb"
}
, 
{
"doc"
:
"void (eCommand, iData1, iData2) - force the unit to perform eCommand"
, 
"type"
:
"instancemethod"
, 
"name"
:
"doCommand"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"domainCargo"
}
, 
{
"doc"
:
"int (int /*DomainTypes*/ eDomain)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"domainModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"evasionProbability"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"experienceNeeded"
}
, 
{
"doc"
:
"int (int /*FeatureTypes*/ eFeature)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"featureAttackModifier"
}
, 
{
"doc"
:
"int (int /*FeatureTypes*/ eFeature)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"featureDefenseModifier"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"finishMoves"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"firstStrikes"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"flatMovementCost"
}
, 
{
"doc"
:
"int (FlavorTypes eFlavor)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"flavorValue"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"fortifyModifier"
}
, 
{
"doc"
:
"bool (CyPlot* pToPlot, int iFlags = 0, bool bReuse = false, int* piPathTurns = NULL)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"generatePath"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAdjacentTileHeal"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAmphibCount"
}
, 
{
"doc"
:
"CvArtInfoUnit* (int i, eEra)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getArtInfo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBlitzCount"
}
, 
{
"doc"
:
"int (BuildTypes) ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getBuildType"
}
, 
{
"doc"
:
"std::string ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getButton"
}
, 
{
"doc"
:
"int (int /*CivilizationTypes*/ eCivilization)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCaptureUnitType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCargo"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCivilizationType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCollateralDamageProtection"
}
, 
{
"doc"
:
"int (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCombatOwner"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDamage"
}
, 
{
"doc"
:
"TeamTypes (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDeclareWarMove"
}
, 
{
"doc"
:
"int (int /*TechTypes*/ eTech)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDiscoverResearch"
}
, 
{
"doc"
:
"int /*TechTypes*/ ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDiscoveryTech"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getDomainType"
}
, 
{
"doc"
:
"int (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getEspionagePoints"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExperience"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExperiencePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraAirRange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraChanceFirstStrikes"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraCityAttackPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraCityDefensePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraCollateralDamage"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraCombatPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraDomainModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraEnemyHeal"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraEvasion"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraFeatureAttackPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraFeatureDefensePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraFirstStrikes"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraFriendlyHeal"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraHillsAttackPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraHillsDefensePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraIntercept"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraMoveDiscount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraMoves"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraNeutralHeal"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraTerrainAttackPercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraTerrainDefensePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraUnitCombatModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraVisibilityRange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getExtraWithdrawal"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFacingDirection"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFortifyTurns"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGameTurnCreated"
}
, 
{
"doc"
:
"int (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGreatWorkCulture"
}
, 
{
"doc"
:
"CySelectionGroup* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGroup"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGroupID"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHandicapType"
}
, 
{
"doc"
:
"int () - returns the HotKey number for this unit"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHotKeyNumber"
}
, 
{
"doc"
:
"int (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getHurryProduction"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getID"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getImmobileTimer"
}
, 
{
"doc"
:
"int (InvisibleTypes) ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInvisibleType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getKamikazePercent"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLeaderUnitType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getLevel"
}
, 
{
"doc"
:
"int (CyCity* pCity)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxHurryProduction"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMoves"
}
, 
{
"doc"
:
"str () - Returns the name of a unit along with its type description in parens if using a custom name"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getName"
}
, 
{
"doc"
:
"str (int iForm)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNameForm"
}
, 
{
"doc"
:
"str ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNameKey"
}
, 
{
"doc"
:
"str () - Returns the name of a unit without any description afterwards"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNameNoDesc"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumSeeInvisibleTypes"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getOwner"
}
, 
{
"doc"
:
"CyPlot* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPathEndTurnPlot"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPillageChange"
}
, 
{
"doc"
:
"CyPlot* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getReconPlot"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRevoltProtection"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRiverCount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSameTileHeal"
}
, 
{
"doc"
:
"str ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScriptData"
}
, 
{
"doc"
:
"int (InvisibleTypes) (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSeeInvisibleType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpecialUnitType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTeam"
}
, 
{
"doc"
:
"int (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTradeGold"
}
, 
{
"doc"
:
"CyUnit* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getTransportUnit"
}
, 
{
"doc"
:
"int (int (UnitAITypes) eUnitAI)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitAICargo"
}
, 
{
"doc"
:
"int UnitAIType () - returns the int value of the UnitAIType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitAIType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitClassType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitCombatType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnitType"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUpgradeDiscount"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVisualOwner"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getX"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getY"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"giveExperience"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasCargo"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasMoved"
}
, 
{
"doc"
:
"bool (bool bSearch)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hasUpgrade"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hillsAttackModifier"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"hillsDefenseModifier"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"ignoreBuildingDefense"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"ignoreTerrainCost"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"immuneToFirstStrikes"
}
, 
{
"doc"
:
"int (int i)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isActionRecommended"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAlwaysHeal"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAmphib"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAnimal"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAttacking"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAutomated"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBarbarian"
}
, 
{
"doc"
:
"bool (CyUnit* pDefender, CyUnit* pAttacker)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBetterDefenderThan"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isBlitz"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCargo"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCombat"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isCounterSpy"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDead"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isDefending"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isEnemyRoute"
}
, 
{
"doc"
:
"bool (FeatureType)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFeatureDoubleMove"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFighting"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFortifyable"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFound"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isFull"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGoldenAge"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isGroupHead"
}
, 
{
"doc"
:
"bool (int /*PromotionTypes*/ ePromotion)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHasPromotion"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHillsDoubleMove"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHuman"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isHurt"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isInGroup"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isInvestigate"
}
, 
{
"doc"
:
"bool (int (TeamTypes) eTeam, bool bDebug)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isInvisible"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMadeAttack"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMadeInterception"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMilitaryHappiness"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNeverInvisible"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoBadGoodies"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNoCapture"
}
, 
{
"doc"
:
"bool () - Is this a valid unit instance?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNukeImmune"
}
, 
{
"doc"
:
"bool (CyPlot* pPlot, int eTeam)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNukeVictim"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isOnlyDefensive"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPromotionReady"
}
, 
{
"doc"
:
"bool (int /*PromotionTypes*/ ePromotion)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isPromotionValid"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRanged"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRivalTerritory"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isRiver"
}
, 
{
"doc"
:
"bool (TerrainType)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isTerrainDoubleMove"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isWaiting"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"jumpToNearestValidPlot"
}
, 
{
"doc"
:
"void (bool bDelay, int /*PlayerTypes*/ ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"kill"
}
, 
{
"doc"
:
"bool (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"lead"
}
, 
{
"doc"
:
"int (CyPlot* pPlot, CyUnit* pAttacker)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"maxCombatStr"
}
, 
{
"doc"
:
"float (CyPlot* pPlot, CyUnit* pAttacker)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"maxCombatStrFloat"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"maxFirstStrikes"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"maxHitPoints"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"maxInterceptionProbability"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"maxMoves"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"maxXPValue"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"movesLeft"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"noDefensiveBonus"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"nukeRange"
}
, 
{
"doc"
:
"CyPlot* ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"plot"
}
, 
{
"doc"
:
"bool (ePromotion)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"promote"
}
, 
{
"doc"
:
"void rangeStrike(int iX, int iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"rangeStrike"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"rotateFacingDirectionClockwise"
}
, 
{
"doc"
:
"void ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"rotateFacingDirectionCounterClockwise"
}
, 
{
"doc"
:
"int (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"sabotageCost"
}
, 
{
"doc"
:
"int (CyPlot* pPlot, int /*ProbabilityTypes*/ eProbStyle)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"sabotageProb"
}
, 
{
"doc"
:
"void (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setBaseCombatStr"
}
, 
{
"doc"
:
"void (int iNewValue, int /*PlayerTypes*/ ePlayer)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setDamage"
}
, 
{
"doc"
:
"void (int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setExperience"
}
, 
{
"doc"
:
"void (int (PromotionTypes) eIndex, bool bNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setHasPromotion"
}
, 
{
"doc"
:
"void (int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setHotKeyNumber"
}
, 
{
"doc"
:
"void (int)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setImmobileTimer"
}
, 
{
"doc"
:
"void (int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setLeaderUnitType"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"setLevel"
}
, 
{
"doc"
:
"void (int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMadeAttack"
}
, 
{
"doc"
:
"void (int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMadeInterception"
}
, 
{
"doc"
:
"void (int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMoves"
}
, 
{
"doc"
:
"void (str)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setName"
}
, 
{
"doc"
:
"void (int iNewValue)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPromotionReady"
}
, 
{
"doc"
:
"void (CyPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setReconPlot"
}
, 
{
"doc"
:
"void (str)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScriptData"
}
, 
{
"doc"
:
"void (CyUnit* pTransportUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setTransportUnit"
}
, 
{
"doc"
:
"void UnitAIType (int iUnitAIType) - sets the unit's UnitAIType"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setUnitAIType"
}
, 
{
"doc"
:
"int (int iX, int iY)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setXY"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"specialCargo"
}
, 
{
"doc"
:
"int (CyPlot* pPlot)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"stealPlansCost"
}
, 
{
"doc"
:
"int (CyPlot* pPlot, int /*ProbabilityTypes*/ eProbStyle)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"stealPlansProb"
}
, 
{
"doc"
:
"int (int /*TerrainTypes*/ eTerrain)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"terrainAttackModifier"
}
, 
{
"doc"
:
"int (int /*TerrainTypes*/ eTerrain)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"terrainDefenseModifier"
}
, 
{
"doc"
:
"int (int /*UnitClassTypes*/ eUnitClass)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"unitClassAttackModifier"
}
, 
{
"doc"
:
"int (int /*UnitClassTypes*/ eUnitClass)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"unitClassDefenseModifier"
}
, 
{
"doc"
:
"int (int /*UnitCombatTypes*/ eUnitCombat)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"unitCombatModifier"
}
, 
{
"doc"
:
"bool (int /*UnitTypes*/ eFromUnit, int /*UnitClassTypes*/ eToUnitClass, int iCount)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"upgradeAvailable"
}
, 
{
"doc"
:
"int (UnitTypes eUnit)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"upgradePrice"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"visibilityRange"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"withdrawalProbability"
}
, 
{
"doc"
:
"int (bool bMax)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"workRate"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyUnitEntity"
, 
"members"
:
[
{
"doc"
:
"CyUnitSubEnitty * GetSubEntity(uint) - Returns the CySubUnitEntity at the given index"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetSubEntity"
}
, 
{
"doc"
:
"uint GetSubEntityCount() - Returns the number of CyUnitSubEntitys in this unit"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetSubEntityCount"
}
, 
{
"doc"
:
"int GetUnitsCurrentlyAlive() - Returns the number of sub-units that are alive"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetUnitsCurrentlyAlive"
}
, 
{
"doc"
:
"void MoveTo(x, y, z, rad) - Moves the unit to the given position"
, 
"type"
:
"instancemethod"
, 
"name"
:
"MoveTo"
}
, 
{
"doc"
:
"void NotifyEntity(int) - Notifies this entity of the given event"
, 
"type"
:
"instancemethod"
, 
"name"
:
"NotifyEntity"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"float ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScale"
}
, 
{
"doc"
:
"CyUnit * getUnit() - Returns the CyUnit associated with this CyUnitEntity"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getUnit"
}
, 
{
"doc"
:
"bool isNone() - Is this instance valid?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"void (float fScale)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setScale"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyUnitSubEntity"
, 
"members"
:
[
{
"doc"
:
"void PlayAnimationPath(int) - Plays the given animation path"
, 
"type"
:
"instancemethod"
, 
"name"
:
"PlayAnimationPath"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"bool isNone() - Is this instance valid?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"void setUnitShadow(bool) - shows/hides a sub-unit's shadow"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setUnitShadow"
}
, 
{
"doc"
:
"void setVisible(bool) - shows/hides a sub-unit"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setVisible"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyUserProfile"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"bool (string szNewName) - Deletes the file (no extension) in Civ4\\Profiles\\ IF it exists - returns whether or not a file actually was deleted"
, 
"type"
:
"instancemethod"
, 
"name"
:
"deleteProfileFile"
}
, 
{
"doc"
:
"int () - returns the Ambiance volume level"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAmbienceVolume"
}
, 
{
"doc"
:
"int () - returns the number of Anti-Aliasing MultiSamples level currently enabled"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAntiAliasing"
}
, 
{
"doc"
:
"int () - return the number of Anti-Aliasing MultiSamples available on the video card"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getAntiAliasingMaxMultiSamples"
}
, 
{
"doc"
:
"string (int) - returns name of capture device at provided index"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCaptureDeviceDesc"
}
, 
{
"doc"
:
"int () - returns the index of currently selected capture device"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCaptureDeviceIndex"
}
, 
{
"doc"
:
"int () - returns current capture volume"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCaptureVolume"
}
, 
{
"doc"
:
"int () - Returns the current version of the user profile system in place"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getCurrentVersion"
}
, 
{
"doc"
:
"int ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobeLayer"
}
, 
{
"doc"
:
"int () - returns the globe view render level"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGlobeViewRenderLevel"
}
, 
{
"doc"
:
"bool (int i) - returns value of option i"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGraphicOption"
}
, 
{
"doc"
:
"int () - returns the graphics quality level"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGraphicsLevel"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getGrid"
}
, 
{
"doc"
:
"int () - returns the Interface volume level"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getInterfaceVolume"
}
, 
{
"doc"
:
"int () - returns the main menu index currently used"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMainMenu"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMap"
}
, 
{
"doc"
:
"int () - returns the Master volume level"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMasterVolume"
}
, 
{
"doc"
:
"int () - returns max range of capture volume"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxCaptureVolume"
}
, 
{
"doc"
:
"int () - returns max range of Playback volume"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMaxPlaybackVolume"
}
, 
{
"doc"
:
"int () - returns the movie quality level"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMovieQualityLevel"
}
, 
{
"doc"
:
"string () - Returns the current custom music folder path (blank if no path set)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMusicPath"
}
, 
{
"doc"
:
"int () - returns the music volume level"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getMusicVolume"
}
, 
{
"doc"
:
"int () - returns number of available voice capture devices"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumCaptureDevices"
}
, 
{
"doc"
:
"int () - returns number of available voice Playback devices"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumPlaybackDevices"
}
, 
{
"doc"
:
"uint () - Returns the number of .prf files in the the Civ4\\Profiles\\ directory"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNumProfileFiles"
}
, 
{
"doc"
:
"string (int) - returns name of Playback device at provided index"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlaybackDeviceDesc"
}
, 
{
"doc"
:
"int () - returns the index of currently selected Playback device"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlaybackDeviceIndex"
}
, 
{
"doc"
:
"int () - returns current Playback volume"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlaybackVolume"
}
, 
{
"doc"
:
"bool (int i) - returns value of option i"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getPlayerOption"
}
, 
{
"doc"
:
"string (int iFileID) - Returns the name of the file associated with iFileID"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProfileFileName"
}
, 
{
"doc"
:
"string () - Returns the name of the current profile"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProfileName"
}
, 
{
"doc"
:
"int () - Returns the version number of the active profile"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getProfileVersion"
}
, 
{
"doc"
:
"int () - returns the render Quality level"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getRenderQualityLevel"
}
, 
{
"doc"
:
"int () - returns the Resolution option currently enabled"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getResolution"
}
, 
{
"doc"
:
"int () - returns the number of supported resolutions"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getResolutionMaxModes"
}
, 
{
"doc"
:
"std::string (int iResolution) - returns the resolution string for the associated resolution index"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getResolutionString"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getScores"
}
, 
{
"doc"
:
"int () - returns the sound effects volume level"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSoundEffectsVolume"
}
, 
{
"doc"
:
"string () - returns the name of the currently active Speaker Configuration"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpeakerConfig"
}
, 
{
"doc"
:
"string (int iIndex) - returns the speaker configuration associated with iIndex"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpeakerConfigFromList"
}
, 
{
"doc"
:
"int () - returns the Speech volume level"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getSpeechVolume"
}
, 
{
"doc"
:
"int () - returns the number of stops that should be available for each volume slider"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVolumeStops"
}
, 
{
"doc"
:
"bool ()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getYields"
}
, 
{
"doc"
:
"bool () - is the 24 hour system enabled?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"is24Hours"
}
, 
{
"doc"
:
"bool () - returns whether or not Ambiance sound is disabled"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isAmbienceNoSound"
}
, 
{
"doc"
:
"bool () - is the clock on?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isClockOn"
}
, 
{
"doc"
:
"bool () - returns whether or not Interface sound is disabled"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isInterfaceNoSound"
}
, 
{
"doc"
:
"bool () - returns whether or not Master sound is disabled"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMasterNoSound"
}
, 
{
"doc"
:
"bool () - returns whether or not Music sound is disabled"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isMusicNoSound"
}
, 
{
"doc"
:
"bool (string szNewName) - Returns whether or not szFileName (no extension) exists in Civ4\\Profiles\\"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isProfileFileExist"
}
, 
{
"doc"
:
"bool () - returns whether or not SoundEffects sound is disabled"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSoundEffectsNoSound"
}
, 
{
"doc"
:
"bool () - returns whether or not Speech sound is disabled"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isSpeechNoSound"
}
, 
{
"doc"
:
"void - Recalculates the list of Profile files that exist"
, 
"type"
:
"instancemethod"
, 
"name"
:
"loadProfileFileNames"
}
, 
{
"doc"
:
"void () - Brings up a dialog box which is used to allow the user to set a custom music directory)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"musicPathDialogBox"
}
, 
{
"doc"
:
"bool (string szFileName) - Reads the CvUserProfile data from file szFileName; returns whether or not the read was successful"
, 
"type"
:
"instancemethod"
, 
"name"
:
"readFromFile"
}
, 
{
"doc"
:
"void () - enacts audio setting members to the audio system"
, 
"type"
:
"instancemethod"
, 
"name"
:
"recalculateAudioSettings"
}
, 
{
"doc"
:
"void (TabGroupTypes resetTab) - Resets the options to default (Tabgroup type - use NOTABGROUP to reset all user profile data"
, 
"type"
:
"instancemethod"
, 
"name"
:
"resetOptions"
}
, 
{
"doc"
:
"void (bool bValue) - set the 24 hour system to state bValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"set24Hours"
}
, 
{
"doc"
:
"void (bool b) - sets whether or not Ambiance sound is disabled"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setAmbienceNoSound"
}
, 
{
"doc"
:
"void (int i) - sets the Ambiance volume to i"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setAmbienceVolume"
}
, 
{
"doc"
:
"void (int i) - sets the Anti-Aliasing MultiSamples level currently enabled to i"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setAntiAliasing"
}
, 
{
"doc"
:
"void (int) - selects a capture device"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCaptureDevice"
}
, 
{
"doc"
:
"void (int) - sets capture volume"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setCaptureVolume"
}
, 
{
"doc"
:
"void (bool bValue) - set clock just turned on to state bValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setClockJustTurnedOn"
}
, 
{
"doc"
:
"void (bool bValue) - set the clock to state bValue"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setClockOn"
}
, 
{
"doc"
:
"void (int level) - sets the globe view render level"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setGlobeViewRenderLevel"
}
, 
{
"doc"
:
"void (int i, bool b) - sets the value of option i to b"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setGraphicOption"
}
, 
{
"doc"
:
"void (int i) - sets the Graphics quality to i"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setGraphicsLevel"
}
, 
{
"doc"
:
"void (bool b) - sets whether or not Interface sound is disabled"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setInterfaceNoSound"
}
, 
{
"doc"
:
"void (int i) - sets the Interface volume to i"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setInterfaceVolume"
}
, 
{
"doc"
:
"void (int i) - sets the main menu index currently used"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMainMenu"
}
, 
{
"doc"
:
"void (bool b) - sets whether or not Master sound is disabled"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMasterNoSound"
}
, 
{
"doc"
:
"void (int i) - sets the Master volume to i"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMasterVolume"
}
, 
{
"doc"
:
"void (int level) - sets the movie quality level"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMovieQualityLevel"
}
, 
{
"doc"
:
"void (bool b) - sets whether or not Music sound is disabled"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMusicNoSound"
}
, 
{
"doc"
:
"void (string szMusicPath) - sets the custom music folder path"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMusicPath"
}
, 
{
"doc"
:
"void (int i) - sets the music volume to i"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setMusicVolume"
}
, 
{
"doc"
:
"void (int) - selects a Playback device"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPlaybackDevice"
}
, 
{
"doc"
:
"void (int) - sets Playback volume"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setPlaybackVolume"
}
, 
{
"doc"
:
"void (string szNewName) - Assigns the internal UserProfile name to szNewName"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setProfileName"
}
, 
{
"doc"
:
"void (int level) - sets the render Quality level"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setRenderQualityLevel"
}
, 
{
"doc"
:
"bool (int i) - sets the Resolution option currently enabled to i"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setResolution"
}
, 
{
"doc"
:
"void (bool b) - sets whether or not SoundEffects sound is disabled"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSoundEffectsNoSound"
}
, 
{
"doc"
:
"void (int i) - sets the sound effects volume to i"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSoundEffectsVolume"
}
, 
{
"doc"
:
"void (string szConfigName) - sets the Speaker Configuration to szConfigName if it is a valid choice"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSpeakerConfig"
}
, 
{
"doc"
:
"void (bool b) - sets whether or not Speech sound is disabled"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSpeechNoSound"
}
, 
{
"doc"
:
"void (int i) - sets the Speech volume to i"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setSpeechVolume"
}
, 
{
"doc"
:
"void (bool) - sets whether to use voice capture/playback"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setUseVoice"
}
, 
{
"doc"
:
"bool () - returns whether or not to use voice capture/playback"
, 
"type"
:
"instancemethod"
, 
"name"
:
"useVoice"
}
, 
{
"doc"
:
"bool () - was the clock just turned on?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"wasClockJustTurnedOn"
}
, 
{
"doc"
:
"void (string szFileName) - Writes the CvUserProfile data to file szFileName"
, 
"type"
:
"instancemethod"
, 
"name"
:
"writeToFile"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"CyVariableSystem"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"doc"
:
"std::string getFirstVariableName( )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getFirstVariableName"
}
, 
{
"doc"
:
"std::string getNextVariableName( )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getNextVariableName"
}
, 
{
"doc"
:
"float getValueFloat( TCHAR * szVarName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getValueFloat"
}
, 
{
"doc"
:
"int getValueInt( TCHAR * szVarName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getValueInt"
}
, 
{
"doc"
:
"std::string getValueString( TCHAR * szVarName )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getValueString"
}
, 
{
"doc"
:
"std::string getVariableType( TCHAR * szVariable )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"getVariableType"
}
, 
{
"doc"
:
"bool isNone() - Is this instance valid?"
, 
"type"
:
"instancemethod"
, 
"name"
:
"isNone"
}
, 
{
"doc"
:
"setValueFloat( TCHAR * szVarName, float fValue )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setValueFloat"
}
, 
{
"doc"
:
"setValueInt( TCHAR * szVarName, int iValue )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setValueInt"
}
, 
{
"doc"
:
"setValueString( TCHAR * szVarName, TCHAR * szValue )"
, 
"type"
:
"instancemethod"
, 
"name"
:
"setValueString"
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"DLLProfilerCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"DenialTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_ANGER_CIVIC"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_ATTITUDE"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_ATTITUDE_THEM"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_CONTACT_THEM"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_FAVORITE_CIVIC"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_JOKING"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_MINORITY_RELIGION"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_MYSTERY"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_NEVER"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_NOT_ALLIED"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_NO_GAIN"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_POWER_THEM"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_POWER_US"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_POWER_YOU"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_POWER_YOUR_ENEMIES"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_RECENT_CANCEL"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_TECH_MONOPOLY"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_TECH_WHORE"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_TOO_FAR"
, 
"value"
:
23
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_TOO_MANY_WARS"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_TOO_MUCH"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_UNKNOWN"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_VICTORY"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"DENIAL_WORST_ENEMY"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"NO_DENIAL"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[23]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.DenialTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"DiploCommentTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.DiploCommentTypes"
, 
"name"
:
"NO_DIPLOCOMMENT"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.DiploCommentTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"DiploEventTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_ACCEPT_DEMAND"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_AI_CONTACT"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_ASK_HELP"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_CONTACT"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_CONVERT"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_DEMAND_WAR"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_FAILED_CONTACT"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_GIVE_HELP"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_JOIN_WAR"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_MADE_DEMAND"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_MADE_DEMAND_VASSAL"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_NO_CONVERT"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_NO_JOIN_WAR"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_NO_REVOLUTION"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_NO_STOP_TRADING"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_REFUSED_HELP"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_REJECTED_DEMAND"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_RESEARCH_TECH"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_REVOLUTION"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_STOP_TRADING"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"DIPLOEVENT_TARGET_CITY"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"NO_DIPLOEVENT"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"NUM_DIPLOEVENT_TYPES"
, 
"value"
:
21
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[21]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.DiploEventTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"DiplomacyPowerTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.DiplomacyPowerTypes"
, 
"name"
:
"DIPLOMACYPOWER_EQUAL"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.DiplomacyPowerTypes"
, 
"name"
:
"DIPLOMACYPOWER_STRONGER"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.DiplomacyPowerTypes"
, 
"name"
:
"DIPLOMACYPOWER_WEAKER"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.DiplomacyPowerTypes"
, 
"name"
:
"NO_DIPLOMACYPOWER"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.DiplomacyPowerTypes"
, 
"name"
:
"NUM_DIPLOMACYPOWER_TYPES"
, 
"value"
:
3
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.DiplomacyPowerTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.DiplomacyPowerTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.DiplomacyPowerTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.DiplomacyPowerTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.DiplomacyPowerTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"Direct3DQueryCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"DirectionTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"DIRECTION_EAST"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"DIRECTION_NORTH"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"DIRECTION_NORTHEAST"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"DIRECTION_NORTHWEST"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"DIRECTION_SOUTH"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"DIRECTION_SOUTHEAST"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"DIRECTION_SOUTHWEST"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"DIRECTION_WEST"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"NO_DIRECTION"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"NUM_DIRECTION_TYPES"
, 
"value"
:
8
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.DirectionTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"DisableTextureCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"DisplayCutTreesCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"DisplayQuadTreeCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"DomainTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.DomainTypes"
, 
"name"
:
"DOMAIN_AIR"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.DomainTypes"
, 
"name"
:
"DOMAIN_IMMOBILE"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.DomainTypes"
, 
"name"
:
"DOMAIN_LAND"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.DomainTypes"
, 
"name"
:
"DOMAIN_SEA"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.DomainTypes"
, 
"name"
:
"NUM_DOMAIN_TYPES"
, 
"value"
:
4
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.DomainTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.DomainTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.DomainTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.DomainTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.DomainTypes"
, 
"name"
:
"values[4]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"DumpGeoStatsCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"EmphasizeTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.EmphasizeTypes"
, 
"name"
:
"NO_EMPHASIZE"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.EmphasizeTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"EndTurnButtonStates"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.EndTurnButtonStates"
, 
"name"
:
"END_TURN_GO"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.EndTurnButtonStates"
, 
"name"
:
"END_TURN_OVER_DARK"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.EndTurnButtonStates"
, 
"name"
:
"END_TURN_OVER_HIGHLIGHT"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.EndTurnButtonStates"
, 
"name"
:
"NUM_END_TURN_STATES"
, 
"value"
:
3
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.EndTurnButtonStates"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.EndTurnButtonStates"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.EndTurnButtonStates"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.EndTurnButtonStates"
, 
"name"
:
"values[3]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"EngineDirtyBits"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.EngineDirtyBits"
, 
"name"
:
"CultureBorders_DIRTY_BIT"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.EngineDirtyBits"
, 
"name"
:
"GlobeTexture_DIRTY_BIT"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.EngineDirtyBits"
, 
"name"
:
"MinimapTexture_DIRTY_BIT"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.EngineDirtyBits"
, 
"name"
:
"NUM_ENGINE_DIRTY_BITS"
, 
"value"
:
4
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.EngineDirtyBits"
, 
"name"
:
"values[0]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.EngineDirtyBits"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.EngineDirtyBits"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.EngineDirtyBits"
, 
"name"
:
"values[4]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"EntityEventTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.EntityEventTypes"
, 
"name"
:
"ENTITY_EVENT_NONE"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.EntityEventTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"EraTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.EraTypes"
, 
"name"
:
"NO_ERA"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.EraTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"EspionageMissionTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.EspionageMissionTypes"
, 
"name"
:
"NO_ESPIONAGEMISSION"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.EspionageMissionTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"EventContextTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.EventContextTypes"
, 
"name"
:
"EVENTCONTEXT_ALL"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.EventContextTypes"
, 
"name"
:
"EVENTCONTEXT_SELF"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.EventContextTypes"
, 
"name"
:
"NO_EVENTCONTEXT"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.EventContextTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.EventContextTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.EventContextTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"EventMessage"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getDescription"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iExpirationTurn"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"EventTriggerTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.EventTriggerTypes"
, 
"name"
:
"NO_EVENTTRIGGER"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.EventTriggerTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"EventTriggeredData"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"eBuilding"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"eCorporation"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"eOtherPlayer"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"ePlayer"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"eReligion"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"eTrigger"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iCityId"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iId"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iOtherPlayerCityId"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iPlotX"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iPlotY"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iTurn"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iUnitId"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"EventType"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.EventType"
, 
"name"
:
"EVT_BACK"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.EventType"
, 
"name"
:
"EVT_FORWARD"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.EventType"
, 
"name"
:
"EVT_KEYDOWN"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.EventType"
, 
"name"
:
"EVT_KEYUP"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.EventType"
, 
"name"
:
"EVT_LBUTTONDBLCLICK"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.EventType"
, 
"name"
:
"EVT_LBUTTONDOWN"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.EventType"
, 
"name"
:
"EVT_RBUTTONDOWN"
, 
"value"
:
3
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
1
, 
{
"type"
:
"CvPythonExtensions.EventType"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.EventType"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.EventType"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.EventType"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.EventType"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.EventType"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.EventType"
, 
"name"
:
"values[7]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"EventTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.EventTypes"
, 
"name"
:
"NO_EVENT"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.EventTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"FOWVis"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getOffsets"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"uiCount"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"FeatTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_COPPER_CONNECTED"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_CORPORATION_ENABLED"
, 
"value"
:
29
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_FOOD_CONNECTED"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_HORSE_CONNECTED"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_IRON_CONNECTED"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_LUXURY_CONNECTED"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_NATIONAL_WONDER"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_PAD"
, 
"value"
:
30
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_POPULATION_100_MILLION"
, 
"value"
:
24
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_POPULATION_10_MILLION"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_POPULATION_1_BILLION"
, 
"value"
:
27
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_POPULATION_1_MILLION"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_POPULATION_200_MILLION"
, 
"value"
:
25
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_POPULATION_20_MILLION"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_POPULATION_2_BILLION"
, 
"value"
:
28
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_POPULATION_2_MILLION"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_POPULATION_500_MILLION"
, 
"value"
:
26
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_POPULATION_50_MILLION"
, 
"value"
:
23
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_POPULATION_5_MILLION"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_POPULATION_HALF_MILLION"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_TRADE_ROUTE"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_UNITCOMBAT_ARCHER"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_UNITCOMBAT_ARMOR"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_UNITCOMBAT_GUN"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_UNITCOMBAT_HELICOPTER"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_UNITCOMBAT_MELEE"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_UNITCOMBAT_MOUNTED"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_UNITCOMBAT_NAVAL"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_UNITCOMBAT_SIEGE"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_UNIT_PRIVATEER"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"FEAT_UNIT_SPY"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"NUM_FEAT_TYPES"
, 
"value"
:
31
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[23]"
}
]
, 
[
24
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[24]"
}
]
, 
[
25
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[25]"
}
]
, 
[
26
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[26]"
}
]
, 
[
27
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[27]"
}
]
, 
[
28
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[28]"
}
]
, 
[
29
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[29]"
}
]
, 
[
30
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[30]"
}
]
, 
[
31
, 
{
"type"
:
"CvPythonExtensions.FeatTypes"
, 
"name"
:
"values[31]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"FeatureTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.FeatureTypes"
, 
"name"
:
"NO_FEATURE"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.FeatureTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"FlavorTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.FlavorTypes"
, 
"name"
:
"NO_FLAVOR"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.FlavorTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"FogOfWarModeTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.FogOfWarModeTypes"
, 
"name"
:
"FOGOFWARMODE_OFF"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.FogOfWarModeTypes"
, 
"name"
:
"FOGOFWARMODE_UNEXPLORED"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.FogOfWarModeTypes"
, 
"name"
:
"NUM_FOGOFWARMODE_TYPES"
, 
"value"
:
3
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.FogOfWarModeTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.FogOfWarModeTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.FogOfWarModeTypes"
, 
"name"
:
"values[3]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"FogofWarCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"FontSymbols"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"ANGRY_POP_CHAR"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"BAD_FOOD_CHAR"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"BAD_GOLD_CHAR"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"BULLET_CHAR"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"DEFENSE_CHAR"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"DEFENSIVE_PACT_CHAR"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"EATEN_FOOD_CHAR"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"GOLDEN_AGE_CHAR"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"GREAT_PEOPLE_CHAR"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"HAPPY_CHAR"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"HEALTHY_CHAR"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"MAP_CHAR"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"MAX_NUM_SYMBOLS"
, 
"value"
:
23
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"MOVES_CHAR"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"OCCUPATION_CHAR"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"OPEN_BORDERS_CHAR"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"POWER_CHAR"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"RELIGION_CHAR"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"SILVER_STAR_CHAR"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"STAR_CHAR"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"STRENGTH_CHAR"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"TRADE_CHAR"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"UNHAPPY_CHAR"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"UNHEALTHY_CHAR"
, 
"value"
:
3
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.FontSymbols"
, 
"name"
:
"values[23]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"FontTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.FontTypes"
, 
"name"
:
"GAME_FONT"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.FontTypes"
, 
"name"
:
"MENU_FONT"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.FontTypes"
, 
"name"
:
"MENU_HIGHLIGHT_FONT"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.FontTypes"
, 
"name"
:
"SMALL_FONT"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.FontTypes"
, 
"name"
:
"TITLE_FONT"
, 
"value"
:
0
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.FontTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.FontTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.FontTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.FontTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.FontTypes"
, 
"name"
:
"values[4]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"FootstepAudioTags"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.FootstepAudioTags"
, 
"name"
:
"NO_FOOTSTEPAUDIO_TAG"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.FootstepAudioTags"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"FootstepAudioTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.FootstepAudioTypes"
, 
"name"
:
"NO_FOOTSTEPAUDIO"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.FootstepAudioTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ForceControlTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"FORCECONTROL_ADVANCED_START"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"FORCECONTROL_HANDICAP"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"FORCECONTROL_MAX_CITY_ELIMINATIONS"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"FORCECONTROL_MAX_TURNS"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"FORCECONTROL_OPTIONS"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"FORCECONTROL_SPEED"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"FORCECONTROL_VICTORIES"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"NO_FORCECONTROL"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"NUM_FORCECONTROL_TYPES"
, 
"value"
:
7
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.ForceControlTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"FreezeCamera"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"FullScreenCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"GameMessageTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_ADVANCED_START_ACTION"
, 
"value"
:
92
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_APPLY_EVENT"
, 
"value"
:
71
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_AUTH_REQUEST"
, 
"value"
:
30
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_AUTH_RESPONSE"
, 
"value"
:
31
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_AUTO_MISSION"
, 
"value"
:
39
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_AUTO_MOVES"
, 
"value"
:
35
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_CHANGE_VASSAL"
, 
"value"
:
68
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_CHANGE_WAR"
, 
"value"
:
67
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_CHAT"
, 
"value"
:
48
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_CHOOSE_ELECTION"
, 
"value"
:
69
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_CIV_CHOICE"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_CIV_CHOICE_ACK"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_CIV_CHOICE_NACK"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_CIV_CHOSEN"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_CLAIM_INFO"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_CLEAR_TABLE"
, 
"value"
:
82
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_CLOSE_CONNECTION"
, 
"value"
:
58
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_CONFIRM_CIV_CLAIM"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_CONTACT_CIV"
, 
"value"
:
72
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_CONVERT"
, 
"value"
:
47
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_DIPLOMACY"
, 
"value"
:
87
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_DIPLOMACY_PROCESSED"
, 
"value"
:
84
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_DIPLO_CHAT"
, 
"value"
:
73
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_DIPLO_EVENT"
, 
"value"
:
75
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_DIPLO_VOTE"
, 
"value"
:
70
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_DO_COMMAND"
, 
"value"
:
40
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_DO_TASK"
, 
"value"
:
43
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_EMPIRE_SPLIT"
, 
"value"
:
90
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_ESPIONAGE_CHANGE"
, 
"value"
:
46
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_EVENT_TRIGGERED"
, 
"value"
:
89
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_EXIT_TRADE"
, 
"value"
:
78
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_EXTENDED_GAME"
, 
"value"
:
34
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_FILE_INFO"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_FOUND_RELIGION"
, 
"value"
:
93
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_GAME_INFO"
, 
"value"
:
24
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_GAME_TYPE"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_HOT_DROP_NOTICE"
, 
"value"
:
86
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_HOT_JOIN_NOTICE"
, 
"value"
:
85
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_ID_ASSIGNMENT"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_IMPLEMENT_OFFER"
, 
"value"
:
66
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_INIT_GAME"
, 
"value"
:
28
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_INIT_INFO"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_INIT_PLAYERS"
, 
"value"
:
29
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_INTERIM_NOTICE"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_JOIN_GROUP"
, 
"value"
:
37
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_KILL_DEAL"
, 
"value"
:
79
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_LAUNCHING_INFO"
, 
"value"
:
27
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_LAUNCH_SPACESHIP"
, 
"value"
:
91
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_LINE_ENTITY"
, 
"value"
:
51
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_LINE_ENTITY_DELETE"
, 
"value"
:
53
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_LINE_GROUP_DELETE"
, 
"value"
:
54
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_LOAD_GAME"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_MAPSCRIPT_ACK"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_MAPSCRIPT_CHECK"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_MOD_NET_MESSAGE"
, 
"value"
:
94
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_MP_DROP_INIT"
, 
"value"
:
60
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_MP_DROP_RESULT"
, 
"value"
:
63
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_MP_DROP_SAVE"
, 
"value"
:
64
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_MP_DROP_UPDATE"
, 
"value"
:
62
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_MP_DROP_VOTE"
, 
"value"
:
61
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_MP_KICK"
, 
"value"
:
56
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_MP_RETIRE"
, 
"value"
:
57
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_NETWORK_READY"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_NEVER_JOINED"
, 
"value"
:
59
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_PAUSE"
, 
"value"
:
55
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_PERCENT_CHANGE"
, 
"value"
:
45
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_PICK_YOUR_CIV"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_PING"
, 
"value"
:
49
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_PITBOSS_INFO"
, 
"value"
:
26
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_PLAYER_ID"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_PLAYER_INFO"
, 
"value"
:
23
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_PLAYER_OPTION"
, 
"value"
:
33
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_POPUP"
, 
"value"
:
88
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_POPUP_PROCESSED"
, 
"value"
:
83
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_POP_ORDER"
, 
"value"
:
42
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_PUSH_MISSION"
, 
"value"
:
38
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_PUSH_ORDER"
, 
"value"
:
41
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_REASSIGN_PLAYER"
, 
"value"
:
25
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_RENEGOTIATE"
, 
"value"
:
76
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_RENEGOTIATE_ITEM"
, 
"value"
:
77
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_RESEARCH"
, 
"value"
:
44
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_SAVE_FLAG_ACK"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_SAVE_GAME"
, 
"value"
:
80
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_SAVE_GAME_FLAG"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_SEND_OFFER"
, 
"value"
:
74
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_SIGN"
, 
"value"
:
50
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_SIGN_DELETE"
, 
"value"
:
52
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_SLOT_REASSIGNMENT"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_SYNCH_START"
, 
"value"
:
32
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_TOGGLE_TRADE"
, 
"value"
:
65
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_TURN_COMPLETE"
, 
"value"
:
36
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_UPDATE_CIVICS"
, 
"value"
:
81
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_VERIFY_VERSION"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_VERSION_NACK"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"GAMEMESSAGE_VERSION_WARNING"
, 
"value"
:
5
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[23]"
}
]
, 
[
24
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[24]"
}
]
, 
[
25
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[25]"
}
]
, 
[
26
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[26]"
}
]
, 
[
27
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[27]"
}
]
, 
[
28
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[28]"
}
]
, 
[
29
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[29]"
}
]
, 
[
30
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[30]"
}
]
, 
[
31
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[31]"
}
]
, 
[
32
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[32]"
}
]
, 
[
33
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[33]"
}
]
, 
[
34
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[34]"
}
]
, 
[
35
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[35]"
}
]
, 
[
36
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[36]"
}
]
, 
[
37
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[37]"
}
]
, 
[
38
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[38]"
}
]
, 
[
39
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[39]"
}
]
, 
[
40
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[40]"
}
]
, 
[
41
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[41]"
}
]
, 
[
42
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[42]"
}
]
, 
[
43
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[43]"
}
]
, 
[
44
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[44]"
}
]
, 
[
45
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[45]"
}
]
, 
[
46
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[46]"
}
]
, 
[
47
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[47]"
}
]
, 
[
48
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[48]"
}
]
, 
[
49
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[49]"
}
]
, 
[
50
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[50]"
}
]
, 
[
51
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[51]"
}
]
, 
[
52
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[52]"
}
]
, 
[
53
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[53]"
}
]
, 
[
54
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[54]"
}
]
, 
[
55
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[55]"
}
]
, 
[
56
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[56]"
}
]
, 
[
57
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[57]"
}
]
, 
[
58
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[58]"
}
]
, 
[
59
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[59]"
}
]
, 
[
60
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[60]"
}
]
, 
[
61
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[61]"
}
]
, 
[
62
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[62]"
}
]
, 
[
63
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[63]"
}
]
, 
[
64
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[64]"
}
]
, 
[
65
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[65]"
}
]
, 
[
66
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[66]"
}
]
, 
[
67
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[67]"
}
]
, 
[
68
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[68]"
}
]
, 
[
69
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[69]"
}
]
, 
[
70
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[70]"
}
]
, 
[
71
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[71]"
}
]
, 
[
72
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[72]"
}
]
, 
[
73
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[73]"
}
]
, 
[
74
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[74]"
}
]
, 
[
75
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[75]"
}
]
, 
[
76
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[76]"
}
]
, 
[
77
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[77]"
}
]
, 
[
78
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[78]"
}
]
, 
[
79
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[79]"
}
]
, 
[
80
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[80]"
}
]
, 
[
81
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[81]"
}
]
, 
[
82
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[82]"
}
]
, 
[
83
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[83]"
}
]
, 
[
84
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[84]"
}
]
, 
[
85
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[85]"
}
]
, 
[
86
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[86]"
}
]
, 
[
87
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[87]"
}
]
, 
[
88
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[88]"
}
]
, 
[
89
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[89]"
}
]
, 
[
90
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[90]"
}
]
, 
[
91
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[91]"
}
]
, 
[
92
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[92]"
}
]
, 
[
93
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[93]"
}
]
, 
[
94
, 
{
"type"
:
"CvPythonExtensions.GameMessageTypes"
, 
"name"
:
"values[94]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"GameMode"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.GameMode"
, 
"name"
:
"GAMEMODE_NORMAL"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.GameMode"
, 
"name"
:
"GAMEMODE_PITBOSS"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.GameMode"
, 
"name"
:
"NO_GAMEMODE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.GameMode"
, 
"name"
:
"NUM_GAMEMODES"
, 
"value"
:
2
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.GameMode"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.GameMode"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.GameMode"
, 
"name"
:
"values[2]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.GameMode"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"GameOptionTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_ADVANCED_START"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_AGGRESSIVE_AI"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_ALWAYS_PEACE"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_ALWAYS_WAR"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_COMPLETE_KILLS"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_FLIPPING_AFTER_CONQUEST"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_LEAD_ANY_CIV"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_LOCK_MODS"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_NEW_RANDOM_SEED"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_NO_BARBARIANS"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_NO_CHANGING_WAR_PEACE"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_NO_CITY_FLIPPING"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_NO_CITY_RAZING"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_NO_ESPIONAGE"
, 
"value"
:
23
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_NO_EVENTS"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_NO_GOODY_HUTS"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_NO_TECH_BROKERING"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_NO_TECH_TRADING"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_NO_VASSAL_STATES"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_ONE_CITY_CHALLENGE"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_PERMANENT_ALLIANCES"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_PICK_RELIGION"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_RAGING_BARBARIANS"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"GAMEOPTION_RANDOM_PERSONALITIES"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"NO_GAMEOPTION"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"NUM_GAMEOPTION_TYPES"
, 
"value"
:
24
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[23]"
}
]
, 
[
24
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[24]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.GameOptionTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"GameSpeedTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.GameSpeedTypes"
, 
"name"
:
"NO_GAMESPEED"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.GameSpeedTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"GameStateTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.GameStateTypes"
, 
"name"
:
"GAMESTATE_EXTENDED"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.GameStateTypes"
, 
"name"
:
"GAMESTATE_ON"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.GameStateTypes"
, 
"name"
:
"GAMESTATE_OVER"
, 
"value"
:
1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.GameStateTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.GameStateTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.GameStateTypes"
, 
"name"
:
"values[2]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"GameToggleDiplomacyLoggingCB"
}
, 
{
"type"
:
"class"
, 
"name"
:
"GameTurnInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iMonthIncrement"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iNumGameTurnsPerIncrement"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"GameType"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"GAME_HOTSEAT_LOAD"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"GAME_HOTSEAT_NEW"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"GAME_HOTSEAT_SCENARIO"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"GAME_MP_LOAD"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"GAME_MP_NEW"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"GAME_MP_SCENARIO"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"GAME_NONE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"GAME_PBEM_LOAD"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"GAME_PBEM_NEW"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"GAME_PBEM_SCENARIO"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"GAME_REPLAY"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"GAME_SP_LOAD"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"GAME_SP_NEW"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"GAME_SP_SCENARIO"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"NUM_GAMETYPES"
, 
"value"
:
13
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"values[13]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.GameType"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"GamebryoCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"GenericButtonSizes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.GenericButtonSizes"
, 
"name"
:
"BUTTON_SIZE_16"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.GenericButtonSizes"
, 
"name"
:
"BUTTON_SIZE_24"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.GenericButtonSizes"
, 
"name"
:
"BUTTON_SIZE_32"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.GenericButtonSizes"
, 
"name"
:
"BUTTON_SIZE_46"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.GenericButtonSizes"
, 
"name"
:
"BUTTON_SIZE_CUSTOM"
, 
"value"
:
4
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.GenericButtonSizes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.GenericButtonSizes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.GenericButtonSizes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.GenericButtonSizes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.GenericButtonSizes"
, 
"name"
:
"values[4]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"GoodyTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.GoodyTypes"
, 
"name"
:
"NO_GOODY"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.GoodyTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"GraphicLevelTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.GraphicLevelTypes"
, 
"name"
:
"GRAPHICLEVEL_CURRENT"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.GraphicLevelTypes"
, 
"name"
:
"GRAPHICLEVEL_HIGH"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.GraphicLevelTypes"
, 
"name"
:
"GRAPHICLEVEL_LOW"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.GraphicLevelTypes"
, 
"name"
:
"GRAPHICLEVEL_MEDIUM"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.GraphicLevelTypes"
, 
"name"
:
"NUM_GRAPHICLEVELS"
, 
"value"
:
4
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.GraphicLevelTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.GraphicLevelTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.GraphicLevelTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.GraphicLevelTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.GraphicLevelTypes"
, 
"name"
:
"values[4]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"GraphicOptionTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"GRAPHICOPTION_CITY_DETAIL"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"GRAPHICOPTION_CITY_RADIUS"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"GRAPHICOPTION_EFFECTS_DISABLED"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"GRAPHICOPTION_FROZEN_ANIMATIONS"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"GRAPHICOPTION_FULLSCREEN"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"GRAPHICOPTION_GLOBE_VIEW_BUILDINGS_DISABLED"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"GRAPHICOPTION_HEALTH_BARS"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"GRAPHICOPTION_HIRES_TERRAIN"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"GRAPHICOPTION_LOWRES_TEXTURES"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"GRAPHICOPTION_NO_COMBAT_ZOOM"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"GRAPHICOPTION_NO_ENEMY_GLOW"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"GRAPHICOPTION_NO_MOVIES"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"GRAPHICOPTION_SINGLE_UNIT_GRAPHICS"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"NO_GRAPHICOPTION"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"NUM_GRAPHICOPTION_TYPES"
, 
"value"
:
13
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.GraphicOptionTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"HandicapTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.HandicapTypes"
, 
"name"
:
"NO_HANDICAP"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.HandicapTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"HealthBarTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.HealthBarTypes"
, 
"name"
:
"HEALTHBAR_ALIVE_ATTACK"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.HealthBarTypes"
, 
"name"
:
"HEALTHBAR_ALIVE_DEFEND"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.HealthBarTypes"
, 
"name"
:
"HEALTHBAR_DEAD"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.HealthBarTypes"
, 
"name"
:
"NUM_HEALTHBAR_TYPES"
, 
"value"
:
3
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.HealthBarTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.HealthBarTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.HealthBarTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.HealthBarTypes"
, 
"name"
:
"values[3]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideAllCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideBarsCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideBeamsCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideBonusesCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideBuildingsCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideCityBillboardsCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideCultureCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideCursorCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideDecalsCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideEffectsCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideEntitiesCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideFeaturesCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideFlagsCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideGenericBuildingsCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideHalfTilesCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideInterfaceCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideRoutesCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideSubUnitsCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideSymbolsCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideTerrainCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideUnitEntitiesCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideWaterCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"HideWavesCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"HitTestTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.HitTestTypes"
, 
"name"
:
"HITTEST_CHILDREN"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.HitTestTypes"
, 
"name"
:
"HITTEST_DEFAULT"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.HitTestTypes"
, 
"name"
:
"HITTEST_NOHIT"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.HitTestTypes"
, 
"name"
:
"HITTEST_ON"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.HitTestTypes"
, 
"name"
:
"HITTEST_SOLID"
, 
"value"
:
2
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.HitTestTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.HitTestTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.HitTestTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.HitTestTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.HitTestTypes"
, 
"name"
:
"values[4]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"HurryTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.HurryTypes"
, 
"name"
:
"NO_HURRY"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.HurryTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"IDInfo"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"eOwner"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iID"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ImprovementTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ImprovementTypes"
, 
"name"
:
"NO_IMPROVEMENT"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.ImprovementTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"InfoBarTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.InfoBarTypes"
, 
"name"
:
"INFOBAR_EMPTY"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.InfoBarTypes"
, 
"name"
:
"INFOBAR_RATE"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.InfoBarTypes"
, 
"name"
:
"INFOBAR_RATE_EXTRA"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.InfoBarTypes"
, 
"name"
:
"INFOBAR_STORED"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.InfoBarTypes"
, 
"name"
:
"NUM_INFOBAR_TYPES"
, 
"value"
:
4
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.InfoBarTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.InfoBarTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.InfoBarTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.InfoBarTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.InfoBarTypes"
, 
"name"
:
"values[4]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"InputTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_0"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_1"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_2"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_3"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_4"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_5"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_6"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_7"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_8"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_9"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_A"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_APOSTROPHE"
, 
"value"
:
47
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_AT"
, 
"value"
:
87
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_B"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_BACKSLASH"
, 
"value"
:
50
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_BACKSPACE"
, 
"value"
:
40
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_C"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_CAPSLOCK"
, 
"value"
:
58
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_COLON"
, 
"value"
:
89
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_COMMA"
, 
"value"
:
51
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_D"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_DELETE"
, 
"value"
:
108
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_DOWN"
, 
"value"
:
105
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_E"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_END"
, 
"value"
:
104
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_EQUALS"
, 
"value"
:
39
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_ESCAPE"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_F"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_F1"
, 
"value"
:
59
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_F10"
, 
"value"
:
68
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_F11"
, 
"value"
:
69
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_F12"
, 
"value"
:
70
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_F2"
, 
"value"
:
60
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_F3"
, 
"value"
:
61
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_F4"
, 
"value"
:
62
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_F5"
, 
"value"
:
63
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_F6"
, 
"value"
:
64
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_F7"
, 
"value"
:
65
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_F8"
, 
"value"
:
66
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_F9"
, 
"value"
:
67
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_G"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_GRAVE"
, 
"value"
:
48
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_H"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_HOME"
, 
"value"
:
99
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_I"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_INSERT"
, 
"value"
:
107
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_J"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_K"
, 
"value"
:
23
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_L"
, 
"value"
:
24
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_LALT"
, 
"value"
:
56
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_LBRACKET"
, 
"value"
:
42
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_LCONTROL"
, 
"value"
:
45
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_LEFT"
, 
"value"
:
102
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_LSHIFT"
, 
"value"
:
49
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_M"
, 
"value"
:
25
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_MINUS"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_N"
, 
"value"
:
26
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMLOCK"
, 
"value"
:
71
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPAD0"
, 
"value"
:
73
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPAD1"
, 
"value"
:
74
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPAD2"
, 
"value"
:
75
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPAD3"
, 
"value"
:
76
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPAD4"
, 
"value"
:
77
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPAD5"
, 
"value"
:
78
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPAD6"
, 
"value"
:
79
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPAD7"
, 
"value"
:
80
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPAD8"
, 
"value"
:
81
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPAD9"
, 
"value"
:
82
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPADCOMMA"
, 
"value"
:
94
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPADENTER"
, 
"value"
:
90
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPADEQUALS"
, 
"value"
:
86
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPADMINUS"
, 
"value"
:
83
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPADPERIOD"
, 
"value"
:
85
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPADPLUS"
, 
"value"
:
84
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPADSLASH"
, 
"value"
:
95
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_NUMPADSTAR"
, 
"value"
:
55
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_O"
, 
"value"
:
27
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_P"
, 
"value"
:
28
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_PAUSE"
, 
"value"
:
98
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_PERIOD"
, 
"value"
:
52
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_PGDN"
, 
"value"
:
106
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_PGUP"
, 
"value"
:
101
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_Q"
, 
"value"
:
29
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_R"
, 
"value"
:
30
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_RALT"
, 
"value"
:
97
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_RBRACKET"
, 
"value"
:
43
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_RCONTROL"
, 
"value"
:
91
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_RETURN"
, 
"value"
:
44
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_RIGHT"
, 
"value"
:
103
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_RSHIFT"
, 
"value"
:
54
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_S"
, 
"value"
:
31
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_SCROLL"
, 
"value"
:
72
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_SEMICOLON"
, 
"value"
:
46
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_SLASH"
, 
"value"
:
53
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_SPACE"
, 
"value"
:
57
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_SYSRQ"
, 
"value"
:
96
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_T"
, 
"value"
:
32
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_TAB"
, 
"value"
:
41
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_U"
, 
"value"
:
33
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_UNDERLINE"
, 
"value"
:
88
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_UP"
, 
"value"
:
100
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_V"
, 
"value"
:
34
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_VOLUMEDOWN"
, 
"value"
:
92
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_VOLUMEUP"
, 
"value"
:
93
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_W"
, 
"value"
:
35
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_X"
, 
"value"
:
36
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_Y"
, 
"value"
:
37
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"KB_Z"
, 
"value"
:
38
}
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"NUM_INPUT_TYPE"
, 
"value"
:
116
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
1
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[23]"
}
]
, 
[
24
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[24]"
}
]
, 
[
25
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[25]"
}
]
, 
[
26
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[26]"
}
]
, 
[
27
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[27]"
}
]
, 
[
28
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[28]"
}
]
, 
[
29
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[29]"
}
]
, 
[
30
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[30]"
}
]
, 
[
31
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[31]"
}
]
, 
[
32
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[32]"
}
]
, 
[
33
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[33]"
}
]
, 
[
34
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[34]"
}
]
, 
[
35
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[35]"
}
]
, 
[
36
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[36]"
}
]
, 
[
37
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[37]"
}
]
, 
[
38
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[38]"
}
]
, 
[
39
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[39]"
}
]
, 
[
40
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[40]"
}
]
, 
[
41
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[41]"
}
]
, 
[
42
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[42]"
}
]
, 
[
43
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[43]"
}
]
, 
[
44
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[44]"
}
]
, 
[
45
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[45]"
}
]
, 
[
46
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[46]"
}
]
, 
[
47
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[47]"
}
]
, 
[
48
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[48]"
}
]
, 
[
49
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[49]"
}
]
, 
[
50
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[50]"
}
]
, 
[
51
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[51]"
}
]
, 
[
52
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[52]"
}
]
, 
[
53
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[53]"
}
]
, 
[
54
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[54]"
}
]
, 
[
55
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[55]"
}
]
, 
[
56
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[56]"
}
]
, 
[
57
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[57]"
}
]
, 
[
58
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[58]"
}
]
, 
[
59
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[59]"
}
]
, 
[
60
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[60]"
}
]
, 
[
61
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[61]"
}
]
, 
[
62
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[62]"
}
]
, 
[
63
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[63]"
}
]
, 
[
64
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[64]"
}
]
, 
[
65
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[65]"
}
]
, 
[
66
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[66]"
}
]
, 
[
67
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[67]"
}
]
, 
[
68
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[68]"
}
]
, 
[
69
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[69]"
}
]
, 
[
70
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[70]"
}
]
, 
[
71
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[71]"
}
]
, 
[
72
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[72]"
}
]
, 
[
73
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[73]"
}
]
, 
[
74
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[74]"
}
]
, 
[
75
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[75]"
}
]
, 
[
76
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[76]"
}
]
, 
[
77
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[77]"
}
]
, 
[
78
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[78]"
}
]
, 
[
79
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[79]"
}
]
, 
[
80
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[80]"
}
]
, 
[
81
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[81]"
}
]
, 
[
82
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[82]"
}
]
, 
[
83
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[83]"
}
]
, 
[
84
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[84]"
}
]
, 
[
85
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[85]"
}
]
, 
[
86
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[86]"
}
]
, 
[
87
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[87]"
}
]
, 
[
88
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[88]"
}
]
, 
[
89
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[89]"
}
]
, 
[
90
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[90]"
}
]
, 
[
91
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[91]"
}
]
, 
[
92
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[92]"
}
]
, 
[
93
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[93]"
}
]
, 
[
94
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[94]"
}
]
, 
[
95
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[95]"
}
]
, 
[
96
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[96]"
}
]
, 
[
97
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[97]"
}
]
, 
[
98
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[98]"
}
]
, 
[
99
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[99]"
}
]
, 
[
100
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[100]"
}
]
, 
[
101
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[101]"
}
]
, 
[
102
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[102]"
}
]
, 
[
103
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[103]"
}
]
, 
[
104
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[104]"
}
]
, 
[
105
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[105]"
}
]
, 
[
106
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[106]"
}
]
, 
[
107
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[107]"
}
]
, 
[
108
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[108]"
}
]
, 
[
116
, 
{
"type"
:
"CvPythonExtensions.InputTypes"
, 
"name"
:
"values[116]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"InterfaceDirtyBits"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"Advanced_Start_DIRTY_BIT"
, 
"value"
:
34
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"BlockadedPlots_DIRTY_BIT"
, 
"value"
:
28
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"Center_DIRTY_BIT"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"CitizenButtons_DIRTY_BIT"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"CityInfo_DIRTY_BIT"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"CityScreen_DIRTY_BIT"
, 
"value"
:
23
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"ColoredPlots_DIRTY_BIT"
, 
"value"
:
27
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"Cursor_DIRTY_BIT"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"Domestic_Advisor_DIRTY_BIT"
, 
"value"
:
32
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"Espionage_Advisor_DIRTY_BIT"
, 
"value"
:
33
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"Event_DIRTY_BIT"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"Financial_Screen_DIRTY_BIT"
, 
"value"
:
29
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"Flag_DIRTY_BIT"
, 
"value"
:
25
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"Fog_DIRTY_BIT"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"Foreign_Screen_DIRTY_BIT"
, 
"value"
:
30
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"GameData_DIRTY_BIT"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"GlobeInfo_DIRTY_BIT"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"GlobeLayer_DIRTY_BIT"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"Help_DIRTY_BIT"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"HighlightPlot_DIRTY_BIT"
, 
"value"
:
26
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"InfoPane_DIRTY_BIT"
, 
"value"
:
24
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"MinimapSection_DIRTY_BIT"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"MiscButtons_DIRTY_BIT"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"NUM_INTERFACE_DIRTY_BITS"
, 
"value"
:
35
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"PercentButtons_DIRTY_BIT"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"PlotListButtons_DIRTY_BIT"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"Popup_DIRTY_BIT"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"ResearchButtons_DIRTY_BIT"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"Score_DIRTY_BIT"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"SelectionButtons_DIRTY_BIT"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"SelectionCamera_DIRTY_BIT"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"SelectionSound_DIRTY_BIT"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"Soundtrack_DIRTY_BIT"
, 
"value"
:
31
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"TurnTimer_DIRTY_BIT"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"UnitInfo_DIRTY_BIT"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"Waypoints_DIRTY_BIT"
, 
"value"
:
4
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[23]"
}
]
, 
[
24
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[24]"
}
]
, 
[
25
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[25]"
}
]
, 
[
26
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[26]"
}
]
, 
[
27
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[27]"
}
]
, 
[
28
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[28]"
}
]
, 
[
29
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[29]"
}
]
, 
[
30
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[30]"
}
]
, 
[
31
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[31]"
}
]
, 
[
32
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[32]"
}
]
, 
[
33
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[33]"
}
]
, 
[
34
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[34]"
}
]
, 
[
35
, 
{
"type"
:
"CvPythonExtensions.InterfaceDirtyBits"
, 
"name"
:
"values[35]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"InterfaceMessageTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"MESSAGE_TYPE_CHAT"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"MESSAGE_TYPE_COMBAT_MESSAGE"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"MESSAGE_TYPE_DISPLAY_ONLY"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"MESSAGE_TYPE_INFO"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"MESSAGE_TYPE_MAJOR_EVENT"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"MESSAGE_TYPE_MINOR_EVENT"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"MESSAGE_TYPE_QUEST"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"NO_MESSAGE_TYPE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"NUM_INTERFACE_MESSAGE_TYPES"
, 
"value"
:
7
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.InterfaceMessageTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"InterfaceModeTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_AIRBOMB"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_AIRLIFT"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_AIRSTRIKE"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_GLOBELAYER_INPUT"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_GO_TO"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_GO_TO_ALL"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_GO_TO_TYPE"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_GRIP"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_NUKE"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_PARADROP"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_PING"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_PYTHON_PICK_PLOT"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_RANGE_ATTACK"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_REBASE"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_RECON"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_ROUTE_TO"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_SAVE_PLOT_NIFS"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_SELECTION"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"INTERFACEMODE_SIGN"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"NO_INTERFACEMODE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"NUM_INTERFACEMODE_TYPES"
, 
"value"
:
19
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[19]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.InterfaceModeTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"InterfaceVisibility"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.InterfaceVisibility"
, 
"name"
:
"INTERFACE_ADVANCED_START"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceVisibility"
, 
"name"
:
"INTERFACE_HIDE"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceVisibility"
, 
"name"
:
"INTERFACE_HIDE_ALL"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceVisibility"
, 
"name"
:
"INTERFACE_MINIMAP_ONLY"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.InterfaceVisibility"
, 
"name"
:
"INTERFACE_SHOW"
, 
"value"
:
0
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.InterfaceVisibility"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.InterfaceVisibility"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.InterfaceVisibility"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.InterfaceVisibility"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.InterfaceVisibility"
, 
"name"
:
"values[4]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"InvisibleTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.InvisibleTypes"
, 
"name"
:
"NO_INVISIBLE"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.InvisibleTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"JustificationTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.JustificationTypes"
, 
"name"
:
"DLL_FONT_ADDITIVE"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.JustificationTypes"
, 
"name"
:
"DLL_FONT_CENTER_JUSTIFY"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.JustificationTypes"
, 
"name"
:
"DLL_FONT_CENTER_VERTICALLY"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.JustificationTypes"
, 
"name"
:
"DLL_FONT_LEFT_JUSTIFY"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.JustificationTypes"
, 
"name"
:
"DLL_FONT_RIGHT_JUSTIFY"
, 
"value"
:
2
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
8
, 
{
"type"
:
"CvPythonExtensions.JustificationTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.JustificationTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.JustificationTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.JustificationTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.JustificationTypes"
, 
"name"
:
"values[16]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"LeaderHeadTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.LeaderHeadTypes"
, 
"name"
:
"NO_LEADER"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.LeaderHeadTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"LeaderheadAction"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"LEADERANIM_AGREE"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"LEADERANIM_ANNOYED"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"LEADERANIM_CAUTIOUS"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"LEADERANIM_DISAGREE"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"LEADERANIM_FRIENDLY"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"LEADERANIM_FURIOUS"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"LEADERANIM_GREETING"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"LEADERANIM_PLEASED"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"NO_LEADERANIM"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"NUM_LEADERANIM_TYPES"
, 
"value"
:
8
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"values[8]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.LeaderheadAction"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"LoadType"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.LoadType"
, 
"name"
:
"LOAD_GAMETYPE"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.LoadType"
, 
"name"
:
"LOAD_INIT"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.LoadType"
, 
"name"
:
"LOAD_NORMAL"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.LoadType"
, 
"name"
:
"LOAD_REPLAY"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.LoadType"
, 
"name"
:
"LOAD_SETUP"
, 
"value"
:
2
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.LoadType"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.LoadType"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.LoadType"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.LoadType"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.LoadType"
, 
"name"
:
"values[4]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"LockQuadTreeVisCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"MemoryTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_ACCEPTED_CIVIC"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_ACCEPTED_JOIN_WAR"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_ACCEPTED_RELIGION"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_ACCEPTED_STOP_TRADING"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_ACCEPT_DEMAND"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_CANCELLED_OPEN_BORDERS"
, 
"value"
:
25
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_DECLARED_WAR"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_DECLARED_WAR_ON_FRIEND"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_DENIED_CIVIC"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_DENIED_JOIN_WAR"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_DENIED_RELIGION"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_DENIED_STOP_TRADING"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_EVENT_BAD_TO_US"
, 
"value"
:
31
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_EVENT_GOOD_TO_US"
, 
"value"
:
30
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_GIVE_HELP"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_HIRED_TRADE_EMBARGO"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_HIRED_WAR_ALLY"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_LIBERATED_CITIES"
, 
"value"
:
32
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_MADE_DEMAND"
, 
"value"
:
23
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_MADE_DEMAND_RECENT"
, 
"value"
:
24
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_NUKED_FRIEND"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_NUKED_US"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_RAZED_CITY"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_RAZED_HOLY_CITY"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_RECEIVED_TECH_FROM_ANY"
, 
"value"
:
27
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_REFUSED_HELP"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_REJECTED_DEMAND"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_SPY_CAUGHT"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_STOPPED_TRADING"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_STOPPED_TRADING_RECENT"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_TRADED_TECH_TO_US"
, 
"value"
:
26
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_VOTED_AGAINST_US"
, 
"value"
:
28
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"MEMORY_VOTED_FOR_US"
, 
"value"
:
29
}
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"NUM_MEMORY_TYPES"
, 
"value"
:
33
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[23]"
}
]
, 
[
24
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[24]"
}
]
, 
[
25
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[25]"
}
]
, 
[
26
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[26]"
}
]
, 
[
27
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[27]"
}
]
, 
[
28
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[28]"
}
]
, 
[
29
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[29]"
}
]
, 
[
30
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[30]"
}
]
, 
[
31
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[31]"
}
]
, 
[
32
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[32]"
}
]
, 
[
33
, 
{
"type"
:
"CvPythonExtensions.MemoryTypes"
, 
"name"
:
"values[33]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"MinimapModeTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.MinimapModeTypes"
, 
"name"
:
"MINIMAPMODE_MILITARY"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.MinimapModeTypes"
, 
"name"
:
"MINIMAPMODE_REPLAY"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.MinimapModeTypes"
, 
"name"
:
"MINIMAPMODE_TERRAIN"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.MinimapModeTypes"
, 
"name"
:
"MINIMAPMODE_TERRITORY"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.MinimapModeTypes"
, 
"name"
:
"NO_MINIMAPMODE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.MinimapModeTypes"
, 
"name"
:
"NUM_MINIMAPMODE_TYPES"
, 
"value"
:
4
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.MinimapModeTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.MinimapModeTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.MinimapModeTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.MinimapModeTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.MinimapModeTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.MinimapModeTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"MissionAITypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_ASSAULT"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_ATTACK_SPY"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_BLOCKADE"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_BUILD"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_CARRIER"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_CONSTRUCT"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_EXPLORE"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_FOUND"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_GREAT_WORK"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_GROUP"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_GUARD_BONUS"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_GUARD_CITY"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_GUARD_SPY"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_GUARD_TRADE_NET"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_HURRY"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_LOAD_ASSAULT"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_LOAD_SETTLER"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_LOAD_SPECIAL"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_PICKUP"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_PILLAGE"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_SHADOW"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_SPREAD"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"MISSIONAI_SPREAD_CORPORATION"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"NO_MISSIONAI"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[22]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.MissionAITypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"MissionData"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"eMissionType"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iData1"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iData2"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iFlags"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iPushTurn"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"MissionTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_AIRBOMB"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_AIRLIFT"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_AIRPATROL"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_AIRSTRIKE"
, 
"value"
:
39
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_BEGIN_COMBAT"
, 
"value"
:
37
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_BOMBARD"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_BUILD"
, 
"value"
:
33
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_CAPTURED"
, 
"value"
:
41
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_CONSTRUCT"
, 
"value"
:
26
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_DAMAGE"
, 
"value"
:
44
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_DESTROY"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_DIE"
, 
"value"
:
43
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_DISCOVER"
, 
"value"
:
27
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_END_COMBAT"
, 
"value"
:
38
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_ESPIONAGE"
, 
"value"
:
35
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_FORTIFY"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_FOUND"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_GOLDEN_AGE"
, 
"value"
:
32
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_GREAT_WORK"
, 
"value"
:
30
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_HEAL"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_HURRY"
, 
"value"
:
28
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_IDLE"
, 
"value"
:
42
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_INFILTRATE"
, 
"value"
:
31
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_JOIN"
, 
"value"
:
25
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_LEAD"
, 
"value"
:
34
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_MOVE_TO"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_MOVE_TO_UNIT"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_MULTI_DESELECT"
, 
"value"
:
46
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_MULTI_SELECT"
, 
"value"
:
45
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_NUKE"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_PARADROP"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_PILLAGE"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_PLUNDER"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_RANGE_ATTACK"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_RECON"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_ROUTE_TO"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_SABOTAGE"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_SEAPATROL"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_SENTRY"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_SKIP"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_SLEEP"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_SPREAD"
, 
"value"
:
23
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_SPREAD_CORPORATION"
, 
"value"
:
24
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_STEAL_PLANS"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_SURRENDER"
, 
"value"
:
40
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"MISSION_TRADE"
, 
"value"
:
29
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"NO_MISSION"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"NUM_MISSION_TYPES"
, 
"value"
:
47
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[23]"
}
]
, 
[
24
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[24]"
}
]
, 
[
25
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[25]"
}
]
, 
[
26
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[26]"
}
]
, 
[
27
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[27]"
}
]
, 
[
28
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[28]"
}
]
, 
[
29
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[29]"
}
]
, 
[
30
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[30]"
}
]
, 
[
31
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[31]"
}
]
, 
[
32
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[32]"
}
]
, 
[
33
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[33]"
}
]
, 
[
34
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[34]"
}
]
, 
[
35
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[35]"
}
]
, 
[
37
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[37]"
}
]
, 
[
38
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[38]"
}
]
, 
[
39
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[39]"
}
]
, 
[
40
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[40]"
}
]
, 
[
41
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[41]"
}
]
, 
[
42
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[42]"
}
]
, 
[
43
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[43]"
}
]
, 
[
44
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[44]"
}
]
, 
[
45
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[45]"
}
]
, 
[
46
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[46]"
}
]
, 
[
47
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[47]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.MissionTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"MonthTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.MonthTypes"
, 
"name"
:
"NO_MONTH"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.MonthTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"MouseFlags"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_CLICKED"
, 
"value"
:
8986624
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_CONTROL"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_DBLCLICKED"
, 
"value"
:
35946496
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_EVENT"
, 
"value"
:
4096
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_LBUTTON"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_LBUTTONDBLCLK"
, 
"value"
:
32768
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_LBUTTONDOWN"
, 
"value"
:
8192
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_LBUTTONUP"
, 
"value"
:
16384
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_MBUTTON"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_MBUTTONDBLCLK"
, 
"value"
:
2097152
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_MBUTTONDOWN"
, 
"value"
:
524288
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_MBUTTONUP"
, 
"value"
:
1048576
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_MOUSEMOVE"
, 
"value"
:
4096
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_MOUSEWHEELDOWN"
, 
"value"
:
134217728
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_MOUSEWHEELUP"
, 
"value"
:
67108864
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_RBUTTON"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_RBUTTONDBLCLK"
, 
"value"
:
262144
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_RBUTTONDOWN"
, 
"value"
:
65536
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_RBUTTONUP"
, 
"value"
:
131072
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_RELEASED"
, 
"value"
:
17973248
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_SHIFT"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_STATE"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_XBUTTON1"
, 
"value"
:
32
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_XBUTTON2"
, 
"value"
:
64
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_XBUTTONDBLCLK"
, 
"value"
:
33554432
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_XBUTTONDOWN"
, 
"value"
:
8388608
}
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"MOUSE_XBUTTONUP"
, 
"value"
:
16777216
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
33554432
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[33554432]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[2]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[4]"
}
]
, 
[
35946496
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[35946496]"
}
]
, 
[
4096
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[4096]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[8]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[16]"
}
]
, 
[
134217728
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[134217728]"
}
]
, 
[
16777216
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[16777216]"
}
]
, 
[
8388608
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[8388608]"
}
]
, 
[
32
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[32]"
}
]
, 
[
131072
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[131072]"
}
]
, 
[
262144
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[262144]"
}
]
, 
[
8192
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[8192]"
}
]
, 
[
524288
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[524288]"
}
]
, 
[
16384
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[16384]"
}
]
, 
[
1048576
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[1048576]"
}
]
, 
[
32768
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[32768]"
}
]
, 
[
64
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[64]"
}
]
, 
[
67108864
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[67108864]"
}
]
, 
[
2097152
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[2097152]"
}
]
, 
[
65536
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[65536]"
}
]
, 
[
17973248
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[17973248]"
}
]
, 
[
8986624
, 
{
"type"
:
"CvPythonExtensions.MouseFlags"
, 
"name"
:
"values[8986624]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"MultiplayerOptionTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.MultiplayerOptionTypes"
, 
"name"
:
"MPOPTION_ANONYMOUS"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.MultiplayerOptionTypes"
, 
"name"
:
"MPOPTION_SHUFFLE_TEAMS"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.MultiplayerOptionTypes"
, 
"name"
:
"MPOPTION_SIMULTANEOUS_TURNS"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.MultiplayerOptionTypes"
, 
"name"
:
"MPOPTION_TAKEOVER_AI"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.MultiplayerOptionTypes"
, 
"name"
:
"MPOPTION_TURN_TIMER"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.MultiplayerOptionTypes"
, 
"name"
:
"NO_MPOPTION"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.MultiplayerOptionTypes"
, 
"name"
:
"NUM_MPOPTION_TYPES"
, 
"value"
:
5
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.MultiplayerOptionTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.MultiplayerOptionTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.MultiplayerOptionTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.MultiplayerOptionTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.MultiplayerOptionTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.MultiplayerOptionTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.MultiplayerOptionTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"MusicCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"NetContactTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.NetContactTypes"
, 
"name"
:
"NETCONTACT_BUSY"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.NetContactTypes"
, 
"name"
:
"NETCONTACT_ESTABLISHED"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.NetContactTypes"
, 
"name"
:
"NETCONTACT_INITIAL"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.NetContactTypes"
, 
"name"
:
"NETCONTACT_RESPONSE"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.NetContactTypes"
, 
"name"
:
"NO_NETCONTACT"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.NetContactTypes"
, 
"name"
:
"NUM_NETCONTACT_TYPES"
, 
"value"
:
4
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.NetContactTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.NetContactTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.NetContactTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.NetContactTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.NetContactTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.NetContactTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"NewConceptTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.NewConceptTypes"
, 
"name"
:
"NO_NEW_CONCEPT"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.NewConceptTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"NiColorA"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"a"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"b"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"g"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"r"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"NiMatrix3"
, 
"members"
:
[
{
"doc"
:
"float GetEntry(unsigned int uiRow, unsigned int uiCol)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"GetEntry"
}
, 
{
"doc"
:
"void MakeIdentity()"
, 
"type"
:
"instancemethod"
, 
"name"
:
"MakeIdentity"
}
, 
{
"doc"
:
"void SetEntry(unsigned int uiRow, unsigned int uiCol, float fEntry)"
, 
"type"
:
"instancemethod"
, 
"name"
:
"SetEntry"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"NiPoint2"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"x"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"y"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"NiPoint3"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"x"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"y"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"z"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"doc"
:
"Places text onto the screen"
, 
"type"
:
"function"
, 
"name"
:
"NiTextOut"
}
, 
{
"type"
:
"type"
, 
"name"
:
"NotifyCode"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_CHARACTER"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_CLICKED"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_CURSOR_MOVE_OFF"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_CURSOR_MOVE_ON"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_DBL_CLICKED"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_FLYOUT_ITEM_SELECTED"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_FOCUS"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_LINKEXECUTE"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_LISTBOX_ITEM_SELECTED"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_MOUSEMOVE"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_MOUSEWHEELDOWN"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_MOUSEWHEELUP"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_MOVIE_DONE"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_NEW_HORIZONTAL_STOP"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_NEW_VERTICAL_STOP"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_SCROLL_DOWN"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_SCROLL_UP"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_SLIDER_NEWSTOP"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_TABLE_HEADER_SELECTED"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"NOTIFY_UNFOCUS"
, 
"value"
:
3
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[12]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[15]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.NotifyCode"
, 
"name"
:
"values[21]"
}
]
]
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"OrderData"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"bSave"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"eOrderType"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iData1"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iData2"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"OrderTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.OrderTypes"
, 
"name"
:
"NO_ORDER"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.OrderTypes"
, 
"name"
:
"NUM_ORDER_TYPES"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.OrderTypes"
, 
"name"
:
"ORDER_CONSTRUCT"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.OrderTypes"
, 
"name"
:
"ORDER_CREATE"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.OrderTypes"
, 
"name"
:
"ORDER_MAINTAIN"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.OrderTypes"
, 
"name"
:
"ORDER_TRAIN"
, 
"value"
:
0
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.OrderTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.OrderTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.OrderTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.OrderTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.OrderTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.OrderTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"PBGameSetupData"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getCustomMapOption"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getMPOptionAt"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getMapName"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getOptionAt"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getVictory"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iAdvancedStartPoints"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iCityElimination"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iClimate"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iEra"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iMaxTurns"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iNumCustomMapOptions"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iNumVictories"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iSeaLevel"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iSize"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iSpeed"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iTurnTime"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"PBPlayerAdminData"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"bClaimed"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"bHuman"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"bTurnActive"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getName"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getPing"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getScore"
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"PBPlayerSetupData"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"getStatusText"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iCiv"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iDifficulty"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iLeader"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iTeam"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iWho"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"PFEnableCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"PFUpdateCB"
}
, 
{
"type"
:
"class"
, 
"name"
:
"POINT"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"x"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"y"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"PanelStyles"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_BLUE50"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_BLUELARGE"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_BOTTOMBAR"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_CITY_COLUMNC"
, 
"value"
:
31
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_CITY_COLUMNL"
, 
"value"
:
30
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_CITY_COLUMNR"
, 
"value"
:
32
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_CITY_INFO"
, 
"value"
:
27
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_CITY_LEFT"
, 
"value"
:
23
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_CITY_RIGHT"
, 
"value"
:
24
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_CITY_TANSHADE"
, 
"value"
:
26
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_CITY_TANTL"
, 
"value"
:
28
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_CITY_TANTR"
, 
"value"
:
29
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_CITY_TITLE"
, 
"value"
:
33
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_CITY_TOP"
, 
"value"
:
25
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_CIVILPEDIA"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_DAWN"
, 
"value"
:
34
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_DAWNBOTTOM"
, 
"value"
:
36
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_DAWNTOP"
, 
"value"
:
35
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_DEFAULT"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_EMPTY"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_EXTERNAL"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_FLAT"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_GAMEHUD_CENTER"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_GAMEHUD_LEFT"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_GAMEHUD_RIGHT"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_GAMEHUD_STATS"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_GAME_MAP"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_GAME_TOPBAR"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_HUD_HELP"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_IN"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_MAIN"
, 
"value"
:
37
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_MAIN_BLACK25"
, 
"value"
:
38
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_MAIN_BLACK50"
, 
"value"
:
39
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_MAIN_BOTTOMBAR"
, 
"value"
:
48
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_MAIN_SELECT"
, 
"value"
:
49
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_MAIN_TAN"
, 
"value"
:
42
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_MAIN_TAN15"
, 
"value"
:
43
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_MAIN_TANB"
, 
"value"
:
47
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_MAIN_TANL"
, 
"value"
:
44
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_MAIN_TANR"
, 
"value"
:
45
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_MAIN_TANT"
, 
"value"
:
46
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_MAIN_WHITE"
, 
"value"
:
40
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_MAIN_WHITETAB"
, 
"value"
:
41
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_OUT"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_SOLID"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_STANDARD"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_STONE"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_TECH"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_TOPBAR"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"PANEL_STYLE_UNITSTAT"
, 
"value"
:
10
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[23]"
}
]
, 
[
24
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[24]"
}
]
, 
[
25
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[25]"
}
]
, 
[
26
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[26]"
}
]
, 
[
27
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[27]"
}
]
, 
[
28
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[28]"
}
]
, 
[
29
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[29]"
}
]
, 
[
30
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[30]"
}
]
, 
[
31
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[31]"
}
]
, 
[
32
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[32]"
}
]
, 
[
33
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[33]"
}
]
, 
[
34
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[34]"
}
]
, 
[
35
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[35]"
}
]
, 
[
36
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[36]"
}
]
, 
[
37
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[37]"
}
]
, 
[
38
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[38]"
}
]
, 
[
39
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[39]"
}
]
, 
[
40
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[40]"
}
]
, 
[
41
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[41]"
}
]
, 
[
42
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[42]"
}
]
, 
[
43
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[43]"
}
]
, 
[
44
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[44]"
}
]
, 
[
45
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[45]"
}
]
, 
[
46
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[46]"
}
]
, 
[
47
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[47]"
}
]
, 
[
48
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[48]"
}
]
, 
[
49
, 
{
"type"
:
"CvPythonExtensions.PanelStyles"
, 
"name"
:
"values[49]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"PauseEngineCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"PlayerColorTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.PlayerColorTypes"
, 
"name"
:
"NO_PLAYERCOLOR"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.PlayerColorTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"PlayerOptionTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"NO_PLAYEROPTION"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"NUM_PLAYEROPTION_TYPES"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_ADVISOR_HELP"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_ADVISOR_POPUPS"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_AUTO_PROMOTION"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_LEAVE_FORESTS"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_MINIMIZE_POP_UPS"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_MISSIONARIES_AUTOMATED"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_MODDER_1"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_MODDER_2"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_MODDER_3"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_NO_UNIT_CYCLING"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_NO_UNIT_RECOMMENDATIONS"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_NUMPAD_HELP"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_QUICK_ATTACK"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_QUICK_DEFENSE"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_QUICK_MOVES"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_RIGHT_CLICK_MENU"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_SAFE_AUTOMATION"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_SHOW_ENEMY_MOVES"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_SHOW_FRIENDLY_MOVES"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_STACK_ATTACK"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_START_AUTOMATED"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"PLAYEROPTION_WAIT_END_TURN"
, 
"value"
:
2
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[22]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.PlayerOptionTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"PlayerTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.PlayerTypes"
, 
"name"
:
"NO_PLAYER"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.PlayerTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"PlayerVoteTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.PlayerVoteTypes"
, 
"name"
:
"NO_PLAYER_VOTE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.PlayerVoteTypes"
, 
"name"
:
"NO_PLAYER_VOTE_CHECKED"
, 
"value"
:
-6
}
, 
{
"type"
:
"CvPythonExtensions.PlayerVoteTypes"
, 
"name"
:
"PLAYER_VOTE_ABSTAIN"
, 
"value"
:
-4
}
, 
{
"type"
:
"CvPythonExtensions.PlayerVoteTypes"
, 
"name"
:
"PLAYER_VOTE_NEVER"
, 
"value"
:
-5
}
, 
{
"type"
:
"CvPythonExtensions.PlayerVoteTypes"
, 
"name"
:
"PLAYER_VOTE_NO"
, 
"value"
:
-3
}
, 
{
"type"
:
"CvPythonExtensions.PlayerVoteTypes"
, 
"name"
:
"PLAYER_VOTE_YES"
, 
"value"
:
-2
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-2
, 
{
"type"
:
"CvPythonExtensions.PlayerVoteTypes"
, 
"name"
:
"values[-2]"
}
]
, 
[
-6
, 
{
"type"
:
"CvPythonExtensions.PlayerVoteTypes"
, 
"name"
:
"values[-6]"
}
]
, 
[
-5
, 
{
"type"
:
"CvPythonExtensions.PlayerVoteTypes"
, 
"name"
:
"values[-5]"
}
]
, 
[
-4
, 
{
"type"
:
"CvPythonExtensions.PlayerVoteTypes"
, 
"name"
:
"values[-4]"
}
]
, 
[
-3
, 
{
"type"
:
"CvPythonExtensions.PlayerVoteTypes"
, 
"name"
:
"values[-3]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.PlayerVoteTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"PlotLandscapeLayers"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.PlotLandscapeLayers"
, 
"name"
:
"PLOT_LANDSCAPE_LAYER_ALL"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.PlotLandscapeLayers"
, 
"name"
:
"PLOT_LANDSCAPE_LAYER_BASE"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.PlotLandscapeLayers"
, 
"name"
:
"PLOT_LANDSCAPE_LAYER_NUMPAD_HELP"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.PlotLandscapeLayers"
, 
"name"
:
"PLOT_LANDSCAPE_LAYER_RECOMMENDED_PLOTS"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.PlotLandscapeLayers"
, 
"name"
:
"PLOT_LANDSCAPE_LAYER_REVEALED_PLOTS"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.PlotLandscapeLayers"
, 
"name"
:
"PLOT_LANDSCAPE_LAYER_WORLD_BUILDER"
, 
"value"
:
2
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.PlotLandscapeLayers"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.PlotLandscapeLayers"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.PlotLandscapeLayers"
, 
"name"
:
"values[2]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.PlotLandscapeLayers"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"PlotStyles"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_BOX_FILL"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_BOX_OUTLINE"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_CIRCLE"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_CIRCLES"
, 
"value"
:
26
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_DOTS"
, 
"value"
:
25
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_DOT_TARGET"
, 
"value"
:
23
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NONE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_1"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_1_ANGLED"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_2"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_2_ANGLED"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_3"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_3_ANGLED"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_4"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_4_ANGLED"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_6"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_6_ANGLED"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_7"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_7_ANGLED"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_8"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_8_ANGLED"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_9"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_NUMPAD_9_ANGLED"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_RIVER_EAST"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_RIVER_SOUTH"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_SIDE_ARROWS"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_TARGET"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"PLOT_STYLE_WAVES"
, 
"value"
:
24
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[23]"
}
]
, 
[
24
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[24]"
}
]
, 
[
25
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[25]"
}
]
, 
[
26
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[26]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.PlotStyles"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"PlotTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.PlotTypes"
, 
"name"
:
"NO_PLOT"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.PlotTypes"
, 
"name"
:
"NUM_PLOT_TYPES"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.PlotTypes"
, 
"name"
:
"PLOT_HILLS"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.PlotTypes"
, 
"name"
:
"PLOT_LAND"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.PlotTypes"
, 
"name"
:
"PLOT_OCEAN"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.PlotTypes"
, 
"name"
:
"PLOT_PEAK"
, 
"value"
:
0
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.PlotTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.PlotTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.PlotTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.PlotTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.PlotTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.PlotTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"PopupControlLayout"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.PopupControlLayout"
, 
"name"
:
"POPUP_LAYOUT_CENTER"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.PopupControlLayout"
, 
"name"
:
"POPUP_LAYOUT_LEFT"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.PopupControlLayout"
, 
"name"
:
"POPUP_LAYOUT_NUMLAYOUTS"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.PopupControlLayout"
, 
"name"
:
"POPUP_LAYOUT_RIGHT"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.PopupControlLayout"
, 
"name"
:
"POPUP_LAYOUT_STRETCH"
, 
"value"
:
3
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.PopupControlLayout"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.PopupControlLayout"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.PopupControlLayout"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.PopupControlLayout"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.PopupControlLayout"
, 
"name"
:
"values[4]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"PopupStates"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.PopupStates"
, 
"name"
:
"POPUPSTATE_IMMEDIATE"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.PopupStates"
, 
"name"
:
"POPUPSTATE_MINIMIZED"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.PopupStates"
, 
"name"
:
"POPUPSTATE_QUEUED"
, 
"value"
:
1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.PopupStates"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.PopupStates"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.PopupStates"
, 
"name"
:
"values[2]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ProbabilityTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ProbabilityTypes"
, 
"name"
:
"NO_PROBABILITY"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.ProbabilityTypes"
, 
"name"
:
"PROBABILITY_HIGH"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.ProbabilityTypes"
, 
"name"
:
"PROBABILITY_LOW"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.ProbabilityTypes"
, 
"name"
:
"PROBABILITY_REAL"
, 
"value"
:
1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.ProbabilityTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.ProbabilityTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.ProbabilityTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.ProbabilityTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ProcessTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ProcessTypes"
, 
"name"
:
"NO_PROCESS"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.ProcessTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"ProfilerCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"ProfilerResetMinMaxCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"ProfilerTurnLockOnCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"ProjectTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ProjectTypes"
, 
"name"
:
"NO_PROJECT"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.ProjectTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"PromotionTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.PromotionTypes"
, 
"name"
:
"NO_PROMOTION"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.PromotionTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"RSEnableCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"RedrawGlobeViewCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"RedrawMinimapCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"ReligionTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ReligionTypes"
, 
"name"
:
"NO_RELIGION"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.ReligionTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ReplayMessageTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ReplayMessageTypes"
, 
"name"
:
"NO_REPLAY_MESSAGE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.ReplayMessageTypes"
, 
"name"
:
"NUM_REPLAY_MESSAGE_TYPES"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.ReplayMessageTypes"
, 
"name"
:
"REPLAY_MESSAGE_CITY_FOUNDED"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.ReplayMessageTypes"
, 
"name"
:
"REPLAY_MESSAGE_MAJOR_EVENT"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.ReplayMessageTypes"
, 
"name"
:
"REPLAY_MESSAGE_PLOT_OWNER_CHANGE"
, 
"value"
:
2
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.ReplayMessageTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.ReplayMessageTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.ReplayMessageTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.ReplayMessageTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.ReplayMessageTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"RiverTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.RiverTypes"
, 
"name"
:
"NO_RIVER"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.RiverTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"RouteTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.RouteTypes"
, 
"name"
:
"NO_ROUTE"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.RouteTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"SaveGameTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"NUM_SAVEGAME_TYPES"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"SAVEGAME_AUTO"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"SAVEGAME_DROP_CONTINUE"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"SAVEGAME_DROP_QUIT"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"SAVEGAME_GROUP"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"SAVEGAME_NONE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"SAVEGAME_NORMAL"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"SAVEGAME_PBEM"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"SAVEGAME_QUICK"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"SAVEGAME_RECOVERY"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"SAVEGAME_REPLAY"
, 
"value"
:
8
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.SaveGameTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"SeaLevelTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.SeaLevelTypes"
, 
"name"
:
"NO_SEALEVEL"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.SeaLevelTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"SeasonTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.SeasonTypes"
, 
"name"
:
"NO_SEASON"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.SeasonTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"ShaderDescCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"ShowEntityBoundingSpheresCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"ShowOnlyAlphaSortingCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"ShowTerrainBoundingSpheresCB"
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"SlowMotionCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"SpecialBuildingTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.SpecialBuildingTypes"
, 
"name"
:
"NO_SPECIALBUILDING"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.SpecialBuildingTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"SpecialOptionTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.SpecialOptionTypes"
, 
"name"
:
"NO_SPECIALOPTION"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.SpecialOptionTypes"
, 
"name"
:
"NUM_SPECIALOPTION_TYPES"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.SpecialOptionTypes"
, 
"name"
:
"SPECIALOPTION_REPORT_STATS"
, 
"value"
:
0
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.SpecialOptionTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.SpecialOptionTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.SpecialOptionTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"SpecialUnitTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.SpecialUnitTypes"
, 
"name"
:
"NO_SPECIALUNIT"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.SpecialUnitTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"SpecialistTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.SpecialistTypes"
, 
"name"
:
"NO_SPECIALIST"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.SpecialistTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"SymbolTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.SymbolTypes"
, 
"name"
:
"NO_SYMBOL"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.SymbolTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"TabGroupTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.TabGroupTypes"
, 
"name"
:
"NO_TABGROUP"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.TabGroupTypes"
, 
"name"
:
"NUM_TABGROUPS"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.TabGroupTypes"
, 
"name"
:
"TABGROUP_AUDIO"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.TabGroupTypes"
, 
"name"
:
"TABGROUP_CLOCK"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.TabGroupTypes"
, 
"name"
:
"TABGROUP_GAME"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.TabGroupTypes"
, 
"name"
:
"TABGROUP_GRAPHICS"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.TabGroupTypes"
, 
"name"
:
"TABGROUP_INPUT"
, 
"value"
:
1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.TabGroupTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.TabGroupTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.TabGroupTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.TabGroupTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.TabGroupTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.TabGroupTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.TabGroupTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"TableStyles"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.TableStyles"
, 
"name"
:
"TABLE_STYLE_ALTDEFAULT"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.TableStyles"
, 
"name"
:
"TABLE_STYLE_ALTEMPTY"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.TableStyles"
, 
"name"
:
"TABLE_STYLE_CITY"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.TableStyles"
, 
"name"
:
"TABLE_STYLE_EMPTY"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.TableStyles"
, 
"name"
:
"TABLE_STYLE_EMPTYSELECTINACTIVE"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.TableStyles"
, 
"name"
:
"TABLE_STYLE_STAGINGROOM"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.TableStyles"
, 
"name"
:
"TABLE_STYLE_STANDARD"
, 
"value"
:
0
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.TableStyles"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.TableStyles"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.TableStyles"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.TableStyles"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.TableStyles"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.TableStyles"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.TableStyles"
, 
"name"
:
"values[6]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"TaskTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"NUM_TASK_TYPES"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"TASK_CHANGE_SPECIALIST"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"TASK_CHANGE_WORKING_PLOT"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"TASK_CLEAR_ORDERS"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"TASK_CLEAR_RALLY_PLOT"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"TASK_CLEAR_WORKING_OVERRIDE"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"TASK_CONSCRIPT"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"TASK_DISBAND"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"TASK_GIFT"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"TASK_HURRY"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"TASK_LIBERATE"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"TASK_RALLY_PLOT"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"TASK_RAZE"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"TASK_SET_AUTOMATED_CITIZENS"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"TASK_SET_AUTOMATED_PRODUCTION"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"TASK_SET_EMPHASIZE"
, 
"value"
:
5
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.TaskTypes"
, 
"name"
:
"values[15]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"TeamTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.TeamTypes"
, 
"name"
:
"NO_TEAM"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.TeamTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"TechTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.TechTypes"
, 
"name"
:
"NO_TECH"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.TechTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"TerrainNormalsCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"TerrainTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.TerrainTypes"
, 
"name"
:
"NO_TERRAIN"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.TerrainTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"TestDebugText"
}
, 
{
"type"
:
"type"
, 
"name"
:
"ToolTipAlignTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_BOTTOM_CENTER"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_BOTTOM_INLEFT"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_BOTTOM_INRIGHT"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_BOTTOM_LEFT"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_BOTTOM_RIGHT"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_CENTER_LEFT"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_CENTER_RIGHT"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_INBOTTOM_LEFT"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_INBOTTOM_RIGHT"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_INTOP_LEFT"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_INTOP_RIGHT"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_TOP_CENTER"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_TOP_INLEFT"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_TOP_INRIGHT"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_TOP_LEFT"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"TOOLTIP_TOP_RIGHT"
, 
"value"
:
4
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.ToolTipAlignTypes"
, 
"name"
:
"values[15]"
}
]
]
}
]
}
, 
{
"type"
:
"class"
, 
"name"
:
"TradeData"
, 
"members"
:
[
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"ItemType"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"bHidden"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"bOffering"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iData"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"TradeableItems"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"NO_TRADEABLE_ITEMS"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"NUM_BASIC_ITEMS"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"NUM_TRADEABLE_HEADINGS"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"NUM_TRADEABLE_ITEMS"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_CITIES"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_CIVIC"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_DEFENSIVE_PACT"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_EMBARGO"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_GOLD"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_GOLD_PER_TURN"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_MAPS"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_OPEN_BORDERS"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_PEACE"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_PEACE_TREATY"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_PERMANENT_ALLIANCE"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_RELIGION"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_RESOURCES"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_SURRENDER"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_TECHNOLOGIES"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_VASSAL"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"TRADE_WAR"
, 
"value"
:
13
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[17]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.TradeableItems"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"TraitTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.TraitTypes"
, 
"name"
:
"NO_TRAIT"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.TraitTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"TurnTimerTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.TurnTimerTypes"
, 
"name"
:
"NO_TURNTIMER"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.TurnTimerTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"UnitAITypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"NO_UNITAI"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"NUM_UNITAI_TYPES"
, 
"value"
:
41
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_ANIMAL"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_ARTIST"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_ASSAULT_SEA"
, 
"value"
:
28
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_ATTACK"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_ATTACK_AIR"
, 
"value"
:
35
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_ATTACK_CITY"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_ATTACK_CITY_LEMMING"
, 
"value"
:
40
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_ATTACK_SEA"
, 
"value"
:
24
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_CARRIER_AIR"
, 
"value"
:
37
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_CARRIER_SEA"
, 
"value"
:
32
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_CITY_COUNTER"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_CITY_DEFENSE"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_CITY_SPECIAL"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_COLLATERAL"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_COUNTER"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_DEFENSE_AIR"
, 
"value"
:
36
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_ENGINEER"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_ESCORT_SEA"
, 
"value"
:
26
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_EXPLORE"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_EXPLORE_SEA"
, 
"value"
:
27
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_GENERAL"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_ICBM"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_MERCHANT"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_MISSILE_AIR"
, 
"value"
:
38
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_MISSILE_CARRIER_SEA"
, 
"value"
:
33
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_MISSIONARY"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_MISSIONARY_SEA"
, 
"value"
:
30
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_PARADROP"
, 
"value"
:
39
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_PILLAGE"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_PIRATE_SEA"
, 
"value"
:
34
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_PROPHET"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_RESERVE"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_RESERVE_SEA"
, 
"value"
:
25
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_SCIENTIST"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_SETTLE"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_SETTLER_SEA"
, 
"value"
:
29
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_SPY"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_SPY_SEA"
, 
"value"
:
31
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_UNKNOWN"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_WORKER"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"UNITAI_WORKER_SEA"
, 
"value"
:
23
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[23]"
}
]
, 
[
24
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[24]"
}
]
, 
[
25
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[25]"
}
]
, 
[
26
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[26]"
}
]
, 
[
27
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[27]"
}
]
, 
[
28
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[28]"
}
]
, 
[
29
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[29]"
}
]
, 
[
30
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[30]"
}
]
, 
[
31
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[31]"
}
]
, 
[
32
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[32]"
}
]
, 
[
33
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[33]"
}
]
, 
[
34
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[34]"
}
]
, 
[
35
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[35]"
}
]
, 
[
36
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[36]"
}
]
, 
[
37
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[37]"
}
]
, 
[
38
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[38]"
}
]
, 
[
39
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[39]"
}
]
, 
[
40
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[40]"
}
]
, 
[
41
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[41]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.UnitAITypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"UnitClassTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.UnitClassTypes"
, 
"name"
:
"NO_UNITCLASS"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.UnitClassTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"UnitCombatTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.UnitCombatTypes"
, 
"name"
:
"NO_UNITCOMBAT"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.UnitCombatTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"UnitDebugMenuCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"UnitTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.UnitTypes"
, 
"name"
:
"NO_UNIT"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.UnitTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"UpkeepTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.UpkeepTypes"
, 
"name"
:
"NO_UPKEEP"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.UpkeepTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"VictoryTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.VictoryTypes"
, 
"name"
:
"NO_VICTORY"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.VictoryTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"VoiceTargetTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.VoiceTargetTypes"
, 
"name"
:
"NO_VOICETARGET"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.VoiceTargetTypes"
, 
"name"
:
"NUM_VOICETARGETS"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.VoiceTargetTypes"
, 
"name"
:
"VOICETARGET_ALL"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.VoiceTargetTypes"
, 
"name"
:
"VOICETARGET_DIPLO"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.VoiceTargetTypes"
, 
"name"
:
"VOICETARGET_TEAM"
, 
"value"
:
1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.VoiceTargetTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.VoiceTargetTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.VoiceTargetTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.VoiceTargetTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.VoiceTargetTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"VoteSourceTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.VoteSourceTypes"
, 
"name"
:
"NO_VOTESOURCE"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.VoteSourceTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"VoteTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.VoteTypes"
, 
"name"
:
"NO_VOTE"
, 
"value"
:
-1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
-1
, 
{
"type"
:
"CvPythonExtensions.VoteTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"WarPlanTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"NO_WARPLAN"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"WARPLAN_ATTACKED"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"WARPLAN_ATTACKED_RECENT"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"WARPLAN_DOGPILE"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"WARPLAN_LIMITED"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"WARPLAN_PREPARING_LIMITED"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"WARPLAN_PREPARING_TOTAL"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"WARPLAN_TOTAL"
, 
"value"
:
5
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.WarPlanTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"WidgetAnim"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"WA_DISABLED"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"WA_FOCUS"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"WA_IDLE"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"WA_LMB_CLICKED"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"WA_LMB_RELEASED"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"WA_MOUSE_OFF"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"WA_MOUSE_OVER"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"WA_RMB_CLICKED"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"WA_RMB_RELEASED"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"WA_UNFOCUS"
, 
"value"
:
2
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.WidgetAnim"
, 
"name"
:
"values[9]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"WidgetTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"NUM_WIDGET_TYPES"
, 
"value"
:
163
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_ACTION"
, 
"value"
:
15
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_ANGRY_CITIZEN"
, 
"value"
:
19
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_AUTOMATE_CITIZENS"
, 
"value"
:
31
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_AUTOMATE_PRODUCTION"
, 
"value"
:
32
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_CHANGE_PERCENT"
, 
"value"
:
23
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_CHANGE_SPECIALIST"
, 
"value"
:
20
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_CHOOSE_EVENT"
, 
"value"
:
126
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_CITIZEN"
, 
"value"
:
17
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_CITY_NAME"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_CITY_SCROLL"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_CITY_TAB"
, 
"value"
:
24
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_CLOSE_SCREEN"
, 
"value"
:
157
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_COMMERCE_MOD_HELP"
, 
"value"
:
156
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_CONSCRIPT"
, 
"value"
:
14
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_CONSTRUCT"
, 
"value"
:
9
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_CONTACT_CIV"
, 
"value"
:
25
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_CONVERT"
, 
"value"
:
30
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_CREATE"
, 
"value"
:
10
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_CREATE_GROUP"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_DEAL_KILL"
, 
"value"
:
151
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_DELETE_GROUP"
, 
"value"
:
7
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_DIPLOMACY_RESPONSE"
, 
"value"
:
34
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_DISABLED_CITIZEN"
, 
"value"
:
16
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_EMPHASIZE"
, 
"value"
:
33
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_END_TURN"
, 
"value"
:
28
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_FILE_EDITBOX"
, 
"value"
:
37
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_FILE_LISTBOX"
, 
"value"
:
36
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_FLAG"
, 
"value"
:
57
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_FOREIGN_ADVISOR"
, 
"value"
:
147
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_FREE_CITIZEN"
, 
"value"
:
18
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_GENERAL"
, 
"value"
:
35
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_GLOBELAYER"
, 
"value"
:
160
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_GLOBELAYER_OPTION"
, 
"value"
:
161
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_GLOBELAYER_TOGGLE"
, 
"value"
:
162
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_ADJUST"
, 
"value"
:
106
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_BONUS_REVEAL"
, 
"value"
:
110
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_BUILDING"
, 
"value"
:
74
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_BUILD_BRIDGE"
, 
"value"
:
100
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_CIVIC_REVEAL"
, 
"value"
:
111
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_CORPORATION_CITY"
, 
"value"
:
63
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_CULTURE"
, 
"value"
:
70
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_DEFENSE"
, 
"value"
:
65
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_DEFENSIVE_PACT"
, 
"value"
:
97
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_DOMAIN_EXTRA_MOVES"
, 
"value"
:
105
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_ESPIONAGE_COST"
, 
"value"
:
76
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_FEATURE_PRODUCTION"
, 
"value"
:
84
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_FINANCE_AWAY_SUPPLY"
, 
"value"
:
117
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_FINANCE_CITY_MAINT"
, 
"value"
:
118
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_FINANCE_CIVIC_UPKEEP"
, 
"value"
:
119
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_FINANCE_FOREIGN_INCOME"
, 
"value"
:
120
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_FINANCE_GOLD_RESERVE"
, 
"value"
:
124
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_FINANCE_GROSS_INCOME"
, 
"value"
:
122
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_FINANCE_INFLATED_COSTS"
, 
"value"
:
121
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_FINANCE_NET_GOLD"
, 
"value"
:
123
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_FINANCE_NUM_UNITS"
, 
"value"
:
115
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_FINANCE_UNIT_COST"
, 
"value"
:
116
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_FOUND_CORPORATION"
, 
"value"
:
114
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_FOUND_RELIGION"
, 
"value"
:
113
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_FREE_TECH"
, 
"value"
:
89
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_FREE_UNIT"
, 
"value"
:
83
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_GOLD_TRADE"
, 
"value"
:
95
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_GREAT_GENERAL"
, 
"value"
:
72
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_GREAT_PEOPLE"
, 
"value"
:
71
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_HAPPINESS"
, 
"value"
:
67
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_HAPPINESS_RATE"
, 
"value"
:
88
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_HEALTH"
, 
"value"
:
66
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_HEALTH_RATE"
, 
"value"
:
87
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_IGNORE_IRRIGATION"
, 
"value"
:
102
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_IMPROVEMENT"
, 
"value"
:
104
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_IRRIGATION"
, 
"value"
:
101
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_LOS_BONUS"
, 
"value"
:
90
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_MAINTENANCE"
, 
"value"
:
60
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_MAP_CENTER"
, 
"value"
:
91
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_MAP_REVEAL"
, 
"value"
:
92
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_MAP_TRADE"
, 
"value"
:
93
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_MOVE_BONUS"
, 
"value"
:
82
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_NATIONALITY"
, 
"value"
:
64
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_OBSOLETE"
, 
"value"
:
79
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_OBSOLETE_BONUS"
, 
"value"
:
80
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_OBSOLETE_SPECIAL"
, 
"value"
:
81
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_OPEN_BORDERS"
, 
"value"
:
96
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_PERMANENT_ALLIANCE"
, 
"value"
:
98
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_POPULATION"
, 
"value"
:
68
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_PROCESS_INFO"
, 
"value"
:
112
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_PRODUCTION"
, 
"value"
:
69
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_PROMOTION"
, 
"value"
:
125
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_RELIGION"
, 
"value"
:
61
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_RELIGION_CITY"
, 
"value"
:
62
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_SELECTED"
, 
"value"
:
73
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_SPECIAL_BUILDING"
, 
"value"
:
108
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_TECH_ENTRY"
, 
"value"
:
77
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_TECH_PREPREQ"
, 
"value"
:
78
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_TECH_TRADE"
, 
"value"
:
94
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_TERRAIN_TRADE"
, 
"value"
:
107
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_TRADE_ROUTES"
, 
"value"
:
86
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_TRADE_ROUTE_CITY"
, 
"value"
:
75
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_VASSAL_STATE"
, 
"value"
:
99
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_WATER_WORK"
, 
"value"
:
103
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_WORKER_RATE"
, 
"value"
:
85
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HELP_YIELD_CHANGE"
, 
"value"
:
109
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_HURRY"
, 
"value"
:
12
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_LAUNCH_VICTORY"
, 
"value"
:
29
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_LEADERHEAD"
, 
"value"
:
154
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_LEADER_LINE"
, 
"value"
:
155
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_LIBERATE_CITY"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_MAINTAIN"
, 
"value"
:
11
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_MENU_ICON"
, 
"value"
:
13
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_MINIMAP_HIGHLIGHT"
, 
"value"
:
152
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_BACK"
, 
"value"
:
132
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_DESCRIPTION"
, 
"value"
:
149
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_DESCRIPTION_NO_HELP"
, 
"value"
:
150
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_FORWARD"
, 
"value"
:
133
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_BONUS"
, 
"value"
:
134
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_BUILDING"
, 
"value"
:
129
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_CIV"
, 
"value"
:
140
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_CIVIC"
, 
"value"
:
139
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_CORPORATION"
, 
"value"
:
159
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_DERIVED_TECH"
, 
"value"
:
131
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_FEATURE"
, 
"value"
:
145
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_IMPROVEMENT"
, 
"value"
:
138
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_LEADER"
, 
"value"
:
141
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_PROJECT"
, 
"value"
:
143
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_PROMOTION"
, 
"value"
:
136
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_RELIGION"
, 
"value"
:
158
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_REQUIRED_TECH"
, 
"value"
:
130
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_SPECIALIST"
, 
"value"
:
142
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_TECH"
, 
"value"
:
127
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_TERRAIN"
, 
"value"
:
144
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_UNIT"
, 
"value"
:
128
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_JUMP_TO_UNIT_COMBAT"
, 
"value"
:
137
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PEDIA_MAIN"
, 
"value"
:
135
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PLOT_LIST"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PLOT_LIST_SHIFT"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_POPUP_QUEUE"
, 
"value"
:
58
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PRODUCTION_MOD_HELP"
, 
"value"
:
153
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_PYTHON"
, 
"value"
:
59
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_RESEARCH"
, 
"value"
:
21
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_REVOLUTION"
, 
"value"
:
148
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_SCORE_BREAKDOWN"
, 
"value"
:
26
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_TECH_TREE"
, 
"value"
:
22
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_TRADE_ITEM"
, 
"value"
:
55
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_TRAIN"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_TURN_EVENT"
, 
"value"
:
146
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_UNIT_MODEL"
, 
"value"
:
56
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_UNIT_NAME"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_WB_ALL_PLOTS_BUTTON"
, 
"value"
:
42
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_WB_CITY_EDIT_BUTTON"
, 
"value"
:
47
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_WB_DIPLOMACY_MODE_BUTTON"
, 
"value"
:
51
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_WB_ERASE_BUTTON"
, 
"value"
:
44
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_WB_EXIT_BUTTON"
, 
"value"
:
45
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_WB_LANDMARK_BUTTON"
, 
"value"
:
43
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_WB_LOAD_BUTTON"
, 
"value"
:
41
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_WB_NORMAL_MAP_TAB_MODE_BUTTON"
, 
"value"
:
49
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_WB_NORMAL_PLAYER_TAB_MODE_BUTTON"
, 
"value"
:
48
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_WB_REGENERATE_MAP"
, 
"value"
:
54
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_WB_REVEAL_ALL_BUTTON"
, 
"value"
:
52
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_WB_REVEAL_TAB_MODE_BUTTON"
, 
"value"
:
50
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_WB_SAVE_BUTTON"
, 
"value"
:
40
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_WB_UNIT_EDIT_BUTTON"
, 
"value"
:
46
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_WB_UNREVEAL_ALL_BUTTON"
, 
"value"
:
53
}
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"WIDGET_ZOOM_CITY"
, 
"value"
:
27
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
7
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[7]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
9
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[9]"
}
]
, 
[
10
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[10]"
}
]
, 
[
11
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[11]"
}
]
, 
[
12
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[12]"
}
]
, 
[
13
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[13]"
}
]
, 
[
14
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[14]"
}
]
, 
[
15
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[15]"
}
]
, 
[
16
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[16]"
}
]
, 
[
17
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[17]"
}
]
, 
[
18
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[18]"
}
]
, 
[
19
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[19]"
}
]
, 
[
20
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[20]"
}
]
, 
[
21
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[21]"
}
]
, 
[
22
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[22]"
}
]
, 
[
23
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[23]"
}
]
, 
[
24
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[24]"
}
]
, 
[
25
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[25]"
}
]
, 
[
26
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[26]"
}
]
, 
[
27
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[27]"
}
]
, 
[
28
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[28]"
}
]
, 
[
29
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[29]"
}
]
, 
[
30
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[30]"
}
]
, 
[
31
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[31]"
}
]
, 
[
32
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[32]"
}
]
, 
[
33
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[33]"
}
]
, 
[
34
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[34]"
}
]
, 
[
35
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[35]"
}
]
, 
[
36
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[36]"
}
]
, 
[
37
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[37]"
}
]
, 
[
40
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[40]"
}
]
, 
[
41
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[41]"
}
]
, 
[
42
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[42]"
}
]
, 
[
43
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[43]"
}
]
, 
[
44
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[44]"
}
]
, 
[
45
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[45]"
}
]
, 
[
46
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[46]"
}
]
, 
[
47
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[47]"
}
]
, 
[
48
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[48]"
}
]
, 
[
49
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[49]"
}
]
, 
[
50
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[50]"
}
]
, 
[
51
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[51]"
}
]
, 
[
52
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[52]"
}
]
, 
[
53
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[53]"
}
]
, 
[
54
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[54]"
}
]
, 
[
55
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[55]"
}
]
, 
[
56
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[56]"
}
]
, 
[
57
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[57]"
}
]
, 
[
58
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[58]"
}
]
, 
[
59
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[59]"
}
]
, 
[
60
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[60]"
}
]
, 
[
61
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[61]"
}
]
, 
[
62
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[62]"
}
]
, 
[
63
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[63]"
}
]
, 
[
64
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[64]"
}
]
, 
[
65
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[65]"
}
]
, 
[
66
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[66]"
}
]
, 
[
67
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[67]"
}
]
, 
[
68
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[68]"
}
]
, 
[
69
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[69]"
}
]
, 
[
70
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[70]"
}
]
, 
[
71
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[71]"
}
]
, 
[
72
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[72]"
}
]
, 
[
73
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[73]"
}
]
, 
[
74
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[74]"
}
]
, 
[
75
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[75]"
}
]
, 
[
76
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[76]"
}
]
, 
[
77
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[77]"
}
]
, 
[
78
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[78]"
}
]
, 
[
79
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[79]"
}
]
, 
[
80
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[80]"
}
]
, 
[
81
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[81]"
}
]
, 
[
82
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[82]"
}
]
, 
[
83
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[83]"
}
]
, 
[
84
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[84]"
}
]
, 
[
85
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[85]"
}
]
, 
[
86
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[86]"
}
]
, 
[
87
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[87]"
}
]
, 
[
88
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[88]"
}
]
, 
[
89
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[89]"
}
]
, 
[
90
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[90]"
}
]
, 
[
91
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[91]"
}
]
, 
[
92
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[92]"
}
]
, 
[
93
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[93]"
}
]
, 
[
94
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[94]"
}
]
, 
[
95
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[95]"
}
]
, 
[
96
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[96]"
}
]
, 
[
97
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[97]"
}
]
, 
[
98
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[98]"
}
]
, 
[
99
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[99]"
}
]
, 
[
100
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[100]"
}
]
, 
[
101
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[101]"
}
]
, 
[
102
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[102]"
}
]
, 
[
103
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[103]"
}
]
, 
[
104
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[104]"
}
]
, 
[
105
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[105]"
}
]
, 
[
106
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[106]"
}
]
, 
[
107
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[107]"
}
]
, 
[
108
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[108]"
}
]
, 
[
109
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[109]"
}
]
, 
[
110
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[110]"
}
]
, 
[
111
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[111]"
}
]
, 
[
112
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[112]"
}
]
, 
[
113
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[113]"
}
]
, 
[
114
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[114]"
}
]
, 
[
115
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[115]"
}
]
, 
[
116
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[116]"
}
]
, 
[
117
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[117]"
}
]
, 
[
118
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[118]"
}
]
, 
[
119
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[119]"
}
]
, 
[
120
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[120]"
}
]
, 
[
121
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[121]"
}
]
, 
[
122
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[122]"
}
]
, 
[
123
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[123]"
}
]
, 
[
124
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[124]"
}
]
, 
[
125
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[125]"
}
]
, 
[
126
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[126]"
}
]
, 
[
127
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[127]"
}
]
, 
[
128
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[128]"
}
]
, 
[
129
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[129]"
}
]
, 
[
130
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[130]"
}
]
, 
[
131
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[131]"
}
]
, 
[
132
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[132]"
}
]
, 
[
133
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[133]"
}
]
, 
[
134
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[134]"
}
]
, 
[
135
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[135]"
}
]
, 
[
136
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[136]"
}
]
, 
[
137
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[137]"
}
]
, 
[
138
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[138]"
}
]
, 
[
139
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[139]"
}
]
, 
[
140
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[140]"
}
]
, 
[
141
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[141]"
}
]
, 
[
142
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[142]"
}
]
, 
[
143
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[143]"
}
]
, 
[
144
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[144]"
}
]
, 
[
145
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[145]"
}
]
, 
[
146
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[146]"
}
]
, 
[
147
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[147]"
}
]
, 
[
148
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[148]"
}
]
, 
[
149
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[149]"
}
]
, 
[
150
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[150]"
}
]
, 
[
151
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[151]"
}
]
, 
[
152
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[152]"
}
]
, 
[
153
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[153]"
}
]
, 
[
154
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[154]"
}
]
, 
[
155
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[155]"
}
]
, 
[
156
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[156]"
}
]
, 
[
157
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[157]"
}
]
, 
[
158
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[158]"
}
]
, 
[
159
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[159]"
}
]
, 
[
160
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[160]"
}
]
, 
[
161
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[161]"
}
]
, 
[
162
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[162]"
}
]
, 
[
163
, 
{
"type"
:
"CvPythonExtensions.WidgetTypes"
, 
"name"
:
"values[163]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"WireframeCB"
}
, 
{
"type"
:
"type"
, 
"name"
:
"WorldBuilderPopupTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"NUM_WBPOPUP"
, 
"value"
:
208
}
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"WBPOPUP_CITY"
, 
"value"
:
200
}
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"WBPOPUP_FEATURE"
, 
"value"
:
205
}
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"WBPOPUP_GAME"
, 
"value"
:
207
}
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"WBPOPUP_IMPROVEMENT"
, 
"value"
:
206
}
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"WBPOPUP_NONE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"WBPOPUP_PLAYER"
, 
"value"
:
202
}
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"WBPOPUP_PLOT"
, 
"value"
:
203
}
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"WBPOPUP_START"
, 
"value"
:
200
}
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"WBPOPUP_TERRAIN"
, 
"value"
:
204
}
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"WBPOPUP_UNIT"
, 
"value"
:
201
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
200
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"values[200]"
}
]
, 
[
201
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"values[201]"
}
]
, 
[
202
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"values[202]"
}
]
, 
[
203
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"values[203]"
}
]
, 
[
204
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"values[204]"
}
]
, 
[
205
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"values[205]"
}
]
, 
[
206
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"values[206]"
}
]
, 
[
207
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"values[207]"
}
]
, 
[
208
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"values[208]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.WorldBuilderPopupTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"WorldSizeTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"NO_WORLDSIZE"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"NUM_WORLDSIZE_TYPES"
, 
"value"
:
6
}
, 
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"WORLDSIZE_DUEL"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"WORLDSIZE_HUGE"
, 
"value"
:
5
}
, 
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"WORLDSIZE_LARGE"
, 
"value"
:
4
}
, 
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"WORLDSIZE_SMALL"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"WORLDSIZE_STANDARD"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"WORLDSIZE_TINY"
, 
"value"
:
1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
4
, 
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"values[4]"
}
]
, 
[
5
, 
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"values[5]"
}
]
, 
[
6
, 
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"values[6]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.WorldSizeTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"doc"
:
"void ( bool bChecked, void* pParam)"
, 
"type"
:
"function"
, 
"name"
:
"WriteFogWarTextureCB"
}
, 
{
"type"
:
"class"
, 
"name"
:
"XYCoords"
, 
"members"
:
[
{
"type"
:
"instancemethod"
, 
"name"
:
"__init__"
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iX"
, 
"deleter"
:
false
, 
"setter"
:
true
}
, 
{
"getter"
:
true
, 
"type"
:
"property"
, 
"name"
:
"iY"
, 
"deleter"
:
false
, 
"setter"
:
true
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"YieldTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.YieldTypes"
, 
"name"
:
"NO_YIELD"
, 
"value"
:
-1
}
, 
{
"type"
:
"CvPythonExtensions.YieldTypes"
, 
"name"
:
"NUM_YIELD_TYPES"
, 
"value"
:
3
}
, 
{
"type"
:
"CvPythonExtensions.YieldTypes"
, 
"name"
:
"YIELD_COMMERCE"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.YieldTypes"
, 
"name"
:
"YIELD_FOOD"
, 
"value"
:
0
}
, 
{
"type"
:
"CvPythonExtensions.YieldTypes"
, 
"name"
:
"YIELD_PRODUCTION"
, 
"value"
:
1
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.YieldTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.YieldTypes"
, 
"name"
:
"values[1]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.YieldTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
3
, 
{
"type"
:
"CvPythonExtensions.YieldTypes"
, 
"name"
:
"values[3]"
}
]
, 
[
-1
, 
{
"type"
:
"CvPythonExtensions.YieldTypes"
, 
"name"
:
"values[-1]"
}
]
]
}
]
}
, 
{
"type"
:
"type"
, 
"name"
:
"ZoomLevelTypes"
, 
"members"
:
[
{
"type"
:
"CvPythonExtensions.ZoomLevelTypes"
, 
"name"
:
"ZOOM_DETAIL"
, 
"value"
:
1
}
, 
{
"type"
:
"CvPythonExtensions.ZoomLevelTypes"
, 
"name"
:
"ZOOM_GLOBEVIEW"
, 
"value"
:
8
}
, 
{
"type"
:
"CvPythonExtensions.ZoomLevelTypes"
, 
"name"
:
"ZOOM_NORMAL"
, 
"value"
:
2
}
, 
{
"type"
:
"CvPythonExtensions.ZoomLevelTypes"
, 
"name"
:
"ZOOM_UNKNOWN"
, 
"value"
:
0
}
, 
{
"doc"
:
"x.__init__(...) initializes x; see x.__class__.__doc__ for signature"
, 
"type"
:
"wrapper_descriptor"
, 
"name"
:
"__init__"
}
, 
{
"type"
:
"member_descriptor"
, 
"name"
:
"name"
}
, 
{
"doc"
:
"dict() -> new empty dictionary.\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs.\ndict(seq) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
, 
"type"
:
"dict"
, 
"name"
:
"values"
, 
"value"
:
[
[
0
, 
{
"type"
:
"CvPythonExtensions.ZoomLevelTypes"
, 
"name"
:
"values[0]"
}
]
, 
[
8
, 
{
"type"
:
"CvPythonExtensions.ZoomLevelTypes"
, 
"name"
:
"values[8]"
}
]
, 
[
2
, 
{
"type"
:
"CvPythonExtensions.ZoomLevelTypes"
, 
"name"
:
"values[2]"
}
]
, 
[
1
, 
{
"type"
:
"CvPythonExtensions.ZoomLevelTypes"
, 
"name"
:
"values[1]"
}
]
]
}
]
}
, 
{
"type"
:
"function"
, 
"name"
:
"addImportModule"
}
, 
{
"doc"
:
"cyAddWBAdvancedStartControlTabs() - inits the worldbuilder tool AdvancedStart control"
, 
"type"
:
"function"
, 
"name"
:
"addWBAdvancedStartControlTabs"
}
, 
{
"doc"
:
"cyAddWBPlayerControlTabs() - inits the worldbuilder tool player control"
, 
"type"
:
"function"
, 
"name"
:
"addWBPlayerControlTabs"
}
, 
{
"doc"
:
"bool (int eTeamA, int eTeamB)"
, 
"type"
:
"function"
, 
"name"
:
"atWar"
}
, 
{
"doc"
:
"allow the game to update during startup"
, 
"type"
:
"function"
, 
"name"
:
"callUpdater"
}
, 
{
"doc"
:
"DirectionTypes (CardinalDirectionTypes eDir) - converts a CardinalDirectionType to the corresponding DirectionType"
, 
"type"
:
"function"
, 
"name"
:
"cardinalDirectionToDirection"
}
, 
{
"doc"
:
"float (float fNum, float fLow, float fHigh)"
, 
"type"
:
"function"
, 
"name"
:
"cyFloatRange"
}
, 
{
"doc"
:
"int (int iNum, int iLow, int iHigh)"
, 
"type"
:
"function"
, 
"name"
:
"cyIntRange"
}
, 
{
"doc"
:
"void cyDestroyWBDiplomacyCtrl() - initializes the starting place for the world builder tab ctrls"
, 
"type"
:
"function"
, 
"name"
:
"destroyWBDiplomacyCtrl"
}
, 
{
"doc"
:
"DirectionTypes (int iDX, int iDY)"
, 
"type"
:
"function"
, 
"name"
:
"directionXY"
}
, 
{
"doc"
:
"DirectionTypes (CyPlot* pFromPlot, CyPlot* pToPlot)"
, 
"type"
:
"function"
, 
"name"
:
"directionXYFromPlot"
}
, 
{
"doc"
:
"int (int iDX)"
, 
"type"
:
"function"
, 
"name"
:
"dxWrap"
}
, 
{
"doc"
:
"int (int iDY)"
, 
"type"
:
"function"
, 
"name"
:
"dyWrap"
}
, 
{
"doc"
:
"DirectionTypes (int iDX, int iDY)"
, 
"type"
:
"function"
, 
"name"
:
"estimateDirection"
}
, 
{
"doc"
:
"int(x[, base]) -> integer\n\nConvert a string or number to an integer, if possible.  A floating point\nargument will be truncated towards zero (this does not include a string\nrepresentation of a floating point number!)  When converting a string, use\nthe optional base.  It is an error to supply a base when converting a\nnon-string. If the argument is outside the integer range a long object\nwill be returned instead."
, 
"type"
:
"int"
, 
"name"
:
"false"
, 
"value"
:
0
}
, 
{
"doc"
:
"int /*ImprovementTypes*/ (int /*ImprovementTypes*/ eImprovement, int iCount)"
, 
"type"
:
"function"
, 
"name"
:
"finalImprovementUpgrade"
}
, 
{
"doc"
:
"getASBuilding(int iIndex)"
, 
"type"
:
"function"
, 
"name"
:
"getASBuilding"
}
, 
{
"doc"
:
"getASImprovement(int iIndex)"
, 
"type"
:
"function"
, 
"name"
:
"getASImprovement"
}
, 
{
"doc"
:
"getASRoute(int iIndex)"
, 
"type"
:
"function"
, 
"name"
:
"getASRoute"
}
, 
{
"doc"
:
"getASUnit(int iIndex)"
, 
"type"
:
"function"
, 
"name"
:
"getASUnit"
}
, 
{
"doc"
:
"int () - Returns the clock hour when the alarm is set to go off"
, 
"type"
:
"function"
, 
"name"
:
"getAlarmHour"
}
, 
{
"doc"
:
"int () - Returns the number of hours left before the alarm is set to go off"
, 
"type"
:
"function"
, 
"name"
:
"getAlarmHourLeft"
}
, 
{
"doc"
:
"int () - Returns the clock minute when the alarm is set to go off"
, 
"type"
:
"function"
, 
"name"
:
"getAlarmMin"
}
, 
{
"doc"
:
"int () - Returns the number of minutes (excluding those accounted for by the hours) left before the alarm is set to go off"
, 
"type"
:
"function"
, 
"name"
:
"getAlarmMinLeft"
}
, 
{
"doc"
:
"get cheat level"
, 
"type"
:
"function"
, 
"name"
:
"getChtLvl"
}
, 
{
"doc"
:
"CyPlot* (IDInfo city)"
, 
"type"
:
"function"
, 
"name"
:
"getCity"
}
, 
{
"doc"
:
"wstring () - returns the string for the time (localized)"
, 
"type"
:
"function"
, 
"name"
:
"getClockText"
}
, 
{
"doc"
:
"int (CyUnit* pAttacker, CyUnit* pDefender)"
, 
"type"
:
"function"
, 
"name"
:
"getCombatOdds"
}
, 
{
"doc"
:
"getCyDefinesVarSystem"
, 
"type"
:
"function"
, 
"name"
:
"getCyDefinesVarSystem"
}
, 
{
"doc"
:
"get game era index"
, 
"type"
:
"function"
, 
"name"
:
"getEra"
}
, 
{
"doc"
:
"int (int /*TeamTypes*/ iOurTeam, int /*TeamTypes*/ iTargetTeam)"
, 
"type"
:
"function"
, 
"name"
:
"getEspionageModifier"
}
, 
{
"doc"
:
"int(iFromX, iToX)"
, 
"type"
:
"function"
, 
"name"
:
"getExeLinkDate"
}
, 
{
"doc"
:
"int (int iLandPlots)"
, 
"type"
:
"function"
, 
"name"
:
"getLandPlotsAsset"
}
, 
{
"doc"
:
"int (int iPopulation)"
, 
"type"
:
"function"
, 
"name"
:
"getLandPlotsScore"
}
, 
{
"type"
:
"function"
, 
"name"
:
"getModulePathName"
}
, 
{
"doc"
:
"CardinalDirectionTypes (CardinalDirectionTypes eDir)"
, 
"type"
:
"function"
, 
"name"
:
"getOppositeCardinalDirection"
}
, 
{
"doc"
:
"int (int iPopulation)"
, 
"type"
:
"function"
, 
"name"
:
"getPopulationAsset"
}
, 
{
"doc"
:
"int (int iPopulation)"
, 
"type"
:
"function"
, 
"name"
:
"getPopulationPower"
}
, 
{
"doc"
:
"int (int iPopulation)"
, 
"type"
:
"function"
, 
"name"
:
"getPopulationScore"
}
, 
{
"doc"
:
"get game random seed"
, 
"type"
:
"function"
, 
"name"
:
"getSyncRandomSeed"
}
, 
{
"doc"
:
"int (int /*TechTypes*/ eTech)"
, 
"type"
:
"function"
, 
"name"
:
"getTechScore"
}
, 
{
"doc"
:
"CyUnit* (IDInfo unit)"
, 
"type"
:
"function"
, 
"name"
:
"getUnit"
}
, 
{
"doc"
:
"getWBSaveExtension"
, 
"type"
:
"function"
, 
"name"
:
"getWBSaveExtension"
}
, 
{
"doc"
:
"getWBSaveFolder"
, 
"type"
:
"function"
, 
"name"
:
"getWBSaveFolder"
}
, 
{
"doc"
:
"getWBToolAdvancedStartTabCtrl() - gets the worldbuilder tool normal player tab control"
, 
"type"
:
"function"
, 
"name"
:
"getWBToolAdvancedStartTabCtrl"
}
, 
{
"doc"
:
"getWBToolDiplomacyTabCtrl() - gets the worldbuilder tool diplomacy tab control"
, 
"type"
:
"function"
, 
"name"
:
"getWBToolDiplomacyTabCtrl"
}
, 
{
"doc"
:
"getWBToolEditTabCtrl() - gets the worldbuilder tool edit tab control"
, 
"type"
:
"function"
, 
"name"
:
"getWBToolEditTabCtrl"
}
, 
{
"doc"
:
"getWBToolNormalMapTabCtrl() - gets the worldbuilder tool normal map tab control"
, 
"type"
:
"function"
, 
"name"
:
"getWBToolNormalMapTabCtrl"
}
, 
{
"doc"
:
"getWBToolNormalPlayerTabCtrl() - gets the worldbuilder tool normal player tab control"
, 
"type"
:
"function"
, 
"name"
:
"getWBToolNormalPlayerTabCtrl"
}
, 
{
"doc"
:
"int (int /*BuildingClassTypes*/ eWonderClass)"
, 
"type"
:
"function"
, 
"name"
:
"getWonderScore"
}
, 
{
"doc"
:
"int (int /*CivicTypes*/ eCivic)"
, 
"type"
:
"function"
, 
"name"
:
"getWorldSizeMaxConscript"
}
, 
{
"doc"
:
"void cyInitWBDiplomacyCtrl() - initializes the starting place for the world builder tab ctrls"
, 
"type"
:
"function"
, 
"name"
:
"initWBDiplomacyCtrl"
}
, 
{
"doc"
:
"cyInitWBToolAdvancedStartControl() - inits the worldbuilder tool AdvancedStart control"
, 
"type"
:
"function"
, 
"name"
:
"initWBToolAdvancedStartControl"
}
, 
{
"doc"
:
"cyInitWBToolEditCtrl() - inits the worldbuilder tool edit control"
, 
"type"
:
"function"
, 
"name"
:
"initWBToolEditCtrl"
}
, 
{
"doc"
:
"void cyInitWBToolEditCtrlTab(bool bUnit) - inits the worldbuilder tool edit control's second tab, either promotions for a unit edit control or buildings for a city edit control"
, 
"type"
:
"function"
, 
"name"
:
"initWBToolEditCtrlTab"
}
, 
{
"doc"
:
"cyInitWBToolPlayerControl() - inits the worldbuilder tool player control"
, 
"type"
:
"function"
, 
"name"
:
"initWBToolPlayerControl"
}
, 
{
"doc"
:
"bool () - Returns whether or not the alarm is currently set"
, 
"type"
:
"function"
, 
"name"
:
"isAlarmOn"
}
, 
{
"doc"
:
"bool (DirectionTypes eDirection)"
, 
"type"
:
"function"
, 
"name"
:
"isCardinalDirection"
}
, 
{
"doc"
:
"bool (int /*ProjectTypes*/ eProject)"
, 
"type"
:
"function"
, 
"name"
:
"isLimitedProject"
}
, 
{
"doc"
:
"bool (int /*UnitClassTypes*/ eUnitClass)"
, 
"type"
:
"function"
, 
"name"
:
"isLimitedUnitClass"
}
, 
{
"doc"
:
"bool (int /*BuildingClassTypes*/ eBuildingClass)"
, 
"type"
:
"function"
, 
"name"
:
"isLimitedWonderClass"
}
, 
{
"type"
:
"function"
, 
"name"
:
"isMouseOverGameSurface"
}
, 
{
"doc"
:
"bool (int /*UnitClassTypes*/ eUnitClass)"
, 
"type"
:
"function"
, 
"name"
:
"isNationalUnitClass"
}
, 
{
"doc"
:
"bool (int /*BuildingClassTypes*/ eBuildingClass)"
, 
"type"
:
"function"
, 
"name"
:
"isNationalWonderClass"
}
, 
{
"doc"
:
"bool (int eOurTeam, int eTheirTeam)"
, 
"type"
:
"function"
, 
"name"
:
"isPotentialEnemy"
}
, 
{
"doc"
:
"bool (int /*PromotionTypes*/ ePromotion, int /*UnitTypes*/ eUnit, bool bLeader)"
, 
"type"
:
"function"
, 
"name"
:
"isPromotionValid"
}
, 
{
"doc"
:
"int (int /*TechTypes*/ eTech)"
, 
"type"
:
"function"
, 
"name"
:
"isReligionTech"
}
, 
{
"doc"
:
"bool (int /*ProjectTypes*/ eProject)"
, 
"type"
:
"function"
, 
"name"
:
"isTeamProject"
}
, 
{
"doc"
:
"bool (int /*UnitClassTypes*/ eUnitClass)"
, 
"type"
:
"function"
, 
"name"
:
"isTeamUnitClass"
}
, 
{
"doc"
:
"bool (int /*BuildingClassTypes*/ eBuildingClass)"
, 
"type"
:
"function"
, 
"name"
:
"isTeamWonderClass"
}
, 
{
"doc"
:
"bool (int /*TechTypes*/ eTech, int /*BuildingTypes*/ eBuilding)"
, 
"type"
:
"function"
, 
"name"
:
"isTechRequiredForBuilding"
}
, 
{
"doc"
:
"bool (int /*TechTypes*/ eTech, int /*ProjectTypes*/ eProject)"
, 
"type"
:
"function"
, 
"name"
:
"isTechRequiredForProject"
}
, 
{
"doc"
:
"bool (int /*TechTypes*/ eTech, int /*UnitTypes*/ eUnit)"
, 
"type"
:
"function"
, 
"name"
:
"isTechRequiredForUnit"
}
, 
{
"doc"
:
"bool (int /*ProjectTypes*/ eProject)"
, 
"type"
:
"function"
, 
"name"
:
"isWorldProject"
}
, 
{
"doc"
:
"bool (int /*UnitClassTypes*/ eUnitClass)"
, 
"type"
:
"function"
, 
"name"
:
"isWorldUnitClass"
}
, 
{
"doc"
:
"bool (int /*BuildingClassTypes*/ eBuildingClass)"
, 
"type"
:
"function"
, 
"name"
:
"isWorldWonderClass"
}
, 
{
"type"
:
"function"
, 
"name"
:
"loadImportModule"
}
, 
{
"doc"
:
"CyPlot* (int iX, int iY, CardinalDirectionTypes eCardDirection)"
, 
"type"
:
"function"
, 
"name"
:
"plotCardinalDirection"
}
, 
{
"doc"
:
"CyPlot* (int iX, int iY, int iIndex)"
, 
"type"
:
"function"
, 
"name"
:
"plotCity"
}
, 
{
"doc"
:
"int (int iDX, int iDY)"
, 
"type"
:
"function"
, 
"name"
:
"plotCityXY"
}
, 
{
"doc"
:
"int (CyCity* pCity, CyPlot* pPlot)"
, 
"type"
:
"function"
, 
"name"
:
"plotCityXYFromCity"
}
, 
{
"doc"
:
"CyPlot* (int iX, int iY, DirectionTypes eDirection)"
, 
"type"
:
"function"
, 
"name"
:
"plotDirection"
}
, 
{
"doc"
:
"int (int iX1, int iY1, int iX2, int iY2)"
, 
"type"
:
"function"
, 
"name"
:
"plotDistance"
}
, 
{
"doc"
:
"CyPlot* (int iX, int iY, int iDX, int iDY)"
, 
"type"
:
"function"
, 
"name"
:
"plotXY"
}
, 
{
"doc"
:
"void cyRefreshWorldBuilder2EditControlCorporationButtons() - refreshes the corporation and headquarter buttons on the edit control tab"
, 
"type"
:
"function"
, 
"name"
:
"refreshWBEditCtrlCorporationButtons"
}
, 
{
"doc"
:
"void cyRefreshWorldBuilder2EditControlReligionButtons() - refreshes the religion and holy city buttons on the edit control tab"
, 
"type"
:
"function"
, 
"name"
:
"refreshWBEditCtrlReligionButtons"
}
, 
{
"doc"
:
"void cySaveDiplomacySettings() - initializes the starting place for the world builder tab ctrls"
, 
"type"
:
"function"
, 
"name"
:
"saveDiplomacySettings"
}
, 
{
"doc"
:
"void (int iHour) - Sets the alarm to go off at iHour"
, 
"type"
:
"function"
, 
"name"
:
"setAlarmHour"
}
, 
{
"doc"
:
"void (int iHour) - Sets the alarm to go off at iHour"
, 
"type"
:
"function"
, 
"name"
:
"setAlarmMin"
}
, 
{
"doc"
:
"void cySetDiplomacySettings() - initializes the starting place for the world builder tab ctrls"
, 
"type"
:
"function"
, 
"name"
:
"setDiplomacySettings"
}
, 
{
"type"
:
"function"
, 
"name"
:
"setFocusToCVG"
}
, 
{
"doc"
:
"void(boost::python::list& lst, int iWidth, int iHeight, CyFractal& frac, int iPercent)"
, 
"type"
:
"function"
, 
"name"
:
"setHeights"
}
, 
{
"doc"
:
"No intro"
, 
"type"
:
"function"
, 
"name"
:
"setNoIntroMovie"
}
, 
{
"doc"
:
"void cySetWBInitialCtrlTabPlacement() - initializes the starting place for the world builder tab ctrls"
, 
"type"
:
"function"
, 
"name"
:
"setWBInitialCtrlTabPlacement"
}
, 
{
"doc"
:
"void(int iNum, CvRandom& rand, boost::python::list& lst)"
, 
"type"
:
"function"
, 
"name"
:
"shuffleList"
}
, 
{
"doc"
:
"CyPlot* (int iX, int iY, CardinalDirectionTypes eCardDirection)"
, 
"type"
:
"function"
, 
"name"
:
"splotCardinalDirection"
}
, 
{
"doc"
:
"CyPlot* (int iX, int iY, int iDX, int iDY)"
, 
"type"
:
"function"
, 
"name"
:
"splotXY"
}
, 
{
"doc"
:
"int (int iX1, int iY1, int iX2, int iY2)"
, 
"type"
:
"function"
, 
"name"
:
"stepDistance"
}
, 
{
"doc"
:
"void (bool bToggleValue, int iHour, int iMin) - Turns on (or off) the alarm to go off in iHour and iMin"
, 
"type"
:
"function"
, 
"name"
:
"toggleAlarm"
}
, 
{
"doc"
:
"int(x[, base]) -> integer\n\nConvert a string or number to an integer, if possible.  A floating point\nargument will be truncated towards zero (this does not include a string\nrepresentation of a floating point number!)  When converting a string, use\nthe optional base.  It is an error to supply a base when converting a\nnon-string. If the argument is outside the integer range a long object\nwill be returned instead."
, 
"type"
:
"int"
, 
"name"
:
"true"
, 
"value"
:
1
}
]
}

